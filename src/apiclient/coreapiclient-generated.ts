import * as base from './coreapibaseclient';
/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.6.6324.28497 (NJsonSchema v8.33.6323.36213) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as jQuery from 'jquery';

export interface IAccountClient {
    /**
     * @return Success
     */
    editProfile(): Promise<Company>;
    /**
     * @model (optional) 
     * @return Success
     */
    updateProfile(model?: Company): Promise<void>;
    /**
     * @model (optional) 
     * @return Success
     */
    postStripeCard(model?: AccountRegisteredCard): Promise<void>;
    /**
     * @model (optional) 
     * @return Success
     */
    stripePay(model?: StripePayModel): Promise<void>;
    /**
     * @return Success
     */
    getAccountRegisteredCards(): Promise<AccountRegisteredCard[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteAccountRegisteredCard(id?: string): Promise<void>;
}

export class AccountClient extends base.CoreApiBaseClient implements IAccountClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    editProfile() {
        return new Promise<Company>((resolve, reject) => {
            this.editProfileWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private editProfileWithCallbacks(onSuccess?: (result: Company) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Account/EditProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processEditProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processEditProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processEditProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processEditProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processEditProfile(xhr: any): Company {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Company = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Company.fromJS(resultData200) : new Company();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    updateProfile(model?: Company) {
        return new Promise<void>((resolve, reject) => {
            this.updateProfileWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private updateProfileWithCallbacks(model: Company, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Account/UpdateProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processUpdateProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUpdateProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processUpdateProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUpdateProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUpdateProfile(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postStripeCard(model?: AccountRegisteredCard) {
        return new Promise<void>((resolve, reject) => {
            this.postStripeCardWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postStripeCardWithCallbacks(model: AccountRegisteredCard, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Account/PostStripeCard";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostStripeCardWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostStripeCardWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostStripeCardWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostStripeCard(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostStripeCard(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    stripePay(model?: StripePayModel) {
        return new Promise<void>((resolve, reject) => {
            this.stripePayWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private stripePayWithCallbacks(model: StripePayModel, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Account/StripePay";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processStripePayWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processStripePayWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processStripePayWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processStripePay(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processStripePay(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getAccountRegisteredCards() {
        return new Promise<AccountRegisteredCard[]>((resolve, reject) => {
            this.getAccountRegisteredCardsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAccountRegisteredCardsWithCallbacks(onSuccess?: (result: AccountRegisteredCard[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Account/GetAccountRegisteredCards";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAccountRegisteredCardsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAccountRegisteredCardsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAccountRegisteredCardsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAccountRegisteredCards(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAccountRegisteredCards(xhr: any): AccountRegisteredCard[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AccountRegisteredCard[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AccountRegisteredCard.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteAccountRegisteredCard(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteAccountRegisteredCardWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteAccountRegisteredCardWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Account/DeleteAccountRegisteredCard?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteAccountRegisteredCardWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteAccountRegisteredCardWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteAccountRegisteredCardWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteAccountRegisteredCard(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteAccountRegisteredCard(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IAccountBalanceClient {
    /**
     * @personid (optional) 
     * @model (optional) 
     * @return Success
     */
    insertTransaction(personid?: number, model?: BillingTransaction): Promise<BillingTransaction>;
    /**
     * @personid (optional) 
     * @return Success
     */
    getTransactionsAndBalance(personid?: number): Promise<TotalAccountBalanceModel>;
    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getAllBillingTransactionsAndBalance(from?: Date, to?: Date): Promise<TotalAccountBalanceModel>;
}

export class AccountBalanceClient extends base.CoreApiBaseClient implements IAccountBalanceClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @personid (optional) 
     * @model (optional) 
     * @return Success
     */
    insertTransaction(personid?: number, model?: BillingTransaction) {
        return new Promise<BillingTransaction>((resolve, reject) => {
            this.insertTransactionWithCallbacks(personid, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private insertTransactionWithCallbacks(personid: number, model: BillingTransaction, onSuccess?: (result: BillingTransaction) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AccountBalance/InsertTransaction?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processInsertTransactionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processInsertTransactionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processInsertTransactionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processInsertTransaction(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processInsertTransaction(xhr: any): BillingTransaction {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BillingTransaction = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BillingTransaction.fromJS(resultData200) : new BillingTransaction();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    getTransactionsAndBalance(personid?: number) {
        return new Promise<TotalAccountBalanceModel>((resolve, reject) => {
            this.getTransactionsAndBalanceWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTransactionsAndBalanceWithCallbacks(personid: number, onSuccess?: (result: TotalAccountBalanceModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AccountBalance/GetTransactionsAndBalance?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTransactionsAndBalanceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTransactionsAndBalanceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTransactionsAndBalanceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTransactionsAndBalance(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTransactionsAndBalance(xhr: any): TotalAccountBalanceModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TotalAccountBalanceModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TotalAccountBalanceModel.fromJS(resultData200) : new TotalAccountBalanceModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getAllBillingTransactionsAndBalance(from?: Date, to?: Date) {
        return new Promise<TotalAccountBalanceModel>((resolve, reject) => {
            this.getAllBillingTransactionsAndBalanceWithCallbacks(from, to, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllBillingTransactionsAndBalanceWithCallbacks(from: Date, to: Date, onSuccess?: (result: TotalAccountBalanceModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AccountBalance/GetAllBillingTransactionsAndBalance?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent("" + from.toJSON()) + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllBillingTransactionsAndBalanceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllBillingTransactionsAndBalanceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllBillingTransactionsAndBalanceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllBillingTransactionsAndBalance(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllBillingTransactionsAndBalance(xhr: any): TotalAccountBalanceModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TotalAccountBalanceModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TotalAccountBalanceModel.fromJS(resultData200) : new TotalAccountBalanceModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IAddressClient {
    /**
     * @personid (optional) 
     * @return Success
     */
    getPersonAddresses(personid?: number): Promise<LocationAddress[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<LocationAddress>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: LocationAddress): Promise<LocationAddress>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: LocationAddress): Promise<LocationAddress>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class AddressClient extends base.CoreApiBaseClient implements IAddressClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    getPersonAddresses(personid?: number) {
        return new Promise<LocationAddress[]>((resolve, reject) => {
            this.getPersonAddressesWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPersonAddressesWithCallbacks(personid: number, onSuccess?: (result: LocationAddress[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Address/GetPersonAddresses?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPersonAddressesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPersonAddressesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPersonAddressesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPersonAddresses(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPersonAddresses(xhr: any): LocationAddress[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: LocationAddress[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(LocationAddress.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<LocationAddress>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: LocationAddress) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Address/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): LocationAddress {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: LocationAddress = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? LocationAddress.fromJS(resultData200) : new LocationAddress();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: LocationAddress) {
        return new Promise<LocationAddress>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: LocationAddress, onSuccess?: (result: LocationAddress) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Address/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): LocationAddress {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: LocationAddress = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? LocationAddress.fromJS(resultData200) : new LocationAddress();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: LocationAddress) {
        return new Promise<LocationAddress>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: LocationAddress, onSuccess?: (result: LocationAddress) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Address/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): LocationAddress {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: LocationAddress = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? LocationAddress.fromJS(resultData200) : new LocationAddress();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Address/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IAgreementClient {
    /**
     * @fromAgreementTemplateId (optional) 
     * @agreementReceivers (optional) 
     * @return Success
     */
    implementAgreementFromAgreementTemplate(fromAgreementTemplateId?: number, agreementReceivers?: any[]): Promise<Agreement>;
    /**
     * @fileurl (optional) 
     * @return Success
     */
    copyCdnDocumentToAgreementDocument(fileurl?: string): Promise<string>;
    /**
     * @return Success
     */
    getAllAgreements(): Promise<Agreement[]>;
    /**
     * @agreementid (optional) 
     * @return Success
     */
    getAgreement(agreementid?: number): Promise<Agreement>;
    /**
     * @model (optional) 
     * @return Success
     */
    postAgreement(model?: Agreement): Promise<Agreement>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putAgreement(id?: number, model?: Agreement): Promise<Agreement>;
    /**
     * @agreementid (optional) 
     * @return Success
     */
    deleteAgreement(agreementid?: number): Promise<void>;
}

export class AgreementClient extends base.CoreApiBaseClient implements IAgreementClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @fromAgreementTemplateId (optional) 
     * @agreementReceivers (optional) 
     * @return Success
     */
    implementAgreementFromAgreementTemplate(fromAgreementTemplateId?: number, agreementReceivers?: any[]) {
        return new Promise<Agreement>((resolve, reject) => {
            this.implementAgreementFromAgreementTemplateWithCallbacks(fromAgreementTemplateId, agreementReceivers, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private implementAgreementFromAgreementTemplateWithCallbacks(fromAgreementTemplateId: number, agreementReceivers: any[], onSuccess?: (result: Agreement) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Agreement/ImplementAgreementFromAgreementTemplate?";
        if (fromAgreementTemplateId !== undefined)
            url_ += "FromAgreementTemplateId=" + encodeURIComponent("" + fromAgreementTemplateId) + "&";
        if (agreementReceivers !== undefined)
            agreementReceivers.forEach((item, index) => {
                for (let attr in item)
                    url_ += "AgreementReceivers[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processImplementAgreementFromAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processImplementAgreementFromAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processImplementAgreementFromAgreementTemplateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processImplementAgreementFromAgreementTemplate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processImplementAgreementFromAgreementTemplate(xhr: any): Agreement {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Agreement = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Agreement.fromJS(resultData200) : new Agreement();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @fileurl (optional) 
     * @return Success
     */
    copyCdnDocumentToAgreementDocument(fileurl?: string) {
        return new Promise<string>((resolve, reject) => {
            this.copyCdnDocumentToAgreementDocumentWithCallbacks(fileurl, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private copyCdnDocumentToAgreementDocumentWithCallbacks(fileurl: string, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Agreement/CopyCdnDocumentToAgreementDocument?";
        if (fileurl !== undefined)
            url_ += "fileurl=" + encodeURIComponent("" + fileurl) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCopyCdnDocumentToAgreementDocumentWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCopyCdnDocumentToAgreementDocumentWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCopyCdnDocumentToAgreementDocumentWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCopyCdnDocumentToAgreementDocument(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCopyCdnDocumentToAgreementDocument(xhr: any): string {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllAgreements() {
        return new Promise<Agreement[]>((resolve, reject) => {
            this.getAllAgreementsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllAgreementsWithCallbacks(onSuccess?: (result: Agreement[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Agreement/GetAllAgreements";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllAgreementsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllAgreementsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllAgreementsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllAgreements(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllAgreements(xhr: any): Agreement[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Agreement[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Agreement.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @agreementid (optional) 
     * @return Success
     */
    getAgreement(agreementid?: number) {
        return new Promise<Agreement>((resolve, reject) => {
            this.getAgreementWithCallbacks(agreementid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAgreementWithCallbacks(agreementid: number, onSuccess?: (result: Agreement) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Agreement/GetAgreement?";
        if (agreementid !== undefined)
            url_ += "agreementid=" + encodeURIComponent("" + agreementid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAgreementWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAgreement(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAgreement(xhr: any): Agreement {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Agreement = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Agreement.fromJS(resultData200) : new Agreement();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postAgreement(model?: Agreement) {
        return new Promise<Agreement>((resolve, reject) => {
            this.postAgreementWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postAgreementWithCallbacks(model: Agreement, onSuccess?: (result: Agreement) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Agreement/PostAgreement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostAgreementWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostAgreement(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostAgreement(xhr: any): Agreement {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Agreement = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Agreement.fromJS(resultData200) : new Agreement();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putAgreement(id?: number, model?: Agreement) {
        return new Promise<Agreement>((resolve, reject) => {
            this.putAgreementWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putAgreementWithCallbacks(id: number, model: Agreement, onSuccess?: (result: Agreement) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Agreement/PutAgreement?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutAgreementWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutAgreement(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutAgreement(xhr: any): Agreement {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Agreement = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Agreement.fromJS(resultData200) : new Agreement();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @agreementid (optional) 
     * @return Success
     */
    deleteAgreement(agreementid?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteAgreementWithCallbacks(agreementid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteAgreementWithCallbacks(agreementid: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Agreement/DeleteAgreement?";
        if (agreementid !== undefined)
            url_ += "agreementid=" + encodeURIComponent("" + agreementid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteAgreementWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteAgreement(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteAgreement(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IAgreementTemplateClient {
    /**
     * @return Success
     */
    getAllAgreementTemplates(): Promise<AgreementTemplate[]>;
    /**
     * @personid (optional) 
     * @return Success
     */
    getCustomerSpecificOrOpenAgreementTemplates(personid?: number): Promise<AgreementTemplate[]>;
    /**
     * @agreementtemplateid (optional) 
     * @return Success
     */
    getAgreementTemplate(agreementtemplateid?: number): Promise<AgreementTemplate>;
    /**
     * @model (optional) 
     * @return Success
     */
    postAgreementTemplate(model?: AgreementTemplate): Promise<AgreementTemplate>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putAgreementTemplate(id?: number, model?: AgreementTemplate): Promise<AgreementTemplate>;
    /**
     * @agreementid (optional) 
     * @return Success
     */
    deleteAgreementTemplate(agreementid?: number): Promise<void>;
}

export class AgreementTemplateClient extends base.CoreApiBaseClient implements IAgreementTemplateClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllAgreementTemplates() {
        return new Promise<AgreementTemplate[]>((resolve, reject) => {
            this.getAllAgreementTemplatesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllAgreementTemplatesWithCallbacks(onSuccess?: (result: AgreementTemplate[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AgreementTemplate/GetAllAgreementTemplates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllAgreementTemplatesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllAgreementTemplatesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllAgreementTemplatesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllAgreementTemplates(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllAgreementTemplates(xhr: any): AgreementTemplate[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AgreementTemplate[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AgreementTemplate.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    getCustomerSpecificOrOpenAgreementTemplates(personid?: number) {
        return new Promise<AgreementTemplate[]>((resolve, reject) => {
            this.getCustomerSpecificOrOpenAgreementTemplatesWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getCustomerSpecificOrOpenAgreementTemplatesWithCallbacks(personid: number, onSuccess?: (result: AgreementTemplate[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AgreementTemplate/GetCustomerSpecificOrOpenAgreementTemplates?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetCustomerSpecificOrOpenAgreementTemplatesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetCustomerSpecificOrOpenAgreementTemplatesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetCustomerSpecificOrOpenAgreementTemplatesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetCustomerSpecificOrOpenAgreementTemplates(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetCustomerSpecificOrOpenAgreementTemplates(xhr: any): AgreementTemplate[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AgreementTemplate[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AgreementTemplate.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @agreementtemplateid (optional) 
     * @return Success
     */
    getAgreementTemplate(agreementtemplateid?: number) {
        return new Promise<AgreementTemplate>((resolve, reject) => {
            this.getAgreementTemplateWithCallbacks(agreementtemplateid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAgreementTemplateWithCallbacks(agreementtemplateid: number, onSuccess?: (result: AgreementTemplate) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AgreementTemplate/GetAgreementTemplate?";
        if (agreementtemplateid !== undefined)
            url_ += "agreementtemplateid=" + encodeURIComponent("" + agreementtemplateid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAgreementTemplateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAgreementTemplate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAgreementTemplate(xhr: any): AgreementTemplate {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AgreementTemplate = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AgreementTemplate.fromJS(resultData200) : new AgreementTemplate();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postAgreementTemplate(model?: AgreementTemplate) {
        return new Promise<AgreementTemplate>((resolve, reject) => {
            this.postAgreementTemplateWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postAgreementTemplateWithCallbacks(model: AgreementTemplate, onSuccess?: (result: AgreementTemplate) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AgreementTemplate/PostAgreementTemplate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostAgreementTemplateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostAgreementTemplate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostAgreementTemplate(xhr: any): AgreementTemplate {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AgreementTemplate = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AgreementTemplate.fromJS(resultData200) : new AgreementTemplate();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putAgreementTemplate(id?: number, model?: AgreementTemplate) {
        return new Promise<AgreementTemplate>((resolve, reject) => {
            this.putAgreementTemplateWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putAgreementTemplateWithCallbacks(id: number, model: AgreementTemplate, onSuccess?: (result: AgreementTemplate) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AgreementTemplate/PutAgreementTemplate?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutAgreementTemplateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutAgreementTemplate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutAgreementTemplate(xhr: any): AgreementTemplate {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AgreementTemplate = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AgreementTemplate.fromJS(resultData200) : new AgreementTemplate();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @agreementid (optional) 
     * @return Success
     */
    deleteAgreementTemplate(agreementid?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteAgreementTemplateWithCallbacks(agreementid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteAgreementTemplateWithCallbacks(agreementid: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AgreementTemplate/DeleteAgreementTemplate?";
        if (agreementid !== undefined)
            url_ += "agreementid=" + encodeURIComponent("" + agreementid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteAgreementTemplateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteAgreementTemplate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteAgreementTemplate(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IAppClient {
    /**
     * @appid (optional) 
     * @viewmodelname (optional) 
     * @return Success
     */
    getAppViews(appid?: number, viewmodelname?: string): Promise<ViewPage[]>;
    /**
     * @sourceappid (optional) 
     * @destinationappid (optional) 
     * @return Success
     */
    swapAppViews(sourceappid?: number, destinationappid?: number): Promise<void>;
}

export class AppClient extends base.CoreApiBaseClient implements IAppClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @appid (optional) 
     * @viewmodelname (optional) 
     * @return Success
     */
    getAppViews(appid?: number, viewmodelname?: string) {
        return new Promise<ViewPage[]>((resolve, reject) => {
            this.getAppViewsWithCallbacks(appid, viewmodelname, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAppViewsWithCallbacks(appid: number, viewmodelname: string, onSuccess?: (result: ViewPage[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/App/GetAppViews?";
        if (appid !== undefined)
            url_ += "appid=" + encodeURIComponent("" + appid) + "&";
        if (viewmodelname !== undefined)
            url_ += "viewmodelname=" + encodeURIComponent("" + viewmodelname) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAppViewsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAppViewsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAppViewsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAppViews(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAppViews(xhr: any): ViewPage[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ViewPage[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ViewPage.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @sourceappid (optional) 
     * @destinationappid (optional) 
     * @return Success
     */
    swapAppViews(sourceappid?: number, destinationappid?: number) {
        return new Promise<void>((resolve, reject) => {
            this.swapAppViewsWithCallbacks(sourceappid, destinationappid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private swapAppViewsWithCallbacks(sourceappid: number, destinationappid: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/App/SwapAppViews?";
        if (sourceappid !== undefined)
            url_ += "sourceappid=" + encodeURIComponent("" + sourceappid) + "&";
        if (destinationappid !== undefined)
            url_ += "destinationappid=" + encodeURIComponent("" + destinationappid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSwapAppViewsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSwapAppViewsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSwapAppViewsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSwapAppViews(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSwapAppViews(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IAreaOfExpertiseClient {
    /**
     * @return Success
     */
    getAll(): Promise<AreaOfExpertise[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: AreaOfExpertise): Promise<AreaOfExpertise>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: AreaOfExpertise): Promise<AreaOfExpertise>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteAreaOfExpertise(id?: number): Promise<void>;
}

export class AreaOfExpertiseClient extends base.CoreApiBaseClient implements IAreaOfExpertiseClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<AreaOfExpertise[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: AreaOfExpertise[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AreaOfExpertise/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): AreaOfExpertise[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AreaOfExpertise[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AreaOfExpertise.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: AreaOfExpertise) {
        return new Promise<AreaOfExpertise>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: AreaOfExpertise, onSuccess?: (result: AreaOfExpertise) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AreaOfExpertise/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): AreaOfExpertise {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AreaOfExpertise = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AreaOfExpertise.fromJS(resultData200) : new AreaOfExpertise();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: AreaOfExpertise) {
        return new Promise<AreaOfExpertise>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: AreaOfExpertise, onSuccess?: (result: AreaOfExpertise) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AreaOfExpertise/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): AreaOfExpertise {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AreaOfExpertise = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AreaOfExpertise.fromJS(resultData200) : new AreaOfExpertise();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteAreaOfExpertise(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteAreaOfExpertiseWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteAreaOfExpertiseWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AreaOfExpertise/DeleteAreaOfExpertise?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteAreaOfExpertiseWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteAreaOfExpertiseWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteAreaOfExpertiseWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteAreaOfExpertise(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteAreaOfExpertise(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IAvailableForWorkClient {
    /**
     * @personid (optional) 
     * @return Success
     */
    getAvailableWeeks(personid?: string): Promise<WeekBaseModel[]>;
    /**
     * @personid (optional) 
     * @return Success
     */
    getAllAvailableDays(personid?: string): Promise<AvailableForWork[]>;
    /**
     * @yearnr (optional) 
     * @weeknr (optional) 
     * @areaofexpertise (optional) 
     * @return Success
     */
    getAvailableConsultantsForWeek(yearnr?: number, weeknr?: number, areaofexpertise?: string): Promise<AvailableWorker[]>;
    /**
     * @personid (optional) 
     * @model (optional) 
     * @return Success
     */
    putAllAvailableDays(personid?: string, model?: AvailableForWork[]): Promise<AvailableForWork[]>;
}

export class AvailableForWorkClient extends base.CoreApiBaseClient implements IAvailableForWorkClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    getAvailableWeeks(personid?: string) {
        return new Promise<WeekBaseModel[]>((resolve, reject) => {
            this.getAvailableWeeksWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAvailableWeeksWithCallbacks(personid: string, onSuccess?: (result: WeekBaseModel[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AvailableForWork/GetAvailableWeeks?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAvailableWeeksWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAvailableWeeksWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAvailableWeeksWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAvailableWeeks(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAvailableWeeks(xhr: any): WeekBaseModel[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WeekBaseModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WeekBaseModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    getAllAvailableDays(personid?: string) {
        return new Promise<AvailableForWork[]>((resolve, reject) => {
            this.getAllAvailableDaysWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllAvailableDaysWithCallbacks(personid: string, onSuccess?: (result: AvailableForWork[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AvailableForWork/GetAllAvailableDays?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllAvailableDaysWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllAvailableDaysWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllAvailableDaysWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllAvailableDays(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllAvailableDays(xhr: any): AvailableForWork[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AvailableForWork[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AvailableForWork.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @yearnr (optional) 
     * @weeknr (optional) 
     * @areaofexpertise (optional) 
     * @return Success
     */
    getAvailableConsultantsForWeek(yearnr?: number, weeknr?: number, areaofexpertise?: string) {
        return new Promise<AvailableWorker[]>((resolve, reject) => {
            this.getAvailableConsultantsForWeekWithCallbacks(yearnr, weeknr, areaofexpertise, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAvailableConsultantsForWeekWithCallbacks(yearnr: number, weeknr: number, areaofexpertise: string, onSuccess?: (result: AvailableWorker[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AvailableForWork/GetAvailableConsultantsForWeek?";
        if (yearnr !== undefined)
            url_ += "yearnr=" + encodeURIComponent("" + yearnr) + "&";
        if (weeknr !== undefined)
            url_ += "weeknr=" + encodeURIComponent("" + weeknr) + "&";
        if (areaofexpertise !== undefined)
            url_ += "areaofexpertise=" + encodeURIComponent("" + areaofexpertise) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAvailableConsultantsForWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAvailableConsultantsForWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAvailableConsultantsForWeekWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAvailableConsultantsForWeek(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAvailableConsultantsForWeek(xhr: any): AvailableWorker[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AvailableWorker[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AvailableWorker.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @model (optional) 
     * @return Success
     */
    putAllAvailableDays(personid?: string, model?: AvailableForWork[]) {
        return new Promise<AvailableForWork[]>((resolve, reject) => {
            this.putAllAvailableDaysWithCallbacks(personid, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putAllAvailableDaysWithCallbacks(personid: string, model: AvailableForWork[], onSuccess?: (result: AvailableForWork[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/AvailableForWork/PutAllAvailableDays?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (model) {
            for (let item of model)
                contentData_.push(item.toJSON());
        }
        const content_ = JSON.stringify(model ? contentData_ : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutAllAvailableDaysWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutAllAvailableDaysWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutAllAvailableDaysWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutAllAvailableDays(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutAllAvailableDays(xhr: any): AvailableForWork[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AvailableForWork[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AvailableForWork.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IBankIdClient {
    /**
     * @callBackUrl (optional) 
     * @userNonVisibleData (optional) 
     * @userVisibleData (optional) 
     * @socialSecurityNo (optional) 
     * @return Success
     */
    sign(callBackUrl?: string, userNonVisibleData?: string, userVisibleData?: string, socialSecurityNo?: string): Promise<BankIdLoginResponse>;
    /**
     * @callBackUrl (optional) 
     * @socialSecurityNo (optional) 
     * @return Success
     */
    authentication(callBackUrl?: string, socialSecurityNo?: string): Promise<BankIdLoginResponse>;
    /**
     * @sessionId (optional) 
     * @return Success
     */
    getProfileResult(sessionId?: string): Promise<BankIdProfileResult>;
}

export class BankIdClient extends base.CoreApiBaseClient implements IBankIdClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @callBackUrl (optional) 
     * @userNonVisibleData (optional) 
     * @userVisibleData (optional) 
     * @socialSecurityNo (optional) 
     * @return Success
     */
    sign(callBackUrl?: string, userNonVisibleData?: string, userVisibleData?: string, socialSecurityNo?: string) {
        return new Promise<BankIdLoginResponse>((resolve, reject) => {
            this.signWithCallbacks(callBackUrl, userNonVisibleData, userVisibleData, socialSecurityNo, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private signWithCallbacks(callBackUrl: string, userNonVisibleData: string, userVisibleData: string, socialSecurityNo: string, onSuccess?: (result: BankIdLoginResponse) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/BankId/Sign?";
        if (callBackUrl !== undefined)
            url_ += "CallBackUrl=" + encodeURIComponent("" + callBackUrl) + "&";
        if (userNonVisibleData !== undefined)
            url_ += "UserNonVisibleData=" + encodeURIComponent("" + userNonVisibleData) + "&";
        if (userVisibleData !== undefined)
            url_ += "UserVisibleData=" + encodeURIComponent("" + userVisibleData) + "&";
        if (socialSecurityNo !== undefined)
            url_ += "SocialSecurityNo=" + encodeURIComponent("" + socialSecurityNo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSignWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSignWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSignWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSign(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSign(xhr: any): BankIdLoginResponse {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BankIdLoginResponse = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BankIdLoginResponse.fromJS(resultData200) : new BankIdLoginResponse();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @callBackUrl (optional) 
     * @socialSecurityNo (optional) 
     * @return Success
     */
    authentication(callBackUrl?: string, socialSecurityNo?: string) {
        return new Promise<BankIdLoginResponse>((resolve, reject) => {
            this.authenticationWithCallbacks(callBackUrl, socialSecurityNo, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private authenticationWithCallbacks(callBackUrl: string, socialSecurityNo: string, onSuccess?: (result: BankIdLoginResponse) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/BankId/Authentication?";
        if (callBackUrl !== undefined)
            url_ += "CallBackUrl=" + encodeURIComponent("" + callBackUrl) + "&";
        if (socialSecurityNo !== undefined)
            url_ += "SocialSecurityNo=" + encodeURIComponent("" + socialSecurityNo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAuthenticationWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAuthenticationWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAuthenticationWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAuthentication(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAuthentication(xhr: any): BankIdLoginResponse {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BankIdLoginResponse = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BankIdLoginResponse.fromJS(resultData200) : new BankIdLoginResponse();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @sessionId (optional) 
     * @return Success
     */
    getProfileResult(sessionId?: string) {
        return new Promise<BankIdProfileResult>((resolve, reject) => {
            this.getProfileResultWithCallbacks(sessionId, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getProfileResultWithCallbacks(sessionId: string, onSuccess?: (result: BankIdProfileResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/BankId/GetProfileResult?";
        if (sessionId !== undefined)
            url_ += "sessionId=" + encodeURIComponent("" + sessionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetProfileResultWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetProfileResultWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetProfileResultWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetProfileResult(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetProfileResult(xhr: any): BankIdProfileResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BankIdProfileResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BankIdProfileResult.fromJS(resultData200) : new BankIdProfileResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IBusinessUnitClient {
    /**
     * @return Success
     */
    getAll(): Promise<BusinessUnit[]>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: BusinessUnit): Promise<BusinessUnit>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<BusinessUnit>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: BusinessUnit): Promise<BusinessUnit>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class BusinessUnitClient extends base.CoreApiBaseClient implements IBusinessUnitClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<BusinessUnit[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: BusinessUnit[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/BusinessUnit/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): BusinessUnit[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BusinessUnit[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(BusinessUnit.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: BusinessUnit) {
        return new Promise<BusinessUnit>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: BusinessUnit, onSuccess?: (result: BusinessUnit) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/BusinessUnit/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): BusinessUnit {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BusinessUnit = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BusinessUnit.fromJS(resultData200) : new BusinessUnit();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<BusinessUnit>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: BusinessUnit) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/BusinessUnit/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): BusinessUnit {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BusinessUnit = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BusinessUnit.fromJS(resultData200) : new BusinessUnit();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: BusinessUnit) {
        return new Promise<BusinessUnit>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: BusinessUnit, onSuccess?: (result: BusinessUnit) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/BusinessUnit/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): BusinessUnit {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BusinessUnit = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BusinessUnit.fromJS(resultData200) : new BusinessUnit();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/BusinessUnit/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface ICategoryClient {
    /**
     * @return Success
     */
    all(): Promise<Category[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    details(id?: number): Promise<Category>;
}

export class CategoryClient extends base.CoreApiBaseClient implements ICategoryClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    all() {
        return new Promise<Category[]>((resolve, reject) => {
            this.allWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private allWithCallbacks(onSuccess?: (result: Category[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Category/All";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAll(xhr: any): Category[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Category[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Category.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    details(id?: number) {
        return new Promise<Category>((resolve, reject) => {
            this.detailsWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private detailsWithCallbacks(id: number, onSuccess?: (result: Category) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Category/Details?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDetails(xhr: any): Category {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Category = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Category.fromJS(resultData200) : new Category();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface ICloudFileClient {
    /**
     * @tagname (optional) 
     * @return Success
     */
    getAllForTag(tagname?: string): Promise<CloudFile[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: CloudFile): Promise<CloudFile>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: CloudFile): Promise<CloudFile>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class CloudFileClient extends base.CoreApiBaseClient implements ICloudFileClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @tagname (optional) 
     * @return Success
     */
    getAllForTag(tagname?: string) {
        return new Promise<CloudFile[]>((resolve, reject) => {
            this.getAllForTagWithCallbacks(tagname, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForTagWithCallbacks(tagname: string, onSuccess?: (result: CloudFile[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/CloudFile/GetAllForTag?";
        if (tagname !== undefined)
            url_ += "tagname=" + encodeURIComponent("" + tagname) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForTagWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForTagWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForTagWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForTag(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForTag(xhr: any): CloudFile[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CloudFile[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CloudFile.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: CloudFile) {
        return new Promise<CloudFile>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: CloudFile, onSuccess?: (result: CloudFile) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/CloudFile/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): CloudFile {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CloudFile = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CloudFile.fromJS(resultData200) : new CloudFile();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: CloudFile) {
        return new Promise<CloudFile>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: CloudFile, onSuccess?: (result: CloudFile) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/CloudFile/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): CloudFile {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CloudFile = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CloudFile.fromJS(resultData200) : new CloudFile();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/CloudFile/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface ICommentClient {
    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @maxitemcount (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getLastComments(itemid?: string, itemtype?: string, maxitemcount?: number, requestcontinuationtoken?: string): Promise<ContinuationResultOfIEnumerableOfComment>;
    /**
     * @searchobject (optional) 
     * @return Success
     */
    findCommentsForItem(searchobject?: ItemObject): Promise<Comment[]>;
    /**
     * @comment (optional) 
     * @return Success
     */
    post(comment?: Comment): Promise<Comment>;
    /**
     * @id (optional) 
     * @comment (optional) 
     * @return Success
     */
    put(id?: string, comment?: Comment): Promise<Comment>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class CommentClient extends base.CoreApiBaseClient implements ICommentClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @maxitemcount (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getLastComments(itemid?: string, itemtype?: string, maxitemcount?: number, requestcontinuationtoken?: string) {
        return new Promise<ContinuationResultOfIEnumerableOfComment>((resolve, reject) => {
            this.getLastCommentsWithCallbacks(itemid, itemtype, maxitemcount, requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getLastCommentsWithCallbacks(itemid: string, itemtype: string, maxitemcount: number, requestcontinuationtoken: string, onSuccess?: (result: ContinuationResultOfIEnumerableOfComment) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Comment/GetLastComments?";
        if (itemid !== undefined)
            url_ += "itemid=" + encodeURIComponent("" + itemid) + "&";
        if (itemtype !== undefined)
            url_ += "itemtype=" + encodeURIComponent("" + itemtype) + "&";
        if (maxitemcount !== undefined)
            url_ += "maxitemcount=" + encodeURIComponent("" + maxitemcount) + "&";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetLastCommentsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetLastCommentsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetLastCommentsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetLastComments(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetLastComments(xhr: any): ContinuationResultOfIEnumerableOfComment {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContinuationResultOfIEnumerableOfComment = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ContinuationResultOfIEnumerableOfComment.fromJS(resultData200) : new ContinuationResultOfIEnumerableOfComment();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @searchobject (optional) 
     * @return Success
     */
    findCommentsForItem(searchobject?: ItemObject) {
        return new Promise<Comment[]>((resolve, reject) => {
            this.findCommentsForItemWithCallbacks(searchobject, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private findCommentsForItemWithCallbacks(searchobject: ItemObject, onSuccess?: (result: Comment[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Comment/FindCommentsForItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchobject ? searchobject.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processFindCommentsForItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindCommentsForItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFindCommentsForItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFindCommentsForItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFindCommentsForItem(xhr: any): Comment[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Comment[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Comment.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @comment (optional) 
     * @return Success
     */
    post(comment?: Comment) {
        return new Promise<Comment>((resolve, reject) => {
            this.postWithCallbacks(comment, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(comment: Comment, onSuccess?: (result: Comment) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Comment/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(comment ? comment.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): Comment {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Comment = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Comment.fromJS(resultData200) : new Comment();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @comment (optional) 
     * @return Success
     */
    put(id?: string, comment?: Comment) {
        return new Promise<Comment>((resolve, reject) => {
            this.putWithCallbacks(id, comment, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, comment: Comment, onSuccess?: (result: Comment) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Comment/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(comment ? comment.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): Comment {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Comment = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Comment.fromJS(resultData200) : new Comment();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Comment/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface ICommunicationClient {
    /**
     * @model (optional) 
     * @return Success
     */
    postSendEmailSimple(model?: SendEmailModelSimple): Promise<SendMessageResult>;
    /**
     * @model (optional) 
     * @return Success
     */
    postSendSmsSimple(model?: SendSmsModelSimple): Promise<SendMessageResult>;
    /**
     * @model (optional) 
     * @return Success
     */
    postSendEmail(model?: SendEmailModel): Promise<void>;
    /**
     * @model (optional) 
     * @return Success
     */
    postSendSms(model?: SendSmsModel): Promise<void>;
    /**
     * @personid (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getPersonalSentMessages(personid?: string, skip?: number, take?: number): Promise<SendListItem[]>;
    /**
     * @sendlistid (optional) 
     * @return Success
     */
    getSentMessages(sendlistid?: string): Promise<SendListItem[]>;
    /**
     * @transporttype (optional) 
     * @return Success
     */
    getCommonAddresses(transporttype?: string): Promise<CommonAddress[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    postCommonAddress(model?: CommonAddress): Promise<void>;
    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getSendDescriptions(from?: Date, to?: Date): Promise<SendList[]>;
    /**
     * @sendlistid (optional) 
     * @return Success
     */
    getSendDescription(sendlistid?: string): Promise<SendList>;
    /**
     * @sendlistid (optional) 
     * @return Success
     */
    getSendDescriptionDetails(sendlistid?: string): Promise<SendListDetails>;
    /**
     * @searchstr (optional) 
     * @return Success
     */
    getEmailAddresses(searchstr?: string): Promise<EmailAddress[]>;
}

export class CommunicationClient extends base.CoreApiBaseClient implements ICommunicationClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postSendEmailSimple(model?: SendEmailModelSimple) {
        return new Promise<SendMessageResult>((resolve, reject) => {
            this.postSendEmailSimpleWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSendEmailSimpleWithCallbacks(model: SendEmailModelSimple, onSuccess?: (result: SendMessageResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/PostSendEmailSimple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSendEmailSimpleWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSendEmailSimpleWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSendEmailSimpleWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSendEmailSimple(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSendEmailSimple(xhr: any): SendMessageResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendMessageResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendMessageResult.fromJS(resultData200) : new SendMessageResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postSendSmsSimple(model?: SendSmsModelSimple) {
        return new Promise<SendMessageResult>((resolve, reject) => {
            this.postSendSmsSimpleWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSendSmsSimpleWithCallbacks(model: SendSmsModelSimple, onSuccess?: (result: SendMessageResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/PostSendSmsSimple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSendSmsSimpleWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSendSmsSimpleWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSendSmsSimpleWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSendSmsSimple(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSendSmsSimple(xhr: any): SendMessageResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendMessageResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendMessageResult.fromJS(resultData200) : new SendMessageResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postSendEmail(model?: SendEmailModel) {
        return new Promise<void>((resolve, reject) => {
            this.postSendEmailWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSendEmailWithCallbacks(model: SendEmailModel, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/PostSendEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSendEmailWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSendEmailWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSendEmailWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSendEmail(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSendEmail(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postSendSms(model?: SendSmsModel) {
        return new Promise<void>((resolve, reject) => {
            this.postSendSmsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSendSmsWithCallbacks(model: SendSmsModel, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/PostSendSms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSendSmsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSendSmsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSendSmsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSendSms(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSendSms(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @personid (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getPersonalSentMessages(personid?: string, skip?: number, take?: number) {
        return new Promise<SendListItem[]>((resolve, reject) => {
            this.getPersonalSentMessagesWithCallbacks(personid, skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPersonalSentMessagesWithCallbacks(personid: string, skip: number, take: number, onSuccess?: (result: SendListItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/GetPersonalSentMessages?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPersonalSentMessagesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPersonalSentMessagesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPersonalSentMessagesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPersonalSentMessages(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPersonalSentMessages(xhr: any): SendListItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendListItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SendListItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @sendlistid (optional) 
     * @return Success
     */
    getSentMessages(sendlistid?: string) {
        return new Promise<SendListItem[]>((resolve, reject) => {
            this.getSentMessagesWithCallbacks(sendlistid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSentMessagesWithCallbacks(sendlistid: string, onSuccess?: (result: SendListItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/GetSentMessages?";
        if (sendlistid !== undefined)
            url_ += "sendlistid=" + encodeURIComponent("" + sendlistid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSentMessagesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSentMessagesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSentMessagesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSentMessages(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSentMessages(xhr: any): SendListItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendListItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SendListItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @transporttype (optional) 
     * @return Success
     */
    getCommonAddresses(transporttype?: string) {
        return new Promise<CommonAddress[]>((resolve, reject) => {
            this.getCommonAddressesWithCallbacks(transporttype, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getCommonAddressesWithCallbacks(transporttype: string, onSuccess?: (result: CommonAddress[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/GetCommonAddresses?";
        if (transporttype !== undefined)
            url_ += "transporttype=" + encodeURIComponent("" + transporttype) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetCommonAddressesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetCommonAddressesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetCommonAddressesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetCommonAddresses(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetCommonAddresses(xhr: any): CommonAddress[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CommonAddress[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CommonAddress.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postCommonAddress(model?: CommonAddress) {
        return new Promise<void>((resolve, reject) => {
            this.postCommonAddressWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postCommonAddressWithCallbacks(model: CommonAddress, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/PostCommonAddress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostCommonAddressWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostCommonAddressWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostCommonAddressWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostCommonAddress(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostCommonAddress(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getSendDescriptions(from?: Date, to?: Date) {
        return new Promise<SendList[]>((resolve, reject) => {
            this.getSendDescriptionsWithCallbacks(from, to, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSendDescriptionsWithCallbacks(from: Date, to: Date, onSuccess?: (result: SendList[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/GetSendDescriptions?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent("" + from.toJSON()) + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSendDescriptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSendDescriptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSendDescriptionsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSendDescriptions(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSendDescriptions(xhr: any): SendList[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendList[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SendList.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @sendlistid (optional) 
     * @return Success
     */
    getSendDescription(sendlistid?: string) {
        return new Promise<SendList>((resolve, reject) => {
            this.getSendDescriptionWithCallbacks(sendlistid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSendDescriptionWithCallbacks(sendlistid: string, onSuccess?: (result: SendList) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/GetSendDescription?";
        if (sendlistid !== undefined)
            url_ += "sendlistid=" + encodeURIComponent("" + sendlistid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSendDescriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSendDescriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSendDescriptionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSendDescription(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSendDescription(xhr: any): SendList {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendList.fromJS(resultData200) : new SendList();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @sendlistid (optional) 
     * @return Success
     */
    getSendDescriptionDetails(sendlistid?: string) {
        return new Promise<SendListDetails>((resolve, reject) => {
            this.getSendDescriptionDetailsWithCallbacks(sendlistid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSendDescriptionDetailsWithCallbacks(sendlistid: string, onSuccess?: (result: SendListDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/GetSendDescriptionDetails?";
        if (sendlistid !== undefined)
            url_ += "sendlistid=" + encodeURIComponent("" + sendlistid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSendDescriptionDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSendDescriptionDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSendDescriptionDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSendDescriptionDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSendDescriptionDetails(xhr: any): SendListDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendListDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendListDetails.fromJS(resultData200) : new SendListDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @searchstr (optional) 
     * @return Success
     */
    getEmailAddresses(searchstr?: string) {
        return new Promise<EmailAddress[]>((resolve, reject) => {
            this.getEmailAddressesWithCallbacks(searchstr, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getEmailAddressesWithCallbacks(searchstr: string, onSuccess?: (result: EmailAddress[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Communication/GetEmailAddresses?";
        if (searchstr !== undefined)
            url_ += "searchstr=" + encodeURIComponent("" + searchstr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetEmailAddressesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetEmailAddressesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetEmailAddressesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetEmailAddresses(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetEmailAddresses(xhr: any): EmailAddress[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: EmailAddress[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(EmailAddress.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IContactClient {
    /**
     * @model (optional) 
     * @return Success
     */
    postCustomer(model?: PersonDetails): Promise<PersonDetails>;
    /**
     * @model (optional) 
     * @return Success
     */
    postConsultant(model?: PersonDetails): Promise<PersonDetails>;
    /**
     * @model (optional) 
     * @return Success
     */
    postContact(model?: PersonDetails): Promise<PersonDetails>;
    /**
     * @return Success
     */
    getAllContactFilters(): Promise<ContactFilter[]>;
    /**
     * @typename (optional) 
     * @return Success
     */
    getAllContactFiltersForContactType(typename?: string): Promise<ContactFilter[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getContactFilter(id?: number): Promise<ContactFilter>;
}

export class ContactClient extends base.CoreApiBaseClient implements IContactClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postCustomer(model?: PersonDetails) {
        return new Promise<PersonDetails>((resolve, reject) => {
            this.postCustomerWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postCustomerWithCallbacks(model: PersonDetails, onSuccess?: (result: PersonDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Contact/PostCustomer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostCustomerWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostCustomerWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostCustomerWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostCustomer(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostCustomer(xhr: any): PersonDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonDetails.fromJS(resultData200) : new PersonDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postConsultant(model?: PersonDetails) {
        return new Promise<PersonDetails>((resolve, reject) => {
            this.postConsultantWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postConsultantWithCallbacks(model: PersonDetails, onSuccess?: (result: PersonDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Contact/PostConsultant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostConsultantWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostConsultantWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostConsultantWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostConsultant(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostConsultant(xhr: any): PersonDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonDetails.fromJS(resultData200) : new PersonDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postContact(model?: PersonDetails) {
        return new Promise<PersonDetails>((resolve, reject) => {
            this.postContactWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postContactWithCallbacks(model: PersonDetails, onSuccess?: (result: PersonDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Contact/PostContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostContactWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostContactWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostContactWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostContact(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostContact(xhr: any): PersonDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonDetails.fromJS(resultData200) : new PersonDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllContactFilters() {
        return new Promise<ContactFilter[]>((resolve, reject) => {
            this.getAllContactFiltersWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllContactFiltersWithCallbacks(onSuccess?: (result: ContactFilter[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Contact/GetAllContactFilters";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllContactFiltersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllContactFiltersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllContactFiltersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllContactFilters(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllContactFilters(xhr: any): ContactFilter[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContactFilter[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ContactFilter.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @typename (optional) 
     * @return Success
     */
    getAllContactFiltersForContactType(typename?: string) {
        return new Promise<ContactFilter[]>((resolve, reject) => {
            this.getAllContactFiltersForContactTypeWithCallbacks(typename, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllContactFiltersForContactTypeWithCallbacks(typename: string, onSuccess?: (result: ContactFilter[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Contact/GetAllContactFiltersForContactType?";
        if (typename !== undefined)
            url_ += "typename=" + encodeURIComponent("" + typename) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllContactFiltersForContactTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllContactFiltersForContactTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllContactFiltersForContactTypeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllContactFiltersForContactType(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllContactFiltersForContactType(xhr: any): ContactFilter[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContactFilter[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ContactFilter.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getContactFilter(id?: number) {
        return new Promise<ContactFilter>((resolve, reject) => {
            this.getContactFilterWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getContactFilterWithCallbacks(id: number, onSuccess?: (result: ContactFilter) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Contact/GetContactFilter?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetContactFilterWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetContactFilterWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetContactFilterWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetContactFilter(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetContactFilter(xhr: any): ContactFilter {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContactFilter = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ContactFilter.fromJS(resultData200) : new ContactFilter();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IContactFilterClient {
    /**
     * @return Success
     */
    getAll(): Promise<ContactFilter[]>;
    /**
     * @typename (optional) 
     * @return Success
     */
    getAllContactFiltersForContactType(typename?: string): Promise<ContactFilter[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ContactFilter): Promise<ContactFilter>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: ContactFilter): Promise<ContactFilter>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
}

export class ContactFilterClient extends base.CoreApiBaseClient implements IContactFilterClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<ContactFilter[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: ContactFilter[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ContactFilter/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): ContactFilter[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContactFilter[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ContactFilter.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @typename (optional) 
     * @return Success
     */
    getAllContactFiltersForContactType(typename?: string) {
        return new Promise<ContactFilter[]>((resolve, reject) => {
            this.getAllContactFiltersForContactTypeWithCallbacks(typename, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllContactFiltersForContactTypeWithCallbacks(typename: string, onSuccess?: (result: ContactFilter[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ContactFilter/GetAllContactFiltersForContactType?";
        if (typename !== undefined)
            url_ += "typename=" + encodeURIComponent("" + typename) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllContactFiltersForContactTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllContactFiltersForContactTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllContactFiltersForContactTypeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllContactFiltersForContactType(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllContactFiltersForContactType(xhr: any): ContactFilter[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContactFilter[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ContactFilter.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ContactFilter) {
        return new Promise<ContactFilter>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: ContactFilter, onSuccess?: (result: ContactFilter) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ContactFilter/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): ContactFilter {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContactFilter = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ContactFilter.fromJS(resultData200) : new ContactFilter();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: ContactFilter) {
        return new Promise<ContactFilter>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: ContactFilter, onSuccess?: (result: ContactFilter) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ContactFilter/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): ContactFilter {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContactFilter = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ContactFilter.fromJS(resultData200) : new ContactFilter();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ContactFilter/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IConversationClient {
    /**
     * @return Success
     */
    allMyMessageGroups(): Promise<MessageGroup[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getMessageGroup(id?: string): Promise<MessageGroup>;
    /**
     * @group (optional) 
     * @return Success
     */
    postMessageGroup(group?: MessageGroup): Promise<MessageGroup>;
    /**
     * @groupid (optional) 
     * @groupmember (optional) 
     * @return Success
     */
    putAddMessageGroupmember(groupid?: string, groupmember?: MessageGroupPerson): Promise<void>;
    /**
     * @groupid (optional) 
     * @groupmember (optional) 
     * @return Success
     */
    putRemoveMessageGroupMember(groupid?: string, groupmember?: MessageGroupPerson): Promise<void>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putMessageGroup(id?: string, model?: MessageGroup): Promise<MessageGroup>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteMessageGroup(id?: string): Promise<void>;
    /**
     * @id (optional) 
     * @continuationToken (optional) 
     * @return Success
     */
    getAllMessagesInGroup(id?: string, continuationToken?: string): Promise<PagedResultsOfMessage>;
    /**
     * @message (optional) 
     * @return Success
     */
    sendMessage(message?: Message): Promise<Message>;
    /**
     * @messageid (optional) 
     * @member (optional) 
     * @return Success
     */
    postRegisterMessageSeenBy(messageid?: string, member?: MessageGroupPerson): Promise<void>;
}

export class ConversationClient extends base.CoreApiBaseClient implements IConversationClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    allMyMessageGroups() {
        return new Promise<MessageGroup[]>((resolve, reject) => {
            this.allMyMessageGroupsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private allMyMessageGroupsWithCallbacks(onSuccess?: (result: MessageGroup[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Conversation/AllMyMessageGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAllMyMessageGroupsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAllMyMessageGroupsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAllMyMessageGroupsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAllMyMessageGroups(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAllMyMessageGroups(xhr: any): MessageGroup[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: MessageGroup[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(MessageGroup.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getMessageGroup(id?: string) {
        return new Promise<MessageGroup>((resolve, reject) => {
            this.getMessageGroupWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getMessageGroupWithCallbacks(id: string, onSuccess?: (result: MessageGroup) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Conversation/GetMessageGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetMessageGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetMessageGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetMessageGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetMessageGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetMessageGroup(xhr: any): MessageGroup {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: MessageGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? MessageGroup.fromJS(resultData200) : new MessageGroup();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @group (optional) 
     * @return Success
     */
    postMessageGroup(group?: MessageGroup) {
        return new Promise<MessageGroup>((resolve, reject) => {
            this.postMessageGroupWithCallbacks(group, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postMessageGroupWithCallbacks(group: MessageGroup, onSuccess?: (result: MessageGroup) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Conversation/PostMessageGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(group ? group.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostMessageGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostMessageGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostMessageGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostMessageGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostMessageGroup(xhr: any): MessageGroup {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: MessageGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? MessageGroup.fromJS(resultData200) : new MessageGroup();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @groupid (optional) 
     * @groupmember (optional) 
     * @return Success
     */
    putAddMessageGroupmember(groupid?: string, groupmember?: MessageGroupPerson) {
        return new Promise<void>((resolve, reject) => {
            this.putAddMessageGroupmemberWithCallbacks(groupid, groupmember, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putAddMessageGroupmemberWithCallbacks(groupid: string, groupmember: MessageGroupPerson, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Conversation/PutAddMessageGroupmember?";
        if (groupid !== undefined)
            url_ += "groupid=" + encodeURIComponent("" + groupid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(groupmember ? groupmember.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutAddMessageGroupmemberWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutAddMessageGroupmemberWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutAddMessageGroupmemberWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutAddMessageGroupmember(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutAddMessageGroupmember(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @groupid (optional) 
     * @groupmember (optional) 
     * @return Success
     */
    putRemoveMessageGroupMember(groupid?: string, groupmember?: MessageGroupPerson) {
        return new Promise<void>((resolve, reject) => {
            this.putRemoveMessageGroupMemberWithCallbacks(groupid, groupmember, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putRemoveMessageGroupMemberWithCallbacks(groupid: string, groupmember: MessageGroupPerson, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Conversation/PutRemoveMessageGroupMember?";
        if (groupid !== undefined)
            url_ += "groupid=" + encodeURIComponent("" + groupid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(groupmember ? groupmember.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutRemoveMessageGroupMemberWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutRemoveMessageGroupMemberWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutRemoveMessageGroupMemberWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutRemoveMessageGroupMember(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutRemoveMessageGroupMember(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putMessageGroup(id?: string, model?: MessageGroup) {
        return new Promise<MessageGroup>((resolve, reject) => {
            this.putMessageGroupWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putMessageGroupWithCallbacks(id: string, model: MessageGroup, onSuccess?: (result: MessageGroup) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Conversation/PutMessageGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutMessageGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutMessageGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutMessageGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutMessageGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutMessageGroup(xhr: any): MessageGroup {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: MessageGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? MessageGroup.fromJS(resultData200) : new MessageGroup();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteMessageGroup(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteMessageGroupWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteMessageGroupWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Conversation/DeleteMessageGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteMessageGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteMessageGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteMessageGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteMessageGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteMessageGroup(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @continuationToken (optional) 
     * @return Success
     */
    getAllMessagesInGroup(id?: string, continuationToken?: string) {
        return new Promise<PagedResultsOfMessage>((resolve, reject) => {
            this.getAllMessagesInGroupWithCallbacks(id, continuationToken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllMessagesInGroupWithCallbacks(id: string, continuationToken: string, onSuccess?: (result: PagedResultsOfMessage) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Conversation/GetAllMessagesInGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (continuationToken !== undefined)
            url_ += "continuationToken=" + encodeURIComponent("" + continuationToken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllMessagesInGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllMessagesInGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllMessagesInGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllMessagesInGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllMessagesInGroup(xhr: any): PagedResultsOfMessage {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PagedResultsOfMessage = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultsOfMessage.fromJS(resultData200) : new PagedResultsOfMessage();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @message (optional) 
     * @return Success
     */
    sendMessage(message?: Message) {
        return new Promise<Message>((resolve, reject) => {
            this.sendMessageWithCallbacks(message, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private sendMessageWithCallbacks(message: Message, onSuccess?: (result: Message) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Conversation/SendMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(message ? message.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSendMessageWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSendMessageWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSendMessageWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSendMessage(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSendMessage(xhr: any): Message {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Message = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Message.fromJS(resultData200) : new Message();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @messageid (optional) 
     * @member (optional) 
     * @return Success
     */
    postRegisterMessageSeenBy(messageid?: string, member?: MessageGroupPerson) {
        return new Promise<void>((resolve, reject) => {
            this.postRegisterMessageSeenByWithCallbacks(messageid, member, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postRegisterMessageSeenByWithCallbacks(messageid: string, member: MessageGroupPerson, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Conversation/PostRegisterMessageSeenBy?";
        if (messageid !== undefined)
            url_ += "messageid=" + encodeURIComponent("" + messageid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(member ? member.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostRegisterMessageSeenByWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostRegisterMessageSeenByWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostRegisterMessageSeenByWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostRegisterMessageSeenBy(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostRegisterMessageSeenBy(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface ICountyCouncilClient {
    /**
     * @return Success
     */
    getAll(): Promise<CountyCouncil[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: CountyCouncil): Promise<CountyCouncil>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: CountyCouncil): Promise<CountyCouncil>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
}

export class CountyCouncilClient extends base.CoreApiBaseClient implements ICountyCouncilClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<CountyCouncil[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: CountyCouncil[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/CountyCouncil/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): CountyCouncil[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CountyCouncil[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CountyCouncil.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: CountyCouncil) {
        return new Promise<CountyCouncil>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: CountyCouncil, onSuccess?: (result: CountyCouncil) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/CountyCouncil/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): CountyCouncil {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CountyCouncil = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CountyCouncil.fromJS(resultData200) : new CountyCouncil();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: CountyCouncil) {
        return new Promise<CountyCouncil>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: CountyCouncil, onSuccess?: (result: CountyCouncil) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/CountyCouncil/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): CountyCouncil {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CountyCouncil = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CountyCouncil.fromJS(resultData200) : new CountyCouncil();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/CountyCouncil/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IDeliveryClient {
    /**
     * @from (optional) 
     * @to (optional) 
     * @searchstr (optional) 
     * @receiptOrInvoiceCreated (optional) 
     * @orderStatusId (optional) 
     * @termsOfDeliveryId (optional) 
     * @termsOfPaymentId (optional) 
     * @shippingTagId (optional) 
     * @includeCanceledOrders (optional) 
     * @includeAdminOrders (optional) 
     * @return Success
     */
    getByDeliveryDate(from?: Date, to?: Date, searchstr?: string, receiptOrInvoiceCreated?: boolean, orderStatusId?: number, termsOfDeliveryId?: string, termsOfPaymentId?: string, shippingTagId?: string, includeCanceledOrders?: boolean, includeAdminOrders?: boolean): Promise<ListOrder[]>;
    /**
     * @from (optional) 
     * @to (optional) 
     * @searchstr (optional) 
     * @receiptOrInvoiceCreated (optional) 
     * @orderStatusId (optional) 
     * @termsOfDeliveryId (optional) 
     * @termsOfPaymentId (optional) 
     * @shippingTagId (optional) 
     * @includeCanceledOrders (optional) 
     * @includeAdminOrders (optional) 
     * @return Success
     */
    getByDeliveryDateMinimized(from?: Date, to?: Date, searchstr?: string, receiptOrInvoiceCreated?: boolean, orderStatusId?: number, termsOfDeliveryId?: string, termsOfPaymentId?: string, shippingTagId?: string, includeCanceledOrders?: boolean, includeAdminOrders?: boolean): Promise<MiniOptimizedOrder[]>;
    /**
     * @subscriptionid (optional) 
     * @return Success
     */
    getBySubscription(subscriptionid?: number): Promise<ListOrder[]>;
    /**
     * @buyorderid (optional) 
     * @return Success
     */
    getByBuyOrder(buyorderid?: string): Promise<ListOrder[]>;
    /**
     * @personid (optional) 
     * @deliverydatefrom (optional) 
     * @deliverydateto (optional) 
     * @return Success
     */
    getByPerson(personid?: number, deliverydatefrom?: Date, deliverydateto?: Date): Promise<ListOrder[]>;
    /**
     * @ids (optional) 
     * @return Success
     */
    getDeliveries(ids?: number[]): Promise<ListOrder[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getDetails(id?: number): Promise<OrderDetails>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Order): Promise<void>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Order): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    cancelDelivery(id?: number): Promise<Order>;
    /**
     * @id (optional) 
     * @return Success
     */
    unCancelDelivery(id?: number): Promise<Order>;
    /**
     * @fromdate (optional) 
     * @todate (optional) 
     * @return Success
     */
    getDeliveryDates(fromdate?: Date, todate?: Date): Promise<Date[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    addProductToExistingOrders(model?: AddProductToOrdersModel): Promise<ActionConfirmationResult[]>;
    /**
     * @ids (optional) 
     * @return Success
     */
    getDistinctProductsForDeliveries(ids?: number[]): Promise<OrderProduct[]>;
    /**
     * @return Success
     */
    getRecentShippingTags(): Promise<string[]>;
    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getShippingTagsInUse(from?: Date, to?: Date): Promise<string[]>;
    /**
     * @return Success
     */
    getDeliveryLockouts(): Promise<OrderLockout[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    postDeliveryLockout(model?: OrderLockout): Promise<void>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putDeliveryLockout(id?: number, model?: OrderLockout): Promise<void>;
    /**
     * @id (optional) 
     * @tagname (optional) 
     * @return Success
     */
    putTagDelivery(id?: number, tagname?: string): Promise<Order>;
    /**
     * @model (optional) 
     * @return Success
     */
    putShippingTagDeliveries(model?: ShippingTagOrdersModel[]): Promise<void>;
    /**
     * @orderid (optional) 
     * @return Success
     */
    unTagDelivery(orderid?: number): Promise<Order>;
    /**
     * @model (optional) 
     * @return Success
     */
    updateDeliveryDate(model?: UpdateDeliveryDateModel): Promise<void>;
    /**
     * @model (optional) 
     * @return Success
     */
    copyDeliveries(model?: UpdateDeliveryDateModel): Promise<void>;
    /**
     * @return Success
     */
    getDeliveryClosingRule(): Promise<OrderClosing>;
    /**
     * @orderClosingId (optional) 
     * @model (optional) 
     * @return Success
     */
    putDeliveryClosingRule(orderClosingId?: number, model?: OrderClosing): Promise<void>;
    /**
     * @return Success
     */
    getDeliveryHolidays(): Promise<OrderHoliday[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    postDeliveryHoliday(model?: OrderHoliday): Promise<void>;
    /**
     * @orderHolidayId (optional) 
     * @model (optional) 
     * @return Success
     */
    putDeliveryHoliday(orderHolidayId?: number, model?: OrderHoliday): Promise<void>;
    /**
     * @return Success
     */
    getAllDeliveryStatus(): Promise<OrderStatu[]>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putDeliveryStatus(id?: number, model?: OrderStatu): Promise<OrderStatu>;
    /**
     * @model (optional) 
     * @return Success
     */
    postDeliveryStatus(model?: OrderStatu): Promise<OrderStatu>;
    /**
     * @return Success
     */
    getAllTermsOfDelivery(): Promise<TermsOfDelivery[]>;
    /**
     * @orderstatusid (optional) 
     * @orderids (optional) 
     * @return Success
     */
    putDeliveryStatusForDeliveries(orderstatusid?: number, orderids?: number[]): Promise<void>;
    /**
     * @termsofdeliveryid (optional) 
     * @orderids (optional) 
     * @return Success
     */
    putTermsOfDeliveryForDeliveries(termsofdeliveryid?: string, orderids?: number[]): Promise<void>;
    /**
     * @orderid (optional) 
     * @return Success
     */
    getDetailsAboutWhoCreatedDelivery(orderid?: number): Promise<Person>;
    /**
     * @postno (optional) 
     * @return Success
     */
    getPossibleDeliveryDatesForPostNo(postno?: string): Promise<Date[]>;
}

export class DeliveryClient extends base.CoreApiBaseClient implements IDeliveryClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @from (optional) 
     * @to (optional) 
     * @searchstr (optional) 
     * @receiptOrInvoiceCreated (optional) 
     * @orderStatusId (optional) 
     * @termsOfDeliveryId (optional) 
     * @termsOfPaymentId (optional) 
     * @shippingTagId (optional) 
     * @includeCanceledOrders (optional) 
     * @includeAdminOrders (optional) 
     * @return Success
     */
    getByDeliveryDate(from?: Date, to?: Date, searchstr?: string, receiptOrInvoiceCreated?: boolean, orderStatusId?: number, termsOfDeliveryId?: string, termsOfPaymentId?: string, shippingTagId?: string, includeCanceledOrders?: boolean, includeAdminOrders?: boolean) {
        return new Promise<ListOrder[]>((resolve, reject) => {
            this.getByDeliveryDateWithCallbacks(from, to, searchstr, receiptOrInvoiceCreated, orderStatusId, termsOfDeliveryId, termsOfPaymentId, shippingTagId, includeCanceledOrders, includeAdminOrders, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getByDeliveryDateWithCallbacks(from: Date, to: Date, searchstr: string, receiptOrInvoiceCreated: boolean, orderStatusId: number, termsOfDeliveryId: string, termsOfPaymentId: string, shippingTagId: string, includeCanceledOrders: boolean, includeAdminOrders: boolean, onSuccess?: (result: ListOrder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetByDeliveryDate?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent("" + from.toJSON()) + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to.toJSON()) + "&";
        if (searchstr !== undefined)
            url_ += "searchstr=" + encodeURIComponent("" + searchstr) + "&";
        if (receiptOrInvoiceCreated !== undefined)
            url_ += "ReceiptOrInvoiceCreated=" + encodeURIComponent("" + receiptOrInvoiceCreated) + "&";
        if (orderStatusId !== undefined)
            url_ += "OrderStatusId=" + encodeURIComponent("" + orderStatusId) + "&";
        if (termsOfDeliveryId !== undefined)
            url_ += "TermsOfDeliveryId=" + encodeURIComponent("" + termsOfDeliveryId) + "&";
        if (termsOfPaymentId !== undefined)
            url_ += "TermsOfPaymentId=" + encodeURIComponent("" + termsOfPaymentId) + "&";
        if (shippingTagId !== undefined)
            url_ += "ShippingTagId=" + encodeURIComponent("" + shippingTagId) + "&";
        if (includeCanceledOrders !== undefined)
            url_ += "IncludeCanceledOrders=" + encodeURIComponent("" + includeCanceledOrders) + "&";
        if (includeAdminOrders !== undefined)
            url_ += "IncludeAdminOrders=" + encodeURIComponent("" + includeAdminOrders) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetByDeliveryDateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetByDeliveryDateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetByDeliveryDateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetByDeliveryDate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetByDeliveryDate(xhr: any): ListOrder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ListOrder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ListOrder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @from (optional) 
     * @to (optional) 
     * @searchstr (optional) 
     * @receiptOrInvoiceCreated (optional) 
     * @orderStatusId (optional) 
     * @termsOfDeliveryId (optional) 
     * @termsOfPaymentId (optional) 
     * @shippingTagId (optional) 
     * @includeCanceledOrders (optional) 
     * @includeAdminOrders (optional) 
     * @return Success
     */
    getByDeliveryDateMinimized(from?: Date, to?: Date, searchstr?: string, receiptOrInvoiceCreated?: boolean, orderStatusId?: number, termsOfDeliveryId?: string, termsOfPaymentId?: string, shippingTagId?: string, includeCanceledOrders?: boolean, includeAdminOrders?: boolean) {
        return new Promise<MiniOptimizedOrder[]>((resolve, reject) => {
            this.getByDeliveryDateMinimizedWithCallbacks(from, to, searchstr, receiptOrInvoiceCreated, orderStatusId, termsOfDeliveryId, termsOfPaymentId, shippingTagId, includeCanceledOrders, includeAdminOrders, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getByDeliveryDateMinimizedWithCallbacks(from: Date, to: Date, searchstr: string, receiptOrInvoiceCreated: boolean, orderStatusId: number, termsOfDeliveryId: string, termsOfPaymentId: string, shippingTagId: string, includeCanceledOrders: boolean, includeAdminOrders: boolean, onSuccess?: (result: MiniOptimizedOrder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetByDeliveryDateMinimized?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent("" + from.toJSON()) + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to.toJSON()) + "&";
        if (searchstr !== undefined)
            url_ += "searchstr=" + encodeURIComponent("" + searchstr) + "&";
        if (receiptOrInvoiceCreated !== undefined)
            url_ += "ReceiptOrInvoiceCreated=" + encodeURIComponent("" + receiptOrInvoiceCreated) + "&";
        if (orderStatusId !== undefined)
            url_ += "OrderStatusId=" + encodeURIComponent("" + orderStatusId) + "&";
        if (termsOfDeliveryId !== undefined)
            url_ += "TermsOfDeliveryId=" + encodeURIComponent("" + termsOfDeliveryId) + "&";
        if (termsOfPaymentId !== undefined)
            url_ += "TermsOfPaymentId=" + encodeURIComponent("" + termsOfPaymentId) + "&";
        if (shippingTagId !== undefined)
            url_ += "ShippingTagId=" + encodeURIComponent("" + shippingTagId) + "&";
        if (includeCanceledOrders !== undefined)
            url_ += "IncludeCanceledOrders=" + encodeURIComponent("" + includeCanceledOrders) + "&";
        if (includeAdminOrders !== undefined)
            url_ += "IncludeAdminOrders=" + encodeURIComponent("" + includeAdminOrders) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetByDeliveryDateMinimizedWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetByDeliveryDateMinimizedWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetByDeliveryDateMinimizedWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetByDeliveryDateMinimized(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetByDeliveryDateMinimized(xhr: any): MiniOptimizedOrder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: MiniOptimizedOrder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(MiniOptimizedOrder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @subscriptionid (optional) 
     * @return Success
     */
    getBySubscription(subscriptionid?: number) {
        return new Promise<ListOrder[]>((resolve, reject) => {
            this.getBySubscriptionWithCallbacks(subscriptionid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getBySubscriptionWithCallbacks(subscriptionid: number, onSuccess?: (result: ListOrder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetBySubscription?";
        if (subscriptionid !== undefined)
            url_ += "subscriptionid=" + encodeURIComponent("" + subscriptionid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetBySubscriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetBySubscriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetBySubscriptionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetBySubscription(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetBySubscription(xhr: any): ListOrder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ListOrder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ListOrder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @buyorderid (optional) 
     * @return Success
     */
    getByBuyOrder(buyorderid?: string) {
        return new Promise<ListOrder[]>((resolve, reject) => {
            this.getByBuyOrderWithCallbacks(buyorderid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getByBuyOrderWithCallbacks(buyorderid: string, onSuccess?: (result: ListOrder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetByBuyOrder?";
        if (buyorderid !== undefined)
            url_ += "buyorderid=" + encodeURIComponent("" + buyorderid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetByBuyOrderWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetByBuyOrderWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetByBuyOrderWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetByBuyOrder(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetByBuyOrder(xhr: any): ListOrder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ListOrder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ListOrder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @deliverydatefrom (optional) 
     * @deliverydateto (optional) 
     * @return Success
     */
    getByPerson(personid?: number, deliverydatefrom?: Date, deliverydateto?: Date) {
        return new Promise<ListOrder[]>((resolve, reject) => {
            this.getByPersonWithCallbacks(personid, deliverydatefrom, deliverydateto, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getByPersonWithCallbacks(personid: number, deliverydatefrom: Date, deliverydateto: Date, onSuccess?: (result: ListOrder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetByPerson?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (deliverydatefrom !== undefined)
            url_ += "deliverydatefrom=" + encodeURIComponent("" + deliverydatefrom.toJSON()) + "&";
        if (deliverydateto !== undefined)
            url_ += "deliverydateto=" + encodeURIComponent("" + deliverydateto.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetByPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetByPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetByPersonWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetByPerson(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetByPerson(xhr: any): ListOrder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ListOrder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ListOrder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @ids (optional) 
     * @return Success
     */
    getDeliveries(ids?: number[]) {
        return new Promise<ListOrder[]>((resolve, reject) => {
            this.getDeliveriesWithCallbacks(ids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDeliveriesWithCallbacks(ids: number[], onSuccess?: (result: ListOrder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetDeliveries?";
        if (ids !== undefined)
            ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDeliveriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDeliveries(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDeliveries(xhr: any): ListOrder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ListOrder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ListOrder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getDetails(id?: number) {
        return new Promise<OrderDetails>((resolve, reject) => {
            this.getDetailsWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDetailsWithCallbacks(id: number, onSuccess?: (result: OrderDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetDetails?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDetails(xhr: any): OrderDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OrderDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrderDetails.fromJS(resultData200) : new OrderDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Order) {
        return new Promise<void>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: Order, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Order) {
        return new Promise<void>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: Order, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    cancelDelivery(id?: number) {
        return new Promise<Order>((resolve, reject) => {
            this.cancelDeliveryWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private cancelDeliveryWithCallbacks(id: number, onSuccess?: (result: Order) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/CancelDelivery?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCancelDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCancelDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCancelDeliveryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCancelDelivery(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCancelDelivery(xhr: any): Order {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Order = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    unCancelDelivery(id?: number) {
        return new Promise<Order>((resolve, reject) => {
            this.unCancelDeliveryWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private unCancelDeliveryWithCallbacks(id: number, onSuccess?: (result: Order) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/UnCancelDelivery?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processUnCancelDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUnCancelDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processUnCancelDeliveryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUnCancelDelivery(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUnCancelDelivery(xhr: any): Order {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Order = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @fromdate (optional) 
     * @todate (optional) 
     * @return Success
     */
    getDeliveryDates(fromdate?: Date, todate?: Date) {
        return new Promise<Date[]>((resolve, reject) => {
            this.getDeliveryDatesWithCallbacks(fromdate, todate, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDeliveryDatesWithCallbacks(fromdate: Date, todate: Date, onSuccess?: (result: Date[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetDeliveryDates?";
        if (fromdate !== undefined)
            url_ += "fromdate=" + encodeURIComponent("" + fromdate.toJSON()) + "&";
        if (todate !== undefined)
            url_ += "todate=" + encodeURIComponent("" + todate.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDeliveryDatesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDeliveryDatesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDeliveryDatesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDeliveryDates(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDeliveryDates(xhr: any): Date[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Date[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(new Date(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    addProductToExistingOrders(model?: AddProductToOrdersModel) {
        return new Promise<ActionConfirmationResult[]>((resolve, reject) => {
            this.addProductToExistingOrdersWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private addProductToExistingOrdersWithCallbacks(model: AddProductToOrdersModel, onSuccess?: (result: ActionConfirmationResult[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/AddProductToExistingOrders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAddProductToExistingOrdersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddProductToExistingOrdersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAddProductToExistingOrdersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAddProductToExistingOrders(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAddProductToExistingOrders(xhr: any): ActionConfirmationResult[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ActionConfirmationResult[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ActionConfirmationResult.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @ids (optional) 
     * @return Success
     */
    getDistinctProductsForDeliveries(ids?: number[]) {
        return new Promise<OrderProduct[]>((resolve, reject) => {
            this.getDistinctProductsForDeliveriesWithCallbacks(ids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDistinctProductsForDeliveriesWithCallbacks(ids: number[], onSuccess?: (result: OrderProduct[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetDistinctProductsForDeliveries?";
        if (ids !== undefined)
            ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDistinctProductsForDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDistinctProductsForDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDistinctProductsForDeliveriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDistinctProductsForDeliveries(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDistinctProductsForDeliveries(xhr: any): OrderProduct[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OrderProduct[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(OrderProduct.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getRecentShippingTags() {
        return new Promise<string[]>((resolve, reject) => {
            this.getRecentShippingTagsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getRecentShippingTagsWithCallbacks(onSuccess?: (result: string[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetRecentShippingTags";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetRecentShippingTagsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetRecentShippingTagsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetRecentShippingTagsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetRecentShippingTags(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetRecentShippingTags(xhr: any): string[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getShippingTagsInUse(from?: Date, to?: Date) {
        return new Promise<string[]>((resolve, reject) => {
            this.getShippingTagsInUseWithCallbacks(from, to, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getShippingTagsInUseWithCallbacks(from: Date, to: Date, onSuccess?: (result: string[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetShippingTagsInUse?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent("" + from.toJSON()) + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetShippingTagsInUseWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetShippingTagsInUseWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetShippingTagsInUseWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetShippingTagsInUse(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetShippingTagsInUse(xhr: any): string[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getDeliveryLockouts() {
        return new Promise<OrderLockout[]>((resolve, reject) => {
            this.getDeliveryLockoutsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDeliveryLockoutsWithCallbacks(onSuccess?: (result: OrderLockout[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetDeliveryLockouts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDeliveryLockoutsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDeliveryLockoutsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDeliveryLockoutsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDeliveryLockouts(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDeliveryLockouts(xhr: any): OrderLockout[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OrderLockout[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(OrderLockout.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postDeliveryLockout(model?: OrderLockout) {
        return new Promise<void>((resolve, reject) => {
            this.postDeliveryLockoutWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postDeliveryLockoutWithCallbacks(model: OrderLockout, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PostDeliveryLockout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostDeliveryLockoutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostDeliveryLockoutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostDeliveryLockoutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostDeliveryLockout(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostDeliveryLockout(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putDeliveryLockout(id?: number, model?: OrderLockout) {
        return new Promise<void>((resolve, reject) => {
            this.putDeliveryLockoutWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putDeliveryLockoutWithCallbacks(id: number, model: OrderLockout, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PutDeliveryLockout?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutDeliveryLockoutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutDeliveryLockoutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutDeliveryLockoutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutDeliveryLockout(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutDeliveryLockout(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @tagname (optional) 
     * @return Success
     */
    putTagDelivery(id?: number, tagname?: string) {
        return new Promise<Order>((resolve, reject) => {
            this.putTagDeliveryWithCallbacks(id, tagname, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putTagDeliveryWithCallbacks(id: number, tagname: string, onSuccess?: (result: Order) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PutTagDelivery?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tagname);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutTagDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutTagDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutTagDeliveryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutTagDelivery(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutTagDelivery(xhr: any): Order {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Order = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    putShippingTagDeliveries(model?: ShippingTagOrdersModel[]) {
        return new Promise<void>((resolve, reject) => {
            this.putShippingTagDeliveriesWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putShippingTagDeliveriesWithCallbacks(model: ShippingTagOrdersModel[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PutShippingTagDeliveries";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (model) {
            for (let item of model)
                contentData_.push(item.toJSON());
        }
        const content_ = JSON.stringify(model ? contentData_ : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutShippingTagDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutShippingTagDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutShippingTagDeliveriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutShippingTagDeliveries(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutShippingTagDeliveries(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @orderid (optional) 
     * @return Success
     */
    unTagDelivery(orderid?: number) {
        return new Promise<Order>((resolve, reject) => {
            this.unTagDeliveryWithCallbacks(orderid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private unTagDeliveryWithCallbacks(orderid: number, onSuccess?: (result: Order) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/UnTagDelivery?";
        if (orderid !== undefined)
            url_ += "orderid=" + encodeURIComponent("" + orderid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processUnTagDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUnTagDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processUnTagDeliveryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUnTagDelivery(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUnTagDelivery(xhr: any): Order {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Order = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Order.fromJS(resultData200) : new Order();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    updateDeliveryDate(model?: UpdateDeliveryDateModel) {
        return new Promise<void>((resolve, reject) => {
            this.updateDeliveryDateWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private updateDeliveryDateWithCallbacks(model: UpdateDeliveryDateModel, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/UpdateDeliveryDate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processUpdateDeliveryDateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUpdateDeliveryDateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processUpdateDeliveryDateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUpdateDeliveryDate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUpdateDeliveryDate(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    copyDeliveries(model?: UpdateDeliveryDateModel) {
        return new Promise<void>((resolve, reject) => {
            this.copyDeliveriesWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private copyDeliveriesWithCallbacks(model: UpdateDeliveryDateModel, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/CopyDeliveries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCopyDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCopyDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCopyDeliveriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCopyDeliveries(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCopyDeliveries(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getDeliveryClosingRule() {
        return new Promise<OrderClosing>((resolve, reject) => {
            this.getDeliveryClosingRuleWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDeliveryClosingRuleWithCallbacks(onSuccess?: (result: OrderClosing) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetDeliveryClosingRule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDeliveryClosingRuleWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDeliveryClosingRuleWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDeliveryClosingRuleWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDeliveryClosingRule(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDeliveryClosingRule(xhr: any): OrderClosing {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OrderClosing = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrderClosing.fromJS(resultData200) : new OrderClosing();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @orderClosingId (optional) 
     * @model (optional) 
     * @return Success
     */
    putDeliveryClosingRule(orderClosingId?: number, model?: OrderClosing) {
        return new Promise<void>((resolve, reject) => {
            this.putDeliveryClosingRuleWithCallbacks(orderClosingId, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putDeliveryClosingRuleWithCallbacks(orderClosingId: number, model: OrderClosing, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PutDeliveryClosingRule?";
        if (orderClosingId !== undefined)
            url_ += "OrderClosingId=" + encodeURIComponent("" + orderClosingId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutDeliveryClosingRuleWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutDeliveryClosingRuleWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutDeliveryClosingRuleWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutDeliveryClosingRule(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutDeliveryClosingRule(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getDeliveryHolidays() {
        return new Promise<OrderHoliday[]>((resolve, reject) => {
            this.getDeliveryHolidaysWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDeliveryHolidaysWithCallbacks(onSuccess?: (result: OrderHoliday[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetDeliveryHolidays";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDeliveryHolidaysWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDeliveryHolidaysWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDeliveryHolidaysWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDeliveryHolidays(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDeliveryHolidays(xhr: any): OrderHoliday[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OrderHoliday[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(OrderHoliday.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postDeliveryHoliday(model?: OrderHoliday) {
        return new Promise<void>((resolve, reject) => {
            this.postDeliveryHolidayWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postDeliveryHolidayWithCallbacks(model: OrderHoliday, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PostDeliveryHoliday";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostDeliveryHolidayWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostDeliveryHolidayWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostDeliveryHolidayWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostDeliveryHoliday(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostDeliveryHoliday(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @orderHolidayId (optional) 
     * @model (optional) 
     * @return Success
     */
    putDeliveryHoliday(orderHolidayId?: number, model?: OrderHoliday) {
        return new Promise<void>((resolve, reject) => {
            this.putDeliveryHolidayWithCallbacks(orderHolidayId, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putDeliveryHolidayWithCallbacks(orderHolidayId: number, model: OrderHoliday, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PutDeliveryHoliday?";
        if (orderHolidayId !== undefined)
            url_ += "OrderHolidayId=" + encodeURIComponent("" + orderHolidayId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutDeliveryHolidayWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutDeliveryHolidayWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutDeliveryHolidayWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutDeliveryHoliday(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutDeliveryHoliday(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getAllDeliveryStatus() {
        return new Promise<OrderStatu[]>((resolve, reject) => {
            this.getAllDeliveryStatusWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllDeliveryStatusWithCallbacks(onSuccess?: (result: OrderStatu[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetAllDeliveryStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllDeliveryStatusWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllDeliveryStatusWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllDeliveryStatusWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllDeliveryStatus(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllDeliveryStatus(xhr: any): OrderStatu[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OrderStatu[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(OrderStatu.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putDeliveryStatus(id?: number, model?: OrderStatu) {
        return new Promise<OrderStatu>((resolve, reject) => {
            this.putDeliveryStatusWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putDeliveryStatusWithCallbacks(id: number, model: OrderStatu, onSuccess?: (result: OrderStatu) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PutDeliveryStatus?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutDeliveryStatusWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutDeliveryStatusWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutDeliveryStatusWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutDeliveryStatus(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutDeliveryStatus(xhr: any): OrderStatu {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OrderStatu = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrderStatu.fromJS(resultData200) : new OrderStatu();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postDeliveryStatus(model?: OrderStatu) {
        return new Promise<OrderStatu>((resolve, reject) => {
            this.postDeliveryStatusWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postDeliveryStatusWithCallbacks(model: OrderStatu, onSuccess?: (result: OrderStatu) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PostDeliveryStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostDeliveryStatusWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostDeliveryStatusWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostDeliveryStatusWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostDeliveryStatus(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostDeliveryStatus(xhr: any): OrderStatu {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OrderStatu = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrderStatu.fromJS(resultData200) : new OrderStatu();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllTermsOfDelivery() {
        return new Promise<TermsOfDelivery[]>((resolve, reject) => {
            this.getAllTermsOfDeliveryWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllTermsOfDeliveryWithCallbacks(onSuccess?: (result: TermsOfDelivery[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetAllTermsOfDelivery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllTermsOfDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllTermsOfDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllTermsOfDeliveryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllTermsOfDelivery(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllTermsOfDelivery(xhr: any): TermsOfDelivery[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfDelivery[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TermsOfDelivery.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @orderstatusid (optional) 
     * @orderids (optional) 
     * @return Success
     */
    putDeliveryStatusForDeliveries(orderstatusid?: number, orderids?: number[]) {
        return new Promise<void>((resolve, reject) => {
            this.putDeliveryStatusForDeliveriesWithCallbacks(orderstatusid, orderids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putDeliveryStatusForDeliveriesWithCallbacks(orderstatusid: number, orderids: number[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PutDeliveryStatusForDeliveries?";
        if (orderstatusid !== undefined)
            url_ += "orderstatusid=" + encodeURIComponent("" + orderstatusid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(orderids);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutDeliveryStatusForDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutDeliveryStatusForDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutDeliveryStatusForDeliveriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutDeliveryStatusForDeliveries(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutDeliveryStatusForDeliveries(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @termsofdeliveryid (optional) 
     * @orderids (optional) 
     * @return Success
     */
    putTermsOfDeliveryForDeliveries(termsofdeliveryid?: string, orderids?: number[]) {
        return new Promise<void>((resolve, reject) => {
            this.putTermsOfDeliveryForDeliveriesWithCallbacks(termsofdeliveryid, orderids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putTermsOfDeliveryForDeliveriesWithCallbacks(termsofdeliveryid: string, orderids: number[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/PutTermsOfDeliveryForDeliveries?";
        if (termsofdeliveryid !== undefined)
            url_ += "termsofdeliveryid=" + encodeURIComponent("" + termsofdeliveryid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(orderids);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutTermsOfDeliveryForDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutTermsOfDeliveryForDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutTermsOfDeliveryForDeliveriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutTermsOfDeliveryForDeliveries(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutTermsOfDeliveryForDeliveries(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @orderid (optional) 
     * @return Success
     */
    getDetailsAboutWhoCreatedDelivery(orderid?: number) {
        return new Promise<Person>((resolve, reject) => {
            this.getDetailsAboutWhoCreatedDeliveryWithCallbacks(orderid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDetailsAboutWhoCreatedDeliveryWithCallbacks(orderid: number, onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetDetailsAboutWhoCreatedDelivery?";
        if (orderid !== undefined)
            url_ += "orderid=" + encodeURIComponent("" + orderid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDetailsAboutWhoCreatedDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDetailsAboutWhoCreatedDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDetailsAboutWhoCreatedDeliveryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDetailsAboutWhoCreatedDelivery(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDetailsAboutWhoCreatedDelivery(xhr: any): Person {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Person = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : new Person();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @postno (optional) 
     * @return Success
     */
    getPossibleDeliveryDatesForPostNo(postno?: string) {
        return new Promise<Date[]>((resolve, reject) => {
            this.getPossibleDeliveryDatesForPostNoWithCallbacks(postno, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPossibleDeliveryDatesForPostNoWithCallbacks(postno: string, onSuccess?: (result: Date[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Delivery/GetPossibleDeliveryDatesForPostNo?";
        if (postno !== undefined)
            url_ += "postno=" + encodeURIComponent("" + postno) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPossibleDeliveryDatesForPostNoWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPossibleDeliveryDatesForPostNoWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPossibleDeliveryDatesForPostNoWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPossibleDeliveryDatesForPostNo(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPossibleDeliveryDatesForPostNo(xhr: any): Date[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Date[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(new Date(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IEducationClient {
    /**
     * @personid (optional) 
     * @return Success
     */
    get(personid?: number): Promise<Education[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Education): Promise<Education>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Education): Promise<Education>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
}

export class EducationClient extends base.CoreApiBaseClient implements IEducationClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    get(personid?: number) {
        return new Promise<Education[]>((resolve, reject) => {
            this.getWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(personid: number, onSuccess?: (result: Education[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Education/Get?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Education[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Education[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Education.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Education) {
        return new Promise<Education>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: Education, onSuccess?: (result: Education) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Education/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): Education {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Education = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Education.fromJS(resultData200) : new Education();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Education) {
        return new Promise<Education>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: Education, onSuccess?: (result: Education) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Education/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): Education {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Education = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Education.fromJS(resultData200) : new Education();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Education/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IEmailClient {
    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getLatest(requestcontinuationtoken?: string): Promise<PagedResultsOfEmailStandard>;
    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getMyLatest(requestcontinuationtoken?: string): Promise<PagedResultsOfEmailStandard>;
    /**
     * @email (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getLatestForParticipatedEmail(email?: string, requestcontinuationtoken?: string): Promise<PagedResultsOfEmailStandard>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<EmailStandard>;
    /**
     * @model (optional) 
     * @return Success
     */
    postSend(model?: EmailStandard): Promise<ActionConfirmationResult>;
}

export class EmailClient extends base.CoreApiBaseClient implements IEmailClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getLatest(requestcontinuationtoken?: string) {
        return new Promise<PagedResultsOfEmailStandard>((resolve, reject) => {
            this.getLatestWithCallbacks(requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getLatestWithCallbacks(requestcontinuationtoken: string, onSuccess?: (result: PagedResultsOfEmailStandard) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Email/GetLatest?";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetLatestWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetLatestWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetLatestWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetLatest(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetLatest(xhr: any): PagedResultsOfEmailStandard {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PagedResultsOfEmailStandard = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultsOfEmailStandard.fromJS(resultData200) : new PagedResultsOfEmailStandard();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getMyLatest(requestcontinuationtoken?: string) {
        return new Promise<PagedResultsOfEmailStandard>((resolve, reject) => {
            this.getMyLatestWithCallbacks(requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getMyLatestWithCallbacks(requestcontinuationtoken: string, onSuccess?: (result: PagedResultsOfEmailStandard) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Email/GetMyLatest?";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetMyLatestWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetMyLatestWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetMyLatestWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetMyLatest(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetMyLatest(xhr: any): PagedResultsOfEmailStandard {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PagedResultsOfEmailStandard = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultsOfEmailStandard.fromJS(resultData200) : new PagedResultsOfEmailStandard();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @email (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getLatestForParticipatedEmail(email?: string, requestcontinuationtoken?: string) {
        return new Promise<PagedResultsOfEmailStandard>((resolve, reject) => {
            this.getLatestForParticipatedEmailWithCallbacks(email, requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getLatestForParticipatedEmailWithCallbacks(email: string, requestcontinuationtoken: string, onSuccess?: (result: PagedResultsOfEmailStandard) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Email/GetLatestForParticipatedEmail?";
        if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetLatestForParticipatedEmailWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetLatestForParticipatedEmailWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetLatestForParticipatedEmailWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetLatestForParticipatedEmail(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetLatestForParticipatedEmail(xhr: any): PagedResultsOfEmailStandard {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PagedResultsOfEmailStandard = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultsOfEmailStandard.fromJS(resultData200) : new PagedResultsOfEmailStandard();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<EmailStandard>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: EmailStandard) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Email/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): EmailStandard {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: EmailStandard = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EmailStandard.fromJS(resultData200) : new EmailStandard();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postSend(model?: EmailStandard) {
        return new Promise<ActionConfirmationResult>((resolve, reject) => {
            this.postSendWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSendWithCallbacks(model: EmailStandard, onSuccess?: (result: ActionConfirmationResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Email/PostSend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSendWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSendWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSendWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSend(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSend(xhr: any): ActionConfirmationResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ActionConfirmationResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ActionConfirmationResult.fromJS(resultData200) : new ActionConfirmationResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IExperienceClient {
    /**
     * @personid (optional) 
     * @return Success
     */
    get(personid?: number): Promise<Experience[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Experience): Promise<Experience>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Experience): Promise<Experience>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
}

export class ExperienceClient extends base.CoreApiBaseClient implements IExperienceClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    get(personid?: number) {
        return new Promise<Experience[]>((resolve, reject) => {
            this.getWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(personid: number, onSuccess?: (result: Experience[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Experience/Get?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Experience[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Experience[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Experience.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Experience) {
        return new Promise<Experience>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: Experience, onSuccess?: (result: Experience) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Experience/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): Experience {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Experience = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Experience.fromJS(resultData200) : new Experience();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Experience) {
        return new Promise<Experience>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: Experience, onSuccess?: (result: Experience) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Experience/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): Experience {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Experience = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Experience.fromJS(resultData200) : new Experience();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Experience/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IExportClient {
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllCategories(skip?: number, take?: number): Promise<Category[]>;
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllProducts(skip?: number, take?: number): Promise<Product[]>;
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllProductSubscriptionsOptions(skip?: number, take?: number): Promise<ProductSubscriptionOption[]>;
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllSubscriptions(skip?: number, take?: number): Promise<Subscription[]>;
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllDeliveries(skip?: number, take?: number): Promise<ListOrder[]>;
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllWorkItems(skip?: number, take?: number): Promise<WorkItem[]>;
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllContacts(skip?: number, take?: number): Promise<Person[]>;
}

export class ExportClient extends base.CoreApiBaseClient implements IExportClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllCategories(skip?: number, take?: number) {
        return new Promise<Category[]>((resolve, reject) => {
            this.getAllCategoriesWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllCategoriesWithCallbacks(skip: number, take: number, onSuccess?: (result: Category[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Export/GetAllCategories?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllCategoriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllCategoriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllCategoriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllCategories(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllCategories(xhr: any): Category[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Category[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Category.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllProducts(skip?: number, take?: number) {
        return new Promise<Product[]>((resolve, reject) => {
            this.getAllProductsWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllProductsWithCallbacks(skip: number, take: number, onSuccess?: (result: Product[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Export/GetAllProducts?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllProductsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllProductsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllProductsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllProducts(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllProducts(xhr: any): Product[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Product[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Product.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllProductSubscriptionsOptions(skip?: number, take?: number) {
        return new Promise<ProductSubscriptionOption[]>((resolve, reject) => {
            this.getAllProductSubscriptionsOptionsWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllProductSubscriptionsOptionsWithCallbacks(skip: number, take: number, onSuccess?: (result: ProductSubscriptionOption[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Export/GetAllProductSubscriptionsOptions?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllProductSubscriptionsOptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllProductSubscriptionsOptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllProductSubscriptionsOptionsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllProductSubscriptionsOptions(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllProductSubscriptionsOptions(xhr: any): ProductSubscriptionOption[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ProductSubscriptionOption[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ProductSubscriptionOption.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllSubscriptions(skip?: number, take?: number) {
        return new Promise<Subscription[]>((resolve, reject) => {
            this.getAllSubscriptionsWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllSubscriptionsWithCallbacks(skip: number, take: number, onSuccess?: (result: Subscription[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Export/GetAllSubscriptions?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllSubscriptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllSubscriptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllSubscriptionsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllSubscriptions(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllSubscriptions(xhr: any): Subscription[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Subscription[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Subscription.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllDeliveries(skip?: number, take?: number) {
        return new Promise<ListOrder[]>((resolve, reject) => {
            this.getAllDeliveriesWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllDeliveriesWithCallbacks(skip: number, take: number, onSuccess?: (result: ListOrder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Export/GetAllDeliveries?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllDeliveriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllDeliveries(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllDeliveries(xhr: any): ListOrder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ListOrder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ListOrder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllWorkItems(skip?: number, take?: number) {
        return new Promise<WorkItem[]>((resolve, reject) => {
            this.getAllWorkItemsWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWorkItemsWithCallbacks(skip: number, take: number, onSuccess?: (result: WorkItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Export/GetAllWorkItems?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllWorkItems(xhr: any): WorkItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllContacts(skip?: number, take?: number) {
        return new Promise<Person[]>((resolve, reject) => {
            this.getAllContactsWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllContactsWithCallbacks(skip: number, take: number, onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Export/GetAllContacts?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllContactsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllContactsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllContactsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllContacts(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllContacts(xhr: any): Person[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Person[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IFileClient {
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PostFileModel): Promise<FileUrl>;
    /**
     * @adockacdnurl (optional) 
     * @return Success
     */
    getPrivateFileDataUri(adockacdnurl?: string): Promise<FileDataUriContent>;
    /**
     * @url (optional) 
     * @return Success
     */
    delete(url?: string): Promise<void>;
}

export class FileClient extends base.CoreApiBaseClient implements IFileClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PostFileModel) {
        return new Promise<FileUrl>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: PostFileModel, onSuccess?: (result: FileUrl) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/File/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): FileUrl {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: FileUrl = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileUrl.fromJS(resultData200) : new FileUrl();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @adockacdnurl (optional) 
     * @return Success
     */
    getPrivateFileDataUri(adockacdnurl?: string) {
        return new Promise<FileDataUriContent>((resolve, reject) => {
            this.getPrivateFileDataUriWithCallbacks(adockacdnurl, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPrivateFileDataUriWithCallbacks(adockacdnurl: string, onSuccess?: (result: FileDataUriContent) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/File/GetPrivateFileDataUri?";
        if (adockacdnurl !== undefined)
            url_ += "adockacdnurl=" + encodeURIComponent("" + adockacdnurl) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPrivateFileDataUriWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPrivateFileDataUriWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPrivateFileDataUriWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPrivateFileDataUri(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPrivateFileDataUri(xhr: any): FileDataUriContent {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: FileDataUriContent = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDataUriContent.fromJS(resultData200) : new FileDataUriContent();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @url (optional) 
     * @return Success
     */
    delete(url?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(url, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(url: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/File/Delete?";
        if (url !== undefined)
            url_ += "url=" + encodeURIComponent("" + url) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IGeocodeClient {
    /**
     * @street (optional) 
     * @postno (optional) 
     * @city (optional) 
     * @return Success
     */
    geocode(street?: string, postno?: string, city?: string): Promise<GeoCodeResult>;
}

export class GeocodeClient extends base.CoreApiBaseClient implements IGeocodeClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @street (optional) 
     * @postno (optional) 
     * @city (optional) 
     * @return Success
     */
    geocode(street?: string, postno?: string, city?: string) {
        return new Promise<GeoCodeResult>((resolve, reject) => {
            this.geocodeWithCallbacks(street, postno, city, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private geocodeWithCallbacks(street: string, postno: string, city: string, onSuccess?: (result: GeoCodeResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Geocode/Geocode?";
        if (street !== undefined)
            url_ += "street=" + encodeURIComponent("" + street) + "&";
        if (postno !== undefined)
            url_ += "postno=" + encodeURIComponent("" + postno) + "&";
        if (city !== undefined)
            url_ += "city=" + encodeURIComponent("" + city) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGeocodeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGeocodeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGeocodeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGeocode(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGeocode(xhr: any): GeoCodeResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: GeoCodeResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GeoCodeResult.fromJS(resultData200) : new GeoCodeResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IGuestBookClient {
    /**
     * @return Success
     */
    getGuestBooks(): Promise<AppGuestBook[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getGuestBook(id?: string): Promise<AppGuestBook>;
    /**
     * @appid (optional) 
     * @return Success
     */
    getGuestBookForApp(appid?: number): Promise<AppGuestBook>;
    /**
     * @model (optional) 
     * @return Success
     */
    postGuestBook(model?: AppGuestBook): Promise<AppGuestBook>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putGuestBook(id?: string, model?: AppGuestBook): Promise<AppGuestBook>;
    /**
     * @guestbookid (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getGuestBookPosts(guestbookid?: string, skip?: number, take?: number): Promise<AppGuestBookPost[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getGuestBookPost(id?: string): Promise<AppGuestBookPost>;
    /**
     * @model (optional) 
     * @return Success
     */
    postGuestBookPost(model?: AppGuestBookPost): Promise<AppGuestBookPost>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putGuestBookPost(id?: string, model?: AppGuestBookPost): Promise<AppGuestBookPost>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteGuestBookPost(id?: string): Promise<void>;
}

export class GuestBookClient extends base.CoreApiBaseClient implements IGuestBookClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getGuestBooks() {
        return new Promise<AppGuestBook[]>((resolve, reject) => {
            this.getGuestBooksWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getGuestBooksWithCallbacks(onSuccess?: (result: AppGuestBook[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/GuestBook/GetGuestBooks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetGuestBooksWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetGuestBooksWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetGuestBooksWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetGuestBooks(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetGuestBooks(xhr: any): AppGuestBook[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AppGuestBook[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AppGuestBook.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getGuestBook(id?: string) {
        return new Promise<AppGuestBook>((resolve, reject) => {
            this.getGuestBookWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getGuestBookWithCallbacks(id: string, onSuccess?: (result: AppGuestBook) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/GuestBook/GetGuestBook?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetGuestBookWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetGuestBookWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetGuestBookWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetGuestBook(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetGuestBook(xhr: any): AppGuestBook {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AppGuestBook = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppGuestBook.fromJS(resultData200) : new AppGuestBook();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @appid (optional) 
     * @return Success
     */
    getGuestBookForApp(appid?: number) {
        return new Promise<AppGuestBook>((resolve, reject) => {
            this.getGuestBookForAppWithCallbacks(appid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getGuestBookForAppWithCallbacks(appid: number, onSuccess?: (result: AppGuestBook) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/GuestBook/GetGuestBookForApp?";
        if (appid !== undefined)
            url_ += "appid=" + encodeURIComponent("" + appid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetGuestBookForAppWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetGuestBookForAppWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetGuestBookForAppWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetGuestBookForApp(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetGuestBookForApp(xhr: any): AppGuestBook {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AppGuestBook = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppGuestBook.fromJS(resultData200) : new AppGuestBook();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postGuestBook(model?: AppGuestBook) {
        return new Promise<AppGuestBook>((resolve, reject) => {
            this.postGuestBookWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postGuestBookWithCallbacks(model: AppGuestBook, onSuccess?: (result: AppGuestBook) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/GuestBook/PostGuestBook";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostGuestBookWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostGuestBookWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostGuestBookWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostGuestBook(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostGuestBook(xhr: any): AppGuestBook {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AppGuestBook = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppGuestBook.fromJS(resultData200) : new AppGuestBook();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putGuestBook(id?: string, model?: AppGuestBook) {
        return new Promise<AppGuestBook>((resolve, reject) => {
            this.putGuestBookWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putGuestBookWithCallbacks(id: string, model: AppGuestBook, onSuccess?: (result: AppGuestBook) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/GuestBook/PutGuestBook?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutGuestBookWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutGuestBookWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutGuestBookWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutGuestBook(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutGuestBook(xhr: any): AppGuestBook {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AppGuestBook = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppGuestBook.fromJS(resultData200) : new AppGuestBook();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @guestbookid (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getGuestBookPosts(guestbookid?: string, skip?: number, take?: number) {
        return new Promise<AppGuestBookPost[]>((resolve, reject) => {
            this.getGuestBookPostsWithCallbacks(guestbookid, skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getGuestBookPostsWithCallbacks(guestbookid: string, skip: number, take: number, onSuccess?: (result: AppGuestBookPost[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/GuestBook/GetGuestBookPosts?";
        if (guestbookid !== undefined)
            url_ += "guestbookid=" + encodeURIComponent("" + guestbookid) + "&";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetGuestBookPostsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetGuestBookPostsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetGuestBookPostsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetGuestBookPosts(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetGuestBookPosts(xhr: any): AppGuestBookPost[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AppGuestBookPost[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AppGuestBookPost.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getGuestBookPost(id?: string) {
        return new Promise<AppGuestBookPost>((resolve, reject) => {
            this.getGuestBookPostWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getGuestBookPostWithCallbacks(id: string, onSuccess?: (result: AppGuestBookPost) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/GuestBook/GetGuestBookPost?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetGuestBookPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetGuestBookPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetGuestBookPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetGuestBookPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetGuestBookPost(xhr: any): AppGuestBookPost {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AppGuestBookPost = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppGuestBookPost.fromJS(resultData200) : new AppGuestBookPost();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postGuestBookPost(model?: AppGuestBookPost) {
        return new Promise<AppGuestBookPost>((resolve, reject) => {
            this.postGuestBookPostWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postGuestBookPostWithCallbacks(model: AppGuestBookPost, onSuccess?: (result: AppGuestBookPost) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/GuestBook/PostGuestBookPost";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostGuestBookPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostGuestBookPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostGuestBookPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostGuestBookPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostGuestBookPost(xhr: any): AppGuestBookPost {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AppGuestBookPost = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppGuestBookPost.fromJS(resultData200) : new AppGuestBookPost();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putGuestBookPost(id?: string, model?: AppGuestBookPost) {
        return new Promise<AppGuestBookPost>((resolve, reject) => {
            this.putGuestBookPostWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putGuestBookPostWithCallbacks(id: string, model: AppGuestBookPost, onSuccess?: (result: AppGuestBookPost) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/GuestBook/PutGuestBookPost?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutGuestBookPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutGuestBookPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutGuestBookPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutGuestBookPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutGuestBookPost(xhr: any): AppGuestBookPost {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AppGuestBookPost = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppGuestBookPost.fromJS(resultData200) : new AppGuestBookPost();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteGuestBookPost(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteGuestBookPostWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteGuestBookPostWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/GuestBook/DeleteGuestBookPost?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteGuestBookPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteGuestBookPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteGuestBookPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteGuestBookPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteGuestBookPost(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IHistoryItemClient {
    /**
     * @path (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllForPath(path?: string, requestcontinuationtoken?: string): Promise<ContinuationResultOfIEnumerableOfHistoryItem>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: HistoryItem): Promise<HistoryItem>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: HistoryItem): Promise<HistoryItem>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class HistoryItemClient extends base.CoreApiBaseClient implements IHistoryItemClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @path (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllForPath(path?: string, requestcontinuationtoken?: string) {
        return new Promise<ContinuationResultOfIEnumerableOfHistoryItem>((resolve, reject) => {
            this.getAllForPathWithCallbacks(path, requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForPathWithCallbacks(path: string, requestcontinuationtoken: string, onSuccess?: (result: ContinuationResultOfIEnumerableOfHistoryItem) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/HistoryItem/GetAllForPath?";
        if (path !== undefined)
            url_ += "path=" + encodeURIComponent("" + path) + "&";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForPathWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForPathWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForPathWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForPath(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForPath(xhr: any): ContinuationResultOfIEnumerableOfHistoryItem {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContinuationResultOfIEnumerableOfHistoryItem = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ContinuationResultOfIEnumerableOfHistoryItem.fromJS(resultData200) : new ContinuationResultOfIEnumerableOfHistoryItem();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: HistoryItem) {
        return new Promise<HistoryItem>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: HistoryItem, onSuccess?: (result: HistoryItem) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/HistoryItem/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): HistoryItem {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: HistoryItem = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? HistoryItem.fromJS(resultData200) : new HistoryItem();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: HistoryItem) {
        return new Promise<HistoryItem>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: HistoryItem, onSuccess?: (result: HistoryItem) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/HistoryItem/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): HistoryItem {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: HistoryItem = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? HistoryItem.fromJS(resultData200) : new HistoryItem();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/HistoryItem/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IImportClient {
    /**
     * @settingsmodel (optional) 
     * @return Success
     */
    importOrUpdateCustomersFromFortnox(settingsmodel?: ImportFortnoxCustomersSettings): Promise<void>;
    /**
     * @comments (optional) 
     * @return Success
     */
    importMultipleContactComments(comments?: Comment[]): Promise<void>;
}

export class ImportClient extends base.CoreApiBaseClient implements IImportClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @settingsmodel (optional) 
     * @return Success
     */
    importOrUpdateCustomersFromFortnox(settingsmodel?: ImportFortnoxCustomersSettings) {
        return new Promise<void>((resolve, reject) => {
            this.importOrUpdateCustomersFromFortnoxWithCallbacks(settingsmodel, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private importOrUpdateCustomersFromFortnoxWithCallbacks(settingsmodel: ImportFortnoxCustomersSettings, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Import/ImportOrUpdateCustomersFromFortnox";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(settingsmodel ? settingsmodel.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processImportOrUpdateCustomersFromFortnoxWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processImportOrUpdateCustomersFromFortnoxWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processImportOrUpdateCustomersFromFortnoxWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processImportOrUpdateCustomersFromFortnox(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processImportOrUpdateCustomersFromFortnox(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @comments (optional) 
     * @return Success
     */
    importMultipleContactComments(comments?: Comment[]) {
        return new Promise<void>((resolve, reject) => {
            this.importMultipleContactCommentsWithCallbacks(comments, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private importMultipleContactCommentsWithCallbacks(comments: Comment[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Import/ImportMultipleContactComments";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (comments) {
            for (let item of comments)
                contentData_.push(item.toJSON());
        }
        const content_ = JSON.stringify(comments ? contentData_ : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processImportMultipleContactCommentsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processImportMultipleContactCommentsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processImportMultipleContactCommentsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processImportMultipleContactComments(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processImportMultipleContactComments(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IImportjobClient {
    /**
     * @return Success
     */
    getAll(): Promise<ImportJobAdvanced[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<ImportJobAdvanced>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ImportJobAdvanced): Promise<ImportJobAdvanced>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ImportJobAdvanced): Promise<ImportJobAdvanced>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class ImportjobClient extends base.CoreApiBaseClient implements IImportjobClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<ImportJobAdvanced[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: ImportJobAdvanced[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Importjob/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): ImportJobAdvanced[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ImportJobAdvanced[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ImportJobAdvanced.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<ImportJobAdvanced>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: ImportJobAdvanced) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Importjob/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): ImportJobAdvanced {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ImportJobAdvanced = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImportJobAdvanced.fromJS(resultData200) : new ImportJobAdvanced();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ImportJobAdvanced) {
        return new Promise<ImportJobAdvanced>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: ImportJobAdvanced, onSuccess?: (result: ImportJobAdvanced) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Importjob/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): ImportJobAdvanced {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ImportJobAdvanced = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImportJobAdvanced.fromJS(resultData200) : new ImportJobAdvanced();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ImportJobAdvanced) {
        return new Promise<ImportJobAdvanced>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: ImportJobAdvanced, onSuccess?: (result: ImportJobAdvanced) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Importjob/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): ImportJobAdvanced {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ImportJobAdvanced = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImportJobAdvanced.fromJS(resultData200) : new ImportJobAdvanced();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Importjob/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IImportJobContactMappingClient {
    /**
     * @id (optional) 
     * @return Success
     */
    getAllForImportJob(id?: string): Promise<ImportJobContactMapping[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<ImportJobContactMapping>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ImportJobContactMapping): Promise<ImportJobContactMapping>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ImportJobContactMapping): Promise<ImportJobContactMapping>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class ImportJobContactMappingClient extends base.CoreApiBaseClient implements IImportJobContactMappingClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAllForImportJob(id?: string) {
        return new Promise<ImportJobContactMapping[]>((resolve, reject) => {
            this.getAllForImportJobWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForImportJobWithCallbacks(id: string, onSuccess?: (result: ImportJobContactMapping[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ImportJobContactMapping/GetAllForImportJob?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForImportJobWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForImportJobWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForImportJobWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForImportJob(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForImportJob(xhr: any): ImportJobContactMapping[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ImportJobContactMapping[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ImportJobContactMapping.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<ImportJobContactMapping>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: ImportJobContactMapping) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ImportJobContactMapping/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): ImportJobContactMapping {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ImportJobContactMapping = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImportJobContactMapping.fromJS(resultData200) : new ImportJobContactMapping();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ImportJobContactMapping) {
        return new Promise<ImportJobContactMapping>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: ImportJobContactMapping, onSuccess?: (result: ImportJobContactMapping) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ImportJobContactMapping/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): ImportJobContactMapping {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ImportJobContactMapping = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImportJobContactMapping.fromJS(resultData200) : new ImportJobContactMapping();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ImportJobContactMapping) {
        return new Promise<ImportJobContactMapping>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: ImportJobContactMapping, onSuccess?: (result: ImportJobContactMapping) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ImportJobContactMapping/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): ImportJobContactMapping {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ImportJobContactMapping = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImportJobContactMapping.fromJS(resultData200) : new ImportJobContactMapping();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ImportJobContactMapping/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IItemListClient {
    /**
     * @return Success
     */
    getAll(): Promise<ItemList[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<ItemList>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ItemList): Promise<ItemList>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ItemList): Promise<ItemList>;
}

export class ItemListClient extends base.CoreApiBaseClient implements IItemListClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<ItemList[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: ItemList[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemList/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): ItemList[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemList[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ItemList.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemList/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<ItemList>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: ItemList) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemList/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): ItemList {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemList.fromJS(resultData200) : new ItemList();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ItemList) {
        return new Promise<ItemList>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: ItemList, onSuccess?: (result: ItemList) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemList/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): ItemList {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemList.fromJS(resultData200) : new ItemList();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ItemList) {
        return new Promise<ItemList>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: ItemList, onSuccess?: (result: ItemList) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemList/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): ItemList {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemList.fromJS(resultData200) : new ItemList();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IItemListPersonClient {
    /**
     * @id (optional) 
     * @return Success
     */
    getAllByItemListId(id?: string): Promise<ItemListPerson[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<ItemListPerson>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ItemListPerson): Promise<ItemListPerson>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ItemListPerson): Promise<ItemListPerson>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class ItemListPersonClient extends base.CoreApiBaseClient implements IItemListPersonClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAllByItemListId(id?: string) {
        return new Promise<ItemListPerson[]>((resolve, reject) => {
            this.getAllByItemListIdWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByItemListIdWithCallbacks(id: string, onSuccess?: (result: ItemListPerson[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemListPerson/GetAllByItemListId?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByItemListIdWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByItemListIdWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByItemListIdWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByItemListId(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByItemListId(xhr: any): ItemListPerson[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemListPerson[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ItemListPerson.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<ItemListPerson>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: ItemListPerson) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemListPerson/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): ItemListPerson {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemListPerson = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemListPerson.fromJS(resultData200) : new ItemListPerson();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ItemListPerson) {
        return new Promise<ItemListPerson>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: ItemListPerson, onSuccess?: (result: ItemListPerson) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemListPerson/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): ItemListPerson {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemListPerson = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemListPerson.fromJS(resultData200) : new ItemListPerson();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ItemListPerson) {
        return new Promise<ItemListPerson>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: ItemListPerson, onSuccess?: (result: ItemListPerson) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemListPerson/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): ItemListPerson {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemListPerson = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemListPerson.fromJS(resultData200) : new ItemListPerson();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemListPerson/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IItemsSelectionClient {
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<ItemsSelection>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ItemsSelection): Promise<ItemsSelection>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ItemsSelection): Promise<ItemsSelection>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class ItemsSelectionClient extends base.CoreApiBaseClient implements IItemsSelectionClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<ItemsSelection>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: ItemsSelection) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemsSelection/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): ItemsSelection {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemsSelection = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemsSelection.fromJS(resultData200) : new ItemsSelection();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ItemsSelection) {
        return new Promise<ItemsSelection>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: ItemsSelection, onSuccess?: (result: ItemsSelection) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemsSelection/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): ItemsSelection {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemsSelection = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemsSelection.fromJS(resultData200) : new ItemsSelection();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ItemsSelection) {
        return new Promise<ItemsSelection>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: ItemsSelection, onSuccess?: (result: ItemsSelection) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemsSelection/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): ItemsSelection {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemsSelection = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemsSelection.fromJS(resultData200) : new ItemsSelection();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ItemsSelection/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IItemtagClient {
    /**
     * @from (optional) 
     * @return Success
     */
    getLatest(from?: Date): Promise<ItemTag[]>;
    /**
     * @itemId (optional) 
     * @itemType (optional) 
     * @return Success
     */
    findItemTagsForItem(itemId?: string, itemType?: string): Promise<ItemTag[]>;
    /**
     * @type (optional) 
     * @return Success
     */
    getItemTagsForType(type?: string): Promise<ItemTag[]>;
    /**
     * @type (optional) 
     * @return Success
     */
    getUniqueItemTagNamesForType(type?: string): Promise<string[]>;
    /**
     * @itemtag (optional) 
     * @return Success
     */
    post(itemtag?: ItemTag): Promise<ItemTag>;
    /**
     * @id (optional) 
     * @itemtag (optional) 
     * @return Success
     */
    put(id?: string, itemtag?: ItemTag): Promise<ItemTag>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
    /**
     * @name (optional) 
     * @type (optional) 
     * @return Success
     */
    deleteTagName(name?: string, type?: string): Promise<void>;
}

export class ItemtagClient extends base.CoreApiBaseClient implements IItemtagClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @from (optional) 
     * @return Success
     */
    getLatest(from?: Date) {
        return new Promise<ItemTag[]>((resolve, reject) => {
            this.getLatestWithCallbacks(from, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getLatestWithCallbacks(from: Date, onSuccess?: (result: ItemTag[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Itemtag/GetLatest?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent("" + from.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetLatestWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetLatestWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetLatestWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetLatest(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetLatest(xhr: any): ItemTag[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemTag[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ItemTag.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @itemId (optional) 
     * @itemType (optional) 
     * @return Success
     */
    findItemTagsForItem(itemId?: string, itemType?: string) {
        return new Promise<ItemTag[]>((resolve, reject) => {
            this.findItemTagsForItemWithCallbacks(itemId, itemType, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private findItemTagsForItemWithCallbacks(itemId: string, itemType: string, onSuccess?: (result: ItemTag[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Itemtag/FindItemTagsForItem?";
        if (itemId !== undefined)
            url_ += "ItemId=" + encodeURIComponent("" + itemId) + "&";
        if (itemType !== undefined)
            url_ += "ItemType=" + encodeURIComponent("" + itemType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processFindItemTagsForItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindItemTagsForItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFindItemTagsForItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFindItemTagsForItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFindItemTagsForItem(xhr: any): ItemTag[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemTag[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ItemTag.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @type (optional) 
     * @return Success
     */
    getItemTagsForType(type?: string) {
        return new Promise<ItemTag[]>((resolve, reject) => {
            this.getItemTagsForTypeWithCallbacks(type, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getItemTagsForTypeWithCallbacks(type: string, onSuccess?: (result: ItemTag[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Itemtag/GetItemTagsForType?";
        if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetItemTagsForTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetItemTagsForTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetItemTagsForTypeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetItemTagsForType(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetItemTagsForType(xhr: any): ItemTag[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemTag[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ItemTag.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @type (optional) 
     * @return Success
     */
    getUniqueItemTagNamesForType(type?: string) {
        return new Promise<string[]>((resolve, reject) => {
            this.getUniqueItemTagNamesForTypeWithCallbacks(type, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getUniqueItemTagNamesForTypeWithCallbacks(type: string, onSuccess?: (result: string[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Itemtag/GetUniqueItemTagNamesForType?";
        if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetUniqueItemTagNamesForTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetUniqueItemTagNamesForTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetUniqueItemTagNamesForTypeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetUniqueItemTagNamesForType(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetUniqueItemTagNamesForType(xhr: any): string[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @itemtag (optional) 
     * @return Success
     */
    post(itemtag?: ItemTag) {
        return new Promise<ItemTag>((resolve, reject) => {
            this.postWithCallbacks(itemtag, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(itemtag: ItemTag, onSuccess?: (result: ItemTag) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Itemtag/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(itemtag ? itemtag.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): ItemTag {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemTag = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemTag.fromJS(resultData200) : new ItemTag();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @itemtag (optional) 
     * @return Success
     */
    put(id?: string, itemtag?: ItemTag) {
        return new Promise<ItemTag>((resolve, reject) => {
            this.putWithCallbacks(id, itemtag, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, itemtag: ItemTag, onSuccess?: (result: ItemTag) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Itemtag/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(itemtag ? itemtag.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): ItemTag {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ItemTag = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ItemTag.fromJS(resultData200) : new ItemTag();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Itemtag/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @name (optional) 
     * @type (optional) 
     * @return Success
     */
    deleteTagName(name?: string, type?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteTagNameWithCallbacks(name, type, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteTagNameWithCallbacks(name: string, type: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Itemtag/DeleteTagName?";
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteTagNameWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteTagNameWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteTagNameWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteTagName(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteTagName(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IKnowledgeOfSystemOptionClient {
    /**
     * @return Success
     */
    getAll(): Promise<KnowledgeOfSystemOption[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: KnowledgeOfSystemOption): Promise<KnowledgeOfSystemOption>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: KnowledgeOfSystemOption): Promise<KnowledgeOfSystemOption>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
}

export class KnowledgeOfSystemOptionClient extends base.CoreApiBaseClient implements IKnowledgeOfSystemOptionClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<KnowledgeOfSystemOption[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: KnowledgeOfSystemOption[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/KnowledgeOfSystemOption/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): KnowledgeOfSystemOption[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: KnowledgeOfSystemOption[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(KnowledgeOfSystemOption.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: KnowledgeOfSystemOption) {
        return new Promise<KnowledgeOfSystemOption>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: KnowledgeOfSystemOption, onSuccess?: (result: KnowledgeOfSystemOption) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/KnowledgeOfSystemOption/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): KnowledgeOfSystemOption {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: KnowledgeOfSystemOption = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? KnowledgeOfSystemOption.fromJS(resultData200) : new KnowledgeOfSystemOption();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: KnowledgeOfSystemOption) {
        return new Promise<KnowledgeOfSystemOption>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: KnowledgeOfSystemOption, onSuccess?: (result: KnowledgeOfSystemOption) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/KnowledgeOfSystemOption/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): KnowledgeOfSystemOption {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: KnowledgeOfSystemOption = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? KnowledgeOfSystemOption.fromJS(resultData200) : new KnowledgeOfSystemOption();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/KnowledgeOfSystemOption/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface ILegalClient {
    /**
     * @return Success
     */
    getAllTermsOfService(): Promise<TermsOfService[]>;
    /**
     * @return Success
     */
    getDefaultTermsOfService(): Promise<TermsOfService>;
    /**
     * @appid (optional) 
     * @return Success
     */
    getTermsOfServiceByApp(appid?: number): Promise<TermsOfService>;
    /**
     * @id (optional) 
     * @termsOfService (optional) 
     * @return Success
     */
    putTermsOfService(id?: string, termsOfService?: TermsOfService): Promise<TermsOfService>;
    /**
     * @termsOfService (optional) 
     * @return Success
     */
    postTermsOfService(termsOfService?: TermsOfService): Promise<TermsOfService>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteTermsOfService(id?: string): Promise<void>;
    /**
     * @return Success
     */
    getAllPrivacyPolicy(): Promise<PrivacyPolicy[]>;
    /**
     * @return Success
     */
    getDefaultPrivacyPolicy(): Promise<PrivacyPolicy>;
    /**
     * @appid (optional) 
     * @return Success
     */
    getPrivacyPolicyByApp(appid?: number): Promise<PrivacyPolicy>;
    /**
     * @id (optional) 
     * @privacyPolicy (optional) 
     * @return Success
     */
    putPrivacyPolicy(id?: string, privacyPolicy?: PrivacyPolicy): Promise<PrivacyPolicy>;
    /**
     * @privacyPolicy (optional) 
     * @return Success
     */
    postPrivacyPolicy(privacyPolicy?: PrivacyPolicy): Promise<PrivacyPolicy>;
    /**
     * @id (optional) 
     * @return Success
     */
    deletePrivacyPolicy(id?: string): Promise<void>;
    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllSendMessageForTermsAcceptance(requestcontinuationtoken?: string): Promise<TupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString>;
    /**
     * @model (optional) 
     * @return Success
     */
    postSendMessageForTermsAcceptance(model?: SendMessageForTermsAcceptance): Promise<SendMessageForTermsAcceptance>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putSendMessageForTermsAcceptance(id?: string, model?: SendMessageForTermsAcceptance): Promise<SendMessageForTermsAcceptance>;
    /**
     * @id (optional) 
     * @return Success
     */
    getSendMessageForTermsAcceptance(id?: string): Promise<SendMessageForTermsAcceptance>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteSendMessageForTermsAcceptance(id?: string): Promise<void>;
    /**
     * @model (optional) 
     * @return Success
     */
    postSendMessageForTermsAcceptanceReciever(model?: SendMessageForTermsAcceptancePerson): Promise<SendMessageForTermsAcceptancePerson>;
    /**
     * @sendMessageForTermsAcceptanceId (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllSendMessageForTermsAcceptanceRecievers(sendMessageForTermsAcceptanceId?: string, requestcontinuationtoken?: string): Promise<TupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString>;
}

export class LegalClient extends base.CoreApiBaseClient implements ILegalClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllTermsOfService() {
        return new Promise<TermsOfService[]>((resolve, reject) => {
            this.getAllTermsOfServiceWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllTermsOfServiceWithCallbacks(onSuccess?: (result: TermsOfService[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/GetAllTermsOfService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllTermsOfServiceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllTermsOfServiceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllTermsOfServiceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllTermsOfService(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllTermsOfService(xhr: any): TermsOfService[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfService[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TermsOfService.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getDefaultTermsOfService() {
        return new Promise<TermsOfService>((resolve, reject) => {
            this.getDefaultTermsOfServiceWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDefaultTermsOfServiceWithCallbacks(onSuccess?: (result: TermsOfService) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/GetDefaultTermsOfService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDefaultTermsOfServiceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDefaultTermsOfServiceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDefaultTermsOfServiceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDefaultTermsOfService(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDefaultTermsOfService(xhr: any): TermsOfService {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfService = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TermsOfService.fromJS(resultData200) : new TermsOfService();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @appid (optional) 
     * @return Success
     */
    getTermsOfServiceByApp(appid?: number) {
        return new Promise<TermsOfService>((resolve, reject) => {
            this.getTermsOfServiceByAppWithCallbacks(appid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTermsOfServiceByAppWithCallbacks(appid: number, onSuccess?: (result: TermsOfService) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/GetTermsOfServiceByApp?";
        if (appid !== undefined)
            url_ += "appid=" + encodeURIComponent("" + appid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTermsOfServiceByAppWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTermsOfServiceByAppWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTermsOfServiceByAppWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTermsOfServiceByApp(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTermsOfServiceByApp(xhr: any): TermsOfService {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfService = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TermsOfService.fromJS(resultData200) : new TermsOfService();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @termsOfService (optional) 
     * @return Success
     */
    putTermsOfService(id?: string, termsOfService?: TermsOfService) {
        return new Promise<TermsOfService>((resolve, reject) => {
            this.putTermsOfServiceWithCallbacks(id, termsOfService, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putTermsOfServiceWithCallbacks(id: string, termsOfService: TermsOfService, onSuccess?: (result: TermsOfService) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/PutTermsOfService?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(termsOfService ? termsOfService.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutTermsOfServiceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutTermsOfServiceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutTermsOfServiceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutTermsOfService(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutTermsOfService(xhr: any): TermsOfService {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfService = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TermsOfService.fromJS(resultData200) : new TermsOfService();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @termsOfService (optional) 
     * @return Success
     */
    postTermsOfService(termsOfService?: TermsOfService) {
        return new Promise<TermsOfService>((resolve, reject) => {
            this.postTermsOfServiceWithCallbacks(termsOfService, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postTermsOfServiceWithCallbacks(termsOfService: TermsOfService, onSuccess?: (result: TermsOfService) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/PostTermsOfService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(termsOfService ? termsOfService.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostTermsOfServiceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostTermsOfServiceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostTermsOfServiceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostTermsOfService(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostTermsOfService(xhr: any): TermsOfService {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfService = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TermsOfService.fromJS(resultData200) : new TermsOfService();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteTermsOfService(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteTermsOfServiceWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteTermsOfServiceWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/DeleteTermsOfService?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteTermsOfServiceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteTermsOfServiceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteTermsOfServiceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteTermsOfService(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteTermsOfService(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getAllPrivacyPolicy() {
        return new Promise<PrivacyPolicy[]>((resolve, reject) => {
            this.getAllPrivacyPolicyWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllPrivacyPolicyWithCallbacks(onSuccess?: (result: PrivacyPolicy[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/GetAllPrivacyPolicy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllPrivacyPolicyWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllPrivacyPolicyWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllPrivacyPolicyWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllPrivacyPolicy(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllPrivacyPolicy(xhr: any): PrivacyPolicy[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PrivacyPolicy[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PrivacyPolicy.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getDefaultPrivacyPolicy() {
        return new Promise<PrivacyPolicy>((resolve, reject) => {
            this.getDefaultPrivacyPolicyWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDefaultPrivacyPolicyWithCallbacks(onSuccess?: (result: PrivacyPolicy) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/GetDefaultPrivacyPolicy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDefaultPrivacyPolicyWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDefaultPrivacyPolicyWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDefaultPrivacyPolicyWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDefaultPrivacyPolicy(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDefaultPrivacyPolicy(xhr: any): PrivacyPolicy {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PrivacyPolicy = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PrivacyPolicy.fromJS(resultData200) : new PrivacyPolicy();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @appid (optional) 
     * @return Success
     */
    getPrivacyPolicyByApp(appid?: number) {
        return new Promise<PrivacyPolicy>((resolve, reject) => {
            this.getPrivacyPolicyByAppWithCallbacks(appid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPrivacyPolicyByAppWithCallbacks(appid: number, onSuccess?: (result: PrivacyPolicy) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/GetPrivacyPolicyByApp?";
        if (appid !== undefined)
            url_ += "appid=" + encodeURIComponent("" + appid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPrivacyPolicyByAppWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPrivacyPolicyByAppWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPrivacyPolicyByAppWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPrivacyPolicyByApp(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPrivacyPolicyByApp(xhr: any): PrivacyPolicy {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PrivacyPolicy = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PrivacyPolicy.fromJS(resultData200) : new PrivacyPolicy();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @privacyPolicy (optional) 
     * @return Success
     */
    putPrivacyPolicy(id?: string, privacyPolicy?: PrivacyPolicy) {
        return new Promise<PrivacyPolicy>((resolve, reject) => {
            this.putPrivacyPolicyWithCallbacks(id, privacyPolicy, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putPrivacyPolicyWithCallbacks(id: string, privacyPolicy: PrivacyPolicy, onSuccess?: (result: PrivacyPolicy) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/PutPrivacyPolicy?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(privacyPolicy ? privacyPolicy.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutPrivacyPolicyWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutPrivacyPolicyWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutPrivacyPolicyWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutPrivacyPolicy(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutPrivacyPolicy(xhr: any): PrivacyPolicy {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PrivacyPolicy = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PrivacyPolicy.fromJS(resultData200) : new PrivacyPolicy();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @privacyPolicy (optional) 
     * @return Success
     */
    postPrivacyPolicy(privacyPolicy?: PrivacyPolicy) {
        return new Promise<PrivacyPolicy>((resolve, reject) => {
            this.postPrivacyPolicyWithCallbacks(privacyPolicy, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postPrivacyPolicyWithCallbacks(privacyPolicy: PrivacyPolicy, onSuccess?: (result: PrivacyPolicy) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/PostPrivacyPolicy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(privacyPolicy ? privacyPolicy.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostPrivacyPolicyWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostPrivacyPolicyWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostPrivacyPolicyWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostPrivacyPolicy(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostPrivacyPolicy(xhr: any): PrivacyPolicy {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PrivacyPolicy = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PrivacyPolicy.fromJS(resultData200) : new PrivacyPolicy();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deletePrivacyPolicy(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deletePrivacyPolicyWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deletePrivacyPolicyWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/DeletePrivacyPolicy?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeletePrivacyPolicyWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeletePrivacyPolicyWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeletePrivacyPolicyWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeletePrivacyPolicy(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeletePrivacyPolicy(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllSendMessageForTermsAcceptance(requestcontinuationtoken?: string) {
        return new Promise<TupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString>((resolve, reject) => {
            this.getAllSendMessageForTermsAcceptanceWithCallbacks(requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllSendMessageForTermsAcceptanceWithCallbacks(requestcontinuationtoken: string, onSuccess?: (result: TupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/GetAllSendMessageForTermsAcceptance?";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllSendMessageForTermsAcceptanceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllSendMessageForTermsAcceptanceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllSendMessageForTermsAcceptanceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllSendMessageForTermsAcceptance(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllSendMessageForTermsAcceptance(xhr: any): TupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString.fromJS(resultData200) : new TupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postSendMessageForTermsAcceptance(model?: SendMessageForTermsAcceptance) {
        return new Promise<SendMessageForTermsAcceptance>((resolve, reject) => {
            this.postSendMessageForTermsAcceptanceWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSendMessageForTermsAcceptanceWithCallbacks(model: SendMessageForTermsAcceptance, onSuccess?: (result: SendMessageForTermsAcceptance) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/PostSendMessageForTermsAcceptance";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSendMessageForTermsAcceptanceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSendMessageForTermsAcceptanceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSendMessageForTermsAcceptanceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSendMessageForTermsAcceptance(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSendMessageForTermsAcceptance(xhr: any): SendMessageForTermsAcceptance {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendMessageForTermsAcceptance = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendMessageForTermsAcceptance.fromJS(resultData200) : new SendMessageForTermsAcceptance();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putSendMessageForTermsAcceptance(id?: string, model?: SendMessageForTermsAcceptance) {
        return new Promise<SendMessageForTermsAcceptance>((resolve, reject) => {
            this.putSendMessageForTermsAcceptanceWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putSendMessageForTermsAcceptanceWithCallbacks(id: string, model: SendMessageForTermsAcceptance, onSuccess?: (result: SendMessageForTermsAcceptance) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/PutSendMessageForTermsAcceptance?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutSendMessageForTermsAcceptanceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutSendMessageForTermsAcceptanceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutSendMessageForTermsAcceptanceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutSendMessageForTermsAcceptance(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutSendMessageForTermsAcceptance(xhr: any): SendMessageForTermsAcceptance {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendMessageForTermsAcceptance = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendMessageForTermsAcceptance.fromJS(resultData200) : new SendMessageForTermsAcceptance();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getSendMessageForTermsAcceptance(id?: string) {
        return new Promise<SendMessageForTermsAcceptance>((resolve, reject) => {
            this.getSendMessageForTermsAcceptanceWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSendMessageForTermsAcceptanceWithCallbacks(id: string, onSuccess?: (result: SendMessageForTermsAcceptance) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/GetSendMessageForTermsAcceptance?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSendMessageForTermsAcceptanceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSendMessageForTermsAcceptanceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSendMessageForTermsAcceptanceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSendMessageForTermsAcceptance(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSendMessageForTermsAcceptance(xhr: any): SendMessageForTermsAcceptance {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendMessageForTermsAcceptance = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendMessageForTermsAcceptance.fromJS(resultData200) : new SendMessageForTermsAcceptance();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteSendMessageForTermsAcceptance(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteSendMessageForTermsAcceptanceWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteSendMessageForTermsAcceptanceWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/DeleteSendMessageForTermsAcceptance?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteSendMessageForTermsAcceptanceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteSendMessageForTermsAcceptanceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteSendMessageForTermsAcceptanceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteSendMessageForTermsAcceptance(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteSendMessageForTermsAcceptance(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postSendMessageForTermsAcceptanceReciever(model?: SendMessageForTermsAcceptancePerson) {
        return new Promise<SendMessageForTermsAcceptancePerson>((resolve, reject) => {
            this.postSendMessageForTermsAcceptanceRecieverWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSendMessageForTermsAcceptanceRecieverWithCallbacks(model: SendMessageForTermsAcceptancePerson, onSuccess?: (result: SendMessageForTermsAcceptancePerson) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/PostSendMessageForTermsAcceptanceReciever";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSendMessageForTermsAcceptanceRecieverWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSendMessageForTermsAcceptanceRecieverWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSendMessageForTermsAcceptanceRecieverWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSendMessageForTermsAcceptanceReciever(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSendMessageForTermsAcceptanceReciever(xhr: any): SendMessageForTermsAcceptancePerson {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SendMessageForTermsAcceptancePerson = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendMessageForTermsAcceptancePerson.fromJS(resultData200) : new SendMessageForTermsAcceptancePerson();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @sendMessageForTermsAcceptanceId (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllSendMessageForTermsAcceptanceRecievers(sendMessageForTermsAcceptanceId?: string, requestcontinuationtoken?: string) {
        return new Promise<TupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString>((resolve, reject) => {
            this.getAllSendMessageForTermsAcceptanceRecieversWithCallbacks(sendMessageForTermsAcceptanceId, requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllSendMessageForTermsAcceptanceRecieversWithCallbacks(sendMessageForTermsAcceptanceId: string, requestcontinuationtoken: string, onSuccess?: (result: TupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Legal/GetAllSendMessageForTermsAcceptanceRecievers?";
        if (sendMessageForTermsAcceptanceId !== undefined)
            url_ += "sendMessageForTermsAcceptanceId=" + encodeURIComponent("" + sendMessageForTermsAcceptanceId) + "&";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllSendMessageForTermsAcceptanceRecieversWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllSendMessageForTermsAcceptanceRecieversWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllSendMessageForTermsAcceptanceRecieversWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllSendMessageForTermsAcceptanceRecievers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllSendMessageForTermsAcceptanceRecievers(xhr: any): TupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString.fromJS(resultData200) : new TupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface INewsClient {
    /**
     * @return Success
     */
    getAll(): Promise<News[]>;
    /**
     * @appid (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllByApp(appid?: number, take?: number): Promise<News[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<News>;
    /**
     * @news (optional) 
     * @return Success
     */
    post(news?: News): Promise<News>;
    /**
     * @id (optional) 
     * @news (optional) 
     * @return Success
     */
    put(id?: string, news?: News): Promise<News>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class NewsClient extends base.CoreApiBaseClient implements INewsClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<News[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: News[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/News/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): News[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: News[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(News.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @appid (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllByApp(appid?: number, take?: number) {
        return new Promise<News[]>((resolve, reject) => {
            this.getAllByAppWithCallbacks(appid, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByAppWithCallbacks(appid: number, take: number, onSuccess?: (result: News[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/News/GetAllByApp?";
        if (appid !== undefined)
            url_ += "appid=" + encodeURIComponent("" + appid) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByAppWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByAppWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByAppWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByApp(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByApp(xhr: any): News[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: News[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(News.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<News>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: News) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/News/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): News {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: News = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? News.fromJS(resultData200) : new News();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @news (optional) 
     * @return Success
     */
    post(news?: News) {
        return new Promise<News>((resolve, reject) => {
            this.postWithCallbacks(news, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(news: News, onSuccess?: (result: News) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/News/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(news ? news.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): News {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: News = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? News.fromJS(resultData200) : new News();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @news (optional) 
     * @return Success
     */
    put(id?: string, news?: News) {
        return new Promise<News>((resolve, reject) => {
            this.putWithCallbacks(id, news, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, news: News, onSuccess?: (result: News) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/News/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(news ? news.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): News {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: News = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? News.fromJS(resultData200) : new News();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/News/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IOneflowDocumentClient {
    /**
     * @return Success
     */
    getIntegrationSetting(): Promise<ApiIntegration>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putIntegrationSetting(id?: string, model?: ApiIntegration): Promise<ApiIntegration>;
    /**
     * @return Success
     */
    ping(): Promise<boolean>;
    /**
     * @return Success
     */
    getTemplates(): Promise<OneflowAgreementTemplate[]>;
    /**
     * @return Success
     */
    getAllPositions(): Promise<OneflowPosition[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    searchPositions(model?: OneflowPositionSearchModel): Promise<OneflowPosition[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getAgreement(id?: string): Promise<OneflowAdockaAgreement>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteAgreement(id?: string): Promise<void>;
    /**
     * @createdbyid (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllAgreements(createdbyid?: string, requestcontinuationtoken?: string): Promise<ContinuationResultOfIEnumerableOfOneflowAdockaAgreement>;
    /**
     * @itemId (optional) 
     * @itemType (optional) 
     * @return Success
     */
    getAgreementsConnectedTo(itemId?: string, itemType?: string): Promise<OneflowAdockaAgreement[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    createAgreement(model?: CreateOneflowAgreementModel): Promise<OneflowAdockaAgreement>;
}

export class OneflowDocumentClient extends base.CoreApiBaseClient implements IOneflowDocumentClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getIntegrationSetting() {
        return new Promise<ApiIntegration>((resolve, reject) => {
            this.getIntegrationSettingWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getIntegrationSettingWithCallbacks(onSuccess?: (result: ApiIntegration) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/GetIntegrationSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetIntegrationSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetIntegrationSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetIntegrationSettingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetIntegrationSetting(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetIntegrationSetting(xhr: any): ApiIntegration {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ApiIntegration = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiIntegration.fromJS(resultData200) : new ApiIntegration();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putIntegrationSetting(id?: string, model?: ApiIntegration) {
        return new Promise<ApiIntegration>((resolve, reject) => {
            this.putIntegrationSettingWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putIntegrationSettingWithCallbacks(id: string, model: ApiIntegration, onSuccess?: (result: ApiIntegration) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/PutIntegrationSetting?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutIntegrationSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutIntegrationSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutIntegrationSettingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutIntegrationSetting(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutIntegrationSetting(xhr: any): ApiIntegration {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ApiIntegration = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiIntegration.fromJS(resultData200) : new ApiIntegration();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    ping() {
        return new Promise<boolean>((resolve, reject) => {
            this.pingWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private pingWithCallbacks(onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/Ping";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPing(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPing(xhr: any): boolean {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getTemplates() {
        return new Promise<OneflowAgreementTemplate[]>((resolve, reject) => {
            this.getTemplatesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTemplatesWithCallbacks(onSuccess?: (result: OneflowAgreementTemplate[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/GetTemplates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTemplatesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTemplatesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTemplatesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTemplates(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTemplates(xhr: any): OneflowAgreementTemplate[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OneflowAgreementTemplate[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(OneflowAgreementTemplate.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllPositions() {
        return new Promise<OneflowPosition[]>((resolve, reject) => {
            this.getAllPositionsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllPositionsWithCallbacks(onSuccess?: (result: OneflowPosition[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/GetAllPositions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllPositionsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllPositionsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllPositionsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllPositions(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllPositions(xhr: any): OneflowPosition[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OneflowPosition[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(OneflowPosition.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    searchPositions(model?: OneflowPositionSearchModel) {
        return new Promise<OneflowPosition[]>((resolve, reject) => {
            this.searchPositionsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private searchPositionsWithCallbacks(model: OneflowPositionSearchModel, onSuccess?: (result: OneflowPosition[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/SearchPositions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSearchPositionsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSearchPositionsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSearchPositionsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSearchPositions(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSearchPositions(xhr: any): OneflowPosition[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OneflowPosition[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(OneflowPosition.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAgreement(id?: string) {
        return new Promise<OneflowAdockaAgreement>((resolve, reject) => {
            this.getAgreementWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAgreementWithCallbacks(id: string, onSuccess?: (result: OneflowAdockaAgreement) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/GetAgreement?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAgreementWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAgreement(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAgreement(xhr: any): OneflowAdockaAgreement {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OneflowAdockaAgreement = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OneflowAdockaAgreement.fromJS(resultData200) : new OneflowAdockaAgreement();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteAgreement(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteAgreementWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteAgreementWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/DeleteAgreement?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteAgreementWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteAgreement(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteAgreement(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @createdbyid (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllAgreements(createdbyid?: string, requestcontinuationtoken?: string) {
        return new Promise<ContinuationResultOfIEnumerableOfOneflowAdockaAgreement>((resolve, reject) => {
            this.getAllAgreementsWithCallbacks(createdbyid, requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllAgreementsWithCallbacks(createdbyid: string, requestcontinuationtoken: string, onSuccess?: (result: ContinuationResultOfIEnumerableOfOneflowAdockaAgreement) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/GetAllAgreements?";
        if (createdbyid !== undefined)
            url_ += "createdbyid=" + encodeURIComponent("" + createdbyid) + "&";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllAgreementsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllAgreementsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllAgreementsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllAgreements(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllAgreements(xhr: any): ContinuationResultOfIEnumerableOfOneflowAdockaAgreement {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContinuationResultOfIEnumerableOfOneflowAdockaAgreement = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ContinuationResultOfIEnumerableOfOneflowAdockaAgreement.fromJS(resultData200) : new ContinuationResultOfIEnumerableOfOneflowAdockaAgreement();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @itemId (optional) 
     * @itemType (optional) 
     * @return Success
     */
    getAgreementsConnectedTo(itemId?: string, itemType?: string) {
        return new Promise<OneflowAdockaAgreement[]>((resolve, reject) => {
            this.getAgreementsConnectedToWithCallbacks(itemId, itemType, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAgreementsConnectedToWithCallbacks(itemId: string, itemType: string, onSuccess?: (result: OneflowAdockaAgreement[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/GetAgreementsConnectedTo?";
        if (itemId !== undefined)
            url_ += "ItemId=" + encodeURIComponent("" + itemId) + "&";
        if (itemType !== undefined)
            url_ += "ItemType=" + encodeURIComponent("" + itemType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAgreementsConnectedToWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAgreementsConnectedToWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAgreementsConnectedToWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAgreementsConnectedTo(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAgreementsConnectedTo(xhr: any): OneflowAdockaAgreement[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OneflowAdockaAgreement[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(OneflowAdockaAgreement.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    createAgreement(model?: CreateOneflowAgreementModel) {
        return new Promise<OneflowAdockaAgreement>((resolve, reject) => {
            this.createAgreementWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private createAgreementWithCallbacks(model: CreateOneflowAgreementModel, onSuccess?: (result: OneflowAdockaAgreement) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/OneflowDocument/CreateAgreement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCreateAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCreateAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCreateAgreementWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCreateAgreement(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCreateAgreement(xhr: any): OneflowAdockaAgreement {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OneflowAdockaAgreement = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OneflowAdockaAgreement.fromJS(resultData200) : new OneflowAdockaAgreement();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IOrderClient {
    /**
     * @searchStr (optional) 
     * @fromdate (optional) 
     * @todate (optional) 
     * @return Success
     */
    searchOrders(searchStr?: string, fromdate?: Date, todate?: Date): Promise<BuyOrder[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: BuyOrder): Promise<BuyOrder>;
    /**
     * @personid (optional) 
     * @return Success
     */
    createForPerson(personid?: number): Promise<BuyOrder>;
    /**
     * @updatedAfterServerTick (optional) 
     * @return Success
     */
    getUpdatedOrders(updatedAfterServerTick?: number): Promise<OrdersListResult>;
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getOrders(skip?: number, take?: number): Promise<OrdersListResult>;
    /**
     * @code (optional) 
     * @personid (optional) 
     * @return Success
     */
    verifyPromoCode(code?: string, personid?: number): Promise<boolean>;
    /**
     * @id (optional) 
     * @personId (optional) 
     * @legalPersonTypeId (optional) 
     * @socialSecurityNo (optional) 
     * @firstName (optional) 
     * @lastName (optional) 
     * @name (optional) 
     * @streetName (optional) 
     * @postNo (optional) 
     * @city (optional) 
     * @shippingFirstName (optional) 
     * @shippingLastName (optional) 
     * @shippingName (optional) 
     * @shippingStreetName (optional) 
     * @shippingPostNo (optional) 
     * @shippingCity (optional) 
     * @shippingCountry (optional) 
     * @doorcode (optional) 
     * @email (optional) 
     * @cellPhone (optional) 
     * @phone (optional) 
     * @externalSubscriptionId (optional) 
     * @externalAddressSelector (optional) 
     * @termsOfPaymentId (optional) 
     * @termsOfPaymentName (optional) 
     * @termsOfPaymentPrice (optional) 
     * @termsOfPaymentVat (optional) 
     * @termsOfPaymentPriceInclVat (optional) 
     * @termsOfDeliveryId (optional) 
     * @termsOfDeliveryName (optional) 
     * @termsOfDeliveryPrice (optional) 
     * @termsOfDeliveryVat (optional) 
     * @termsOfDeliveryPriceInclVat (optional) 
     * @countryId (optional) 
     * @languageId (optional) 
     * @currencyId (optional) 
     * @orderComment (optional) 
     * @acceptedTerms (optional) 
     * @shippingTag (optional) 
     * @referredByPersonId (optional) 
     * @orderValueExclVat (optional) 
     * @orderValueInclVat (optional) 
     * @orderVat (optional) 
     * @discount (optional) 
     * @discountVat (optional) 
     * @discountInclVat (optional) 
     * @discountDescription (optional) 
     * @totalValueExclVat (optional) 
     * @totalValueInclVat (optional) 
     * @totalVat (optional) 
     * @acceptTermsOfServiceId (optional) 
     * @acceptPrivacyPolicyId (optional) 
     * @products (optional) 
     * @promoCodes (optional) 
     * @shoppingCartProducts (optional) 
     * @return Success
     */
    orderShoppingCart(id?: string, personId?: number, legalPersonTypeId?: number, socialSecurityNo?: string, firstName?: string, lastName?: string, name?: string, streetName?: string, postNo?: string, city?: string, shippingFirstName?: string, shippingLastName?: string, shippingName?: string, shippingStreetName?: string, shippingPostNo?: string, shippingCity?: string, shippingCountry?: string, doorcode?: string, email?: string, cellPhone?: string, phone?: string, externalSubscriptionId?: string, externalAddressSelector?: string, termsOfPaymentId?: string, termsOfPaymentName?: string, termsOfPaymentPrice?: number, termsOfPaymentVat?: number, termsOfPaymentPriceInclVat?: number, termsOfDeliveryId?: string, termsOfDeliveryName?: string, termsOfDeliveryPrice?: number, termsOfDeliveryVat?: number, termsOfDeliveryPriceInclVat?: number, countryId?: string, languageId?: string, currencyId?: string, orderComment?: string, acceptedTerms?: boolean, shippingTag?: string, referredByPersonId?: number, orderValueExclVat?: number, orderValueInclVat?: number, orderVat?: number, discount?: number, discountVat?: number, discountInclVat?: number, discountDescription?: string, totalValueExclVat?: number, totalValueInclVat?: number, totalVat?: number, acceptTermsOfServiceId?: string, acceptPrivacyPolicyId?: string, products?: any[], promoCodes?: any[], shoppingCartProducts?: any[]): Promise<BuyOrder>;
    /**
     * @id (optional) 
     * @return Success
     */
    getOrder(id?: string): Promise<BuyOrder>;
    /**
     * @orderid (optional) 
     * @return Success
     */
    getPlainOrderTransactionDetails(orderid?: string): Promise<PlainOrderTransactionDetails>;
}

export class OrderClient extends base.CoreApiBaseClient implements IOrderClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @searchStr (optional) 
     * @fromdate (optional) 
     * @todate (optional) 
     * @return Success
     */
    searchOrders(searchStr?: string, fromdate?: Date, todate?: Date) {
        return new Promise<BuyOrder[]>((resolve, reject) => {
            this.searchOrdersWithCallbacks(searchStr, fromdate, todate, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private searchOrdersWithCallbacks(searchStr: string, fromdate: Date, todate: Date, onSuccess?: (result: BuyOrder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Order/SearchOrders?";
        if (searchStr !== undefined)
            url_ += "searchStr=" + encodeURIComponent("" + searchStr) + "&";
        if (fromdate !== undefined)
            url_ += "fromdate=" + encodeURIComponent("" + fromdate.toJSON()) + "&";
        if (todate !== undefined)
            url_ += "todate=" + encodeURIComponent("" + todate.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSearchOrdersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSearchOrdersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSearchOrdersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSearchOrders(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSearchOrders(xhr: any): BuyOrder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BuyOrder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(BuyOrder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: BuyOrder) {
        return new Promise<BuyOrder>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: BuyOrder, onSuccess?: (result: BuyOrder) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Order/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): BuyOrder {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BuyOrder = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BuyOrder.fromJS(resultData200) : new BuyOrder();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    createForPerson(personid?: number) {
        return new Promise<BuyOrder>((resolve, reject) => {
            this.createForPersonWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private createForPersonWithCallbacks(personid: number, onSuccess?: (result: BuyOrder) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Order/CreateForPerson?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCreateForPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCreateForPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCreateForPersonWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCreateForPerson(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCreateForPerson(xhr: any): BuyOrder {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BuyOrder = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BuyOrder.fromJS(resultData200) : new BuyOrder();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @updatedAfterServerTick (optional) 
     * @return Success
     */
    getUpdatedOrders(updatedAfterServerTick?: number) {
        return new Promise<OrdersListResult>((resolve, reject) => {
            this.getUpdatedOrdersWithCallbacks(updatedAfterServerTick, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getUpdatedOrdersWithCallbacks(updatedAfterServerTick: number, onSuccess?: (result: OrdersListResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Order/GetUpdatedOrders?";
        if (updatedAfterServerTick !== undefined)
            url_ += "updatedAfterServerTick=" + encodeURIComponent("" + updatedAfterServerTick) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetUpdatedOrdersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetUpdatedOrdersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetUpdatedOrdersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetUpdatedOrders(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetUpdatedOrders(xhr: any): OrdersListResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OrdersListResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrdersListResult.fromJS(resultData200) : new OrdersListResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getOrders(skip?: number, take?: number) {
        return new Promise<OrdersListResult>((resolve, reject) => {
            this.getOrdersWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getOrdersWithCallbacks(skip: number, take: number, onSuccess?: (result: OrdersListResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Order/GetOrders?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetOrdersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetOrdersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetOrdersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetOrders(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetOrders(xhr: any): OrdersListResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: OrdersListResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrdersListResult.fromJS(resultData200) : new OrdersListResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @code (optional) 
     * @personid (optional) 
     * @return Success
     */
    verifyPromoCode(code?: string, personid?: number) {
        return new Promise<boolean>((resolve, reject) => {
            this.verifyPromoCodeWithCallbacks(code, personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private verifyPromoCodeWithCallbacks(code: string, personid: number, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Order/VerifyPromoCode?";
        if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processVerifyPromoCodeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processVerifyPromoCodeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processVerifyPromoCodeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processVerifyPromoCode(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processVerifyPromoCode(xhr: any): boolean {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @personId (optional) 
     * @legalPersonTypeId (optional) 
     * @socialSecurityNo (optional) 
     * @firstName (optional) 
     * @lastName (optional) 
     * @name (optional) 
     * @streetName (optional) 
     * @postNo (optional) 
     * @city (optional) 
     * @shippingFirstName (optional) 
     * @shippingLastName (optional) 
     * @shippingName (optional) 
     * @shippingStreetName (optional) 
     * @shippingPostNo (optional) 
     * @shippingCity (optional) 
     * @shippingCountry (optional) 
     * @doorcode (optional) 
     * @email (optional) 
     * @cellPhone (optional) 
     * @phone (optional) 
     * @externalSubscriptionId (optional) 
     * @externalAddressSelector (optional) 
     * @termsOfPaymentId (optional) 
     * @termsOfPaymentName (optional) 
     * @termsOfPaymentPrice (optional) 
     * @termsOfPaymentVat (optional) 
     * @termsOfPaymentPriceInclVat (optional) 
     * @termsOfDeliveryId (optional) 
     * @termsOfDeliveryName (optional) 
     * @termsOfDeliveryPrice (optional) 
     * @termsOfDeliveryVat (optional) 
     * @termsOfDeliveryPriceInclVat (optional) 
     * @countryId (optional) 
     * @languageId (optional) 
     * @currencyId (optional) 
     * @orderComment (optional) 
     * @acceptedTerms (optional) 
     * @shippingTag (optional) 
     * @referredByPersonId (optional) 
     * @orderValueExclVat (optional) 
     * @orderValueInclVat (optional) 
     * @orderVat (optional) 
     * @discount (optional) 
     * @discountVat (optional) 
     * @discountInclVat (optional) 
     * @discountDescription (optional) 
     * @totalValueExclVat (optional) 
     * @totalValueInclVat (optional) 
     * @totalVat (optional) 
     * @acceptTermsOfServiceId (optional) 
     * @acceptPrivacyPolicyId (optional) 
     * @products (optional) 
     * @promoCodes (optional) 
     * @shoppingCartProducts (optional) 
     * @return Success
     */
    orderShoppingCart(id?: string, personId?: number, legalPersonTypeId?: number, socialSecurityNo?: string, firstName?: string, lastName?: string, name?: string, streetName?: string, postNo?: string, city?: string, shippingFirstName?: string, shippingLastName?: string, shippingName?: string, shippingStreetName?: string, shippingPostNo?: string, shippingCity?: string, shippingCountry?: string, doorcode?: string, email?: string, cellPhone?: string, phone?: string, externalSubscriptionId?: string, externalAddressSelector?: string, termsOfPaymentId?: string, termsOfPaymentName?: string, termsOfPaymentPrice?: number, termsOfPaymentVat?: number, termsOfPaymentPriceInclVat?: number, termsOfDeliveryId?: string, termsOfDeliveryName?: string, termsOfDeliveryPrice?: number, termsOfDeliveryVat?: number, termsOfDeliveryPriceInclVat?: number, countryId?: string, languageId?: string, currencyId?: string, orderComment?: string, acceptedTerms?: boolean, shippingTag?: string, referredByPersonId?: number, orderValueExclVat?: number, orderValueInclVat?: number, orderVat?: number, discount?: number, discountVat?: number, discountInclVat?: number, discountDescription?: string, totalValueExclVat?: number, totalValueInclVat?: number, totalVat?: number, acceptTermsOfServiceId?: string, acceptPrivacyPolicyId?: string, products?: any[], promoCodes?: any[], shoppingCartProducts?: any[]) {
        return new Promise<BuyOrder>((resolve, reject) => {
            this.orderShoppingCartWithCallbacks(id, personId, legalPersonTypeId, socialSecurityNo, firstName, lastName, name, streetName, postNo, city, shippingFirstName, shippingLastName, shippingName, shippingStreetName, shippingPostNo, shippingCity, shippingCountry, doorcode, email, cellPhone, phone, externalSubscriptionId, externalAddressSelector, termsOfPaymentId, termsOfPaymentName, termsOfPaymentPrice, termsOfPaymentVat, termsOfPaymentPriceInclVat, termsOfDeliveryId, termsOfDeliveryName, termsOfDeliveryPrice, termsOfDeliveryVat, termsOfDeliveryPriceInclVat, countryId, languageId, currencyId, orderComment, acceptedTerms, shippingTag, referredByPersonId, orderValueExclVat, orderValueInclVat, orderVat, discount, discountVat, discountInclVat, discountDescription, totalValueExclVat, totalValueInclVat, totalVat, acceptTermsOfServiceId, acceptPrivacyPolicyId, products, promoCodes, shoppingCartProducts, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private orderShoppingCartWithCallbacks(id: string, personId: number, legalPersonTypeId: number, socialSecurityNo: string, firstName: string, lastName: string, name: string, streetName: string, postNo: string, city: string, shippingFirstName: string, shippingLastName: string, shippingName: string, shippingStreetName: string, shippingPostNo: string, shippingCity: string, shippingCountry: string, doorcode: string, email: string, cellPhone: string, phone: string, externalSubscriptionId: string, externalAddressSelector: string, termsOfPaymentId: string, termsOfPaymentName: string, termsOfPaymentPrice: number, termsOfPaymentVat: number, termsOfPaymentPriceInclVat: number, termsOfDeliveryId: string, termsOfDeliveryName: string, termsOfDeliveryPrice: number, termsOfDeliveryVat: number, termsOfDeliveryPriceInclVat: number, countryId: string, languageId: string, currencyId: string, orderComment: string, acceptedTerms: boolean, shippingTag: string, referredByPersonId: number, orderValueExclVat: number, orderValueInclVat: number, orderVat: number, discount: number, discountVat: number, discountInclVat: number, discountDescription: string, totalValueExclVat: number, totalValueInclVat: number, totalVat: number, acceptTermsOfServiceId: string, acceptPrivacyPolicyId: string, products: any[], promoCodes: any[], shoppingCartProducts: any[], onSuccess?: (result: BuyOrder) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Order/OrderShoppingCart?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (personId !== undefined)
            url_ += "PersonId=" + encodeURIComponent("" + personId) + "&";
        if (legalPersonTypeId !== undefined)
            url_ += "LegalPersonTypeId=" + encodeURIComponent("" + legalPersonTypeId) + "&";
        if (socialSecurityNo !== undefined)
            url_ += "SocialSecurityNo=" + encodeURIComponent("" + socialSecurityNo) + "&";
        if (firstName !== undefined)
            url_ += "FirstName=" + encodeURIComponent("" + firstName) + "&";
        if (lastName !== undefined)
            url_ += "LastName=" + encodeURIComponent("" + lastName) + "&";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (streetName !== undefined)
            url_ += "StreetName=" + encodeURIComponent("" + streetName) + "&";
        if (postNo !== undefined)
            url_ += "PostNo=" + encodeURIComponent("" + postNo) + "&";
        if (city !== undefined)
            url_ += "City=" + encodeURIComponent("" + city) + "&";
        if (shippingFirstName !== undefined)
            url_ += "ShippingFirstName=" + encodeURIComponent("" + shippingFirstName) + "&";
        if (shippingLastName !== undefined)
            url_ += "ShippingLastName=" + encodeURIComponent("" + shippingLastName) + "&";
        if (shippingName !== undefined)
            url_ += "ShippingName=" + encodeURIComponent("" + shippingName) + "&";
        if (shippingStreetName !== undefined)
            url_ += "ShippingStreetName=" + encodeURIComponent("" + shippingStreetName) + "&";
        if (shippingPostNo !== undefined)
            url_ += "ShippingPostNo=" + encodeURIComponent("" + shippingPostNo) + "&";
        if (shippingCity !== undefined)
            url_ += "ShippingCity=" + encodeURIComponent("" + shippingCity) + "&";
        if (shippingCountry !== undefined)
            url_ += "ShippingCountry=" + encodeURIComponent("" + shippingCountry) + "&";
        if (doorcode !== undefined)
            url_ += "Doorcode=" + encodeURIComponent("" + doorcode) + "&";
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (cellPhone !== undefined)
            url_ += "CellPhone=" + encodeURIComponent("" + cellPhone) + "&";
        if (phone !== undefined)
            url_ += "Phone=" + encodeURIComponent("" + phone) + "&";
        if (externalSubscriptionId !== undefined)
            url_ += "ExternalSubscriptionId=" + encodeURIComponent("" + externalSubscriptionId) + "&";
        if (externalAddressSelector !== undefined)
            url_ += "ExternalAddressSelector=" + encodeURIComponent("" + externalAddressSelector) + "&";
        if (termsOfPaymentId !== undefined)
            url_ += "TermsOfPaymentId=" + encodeURIComponent("" + termsOfPaymentId) + "&";
        if (termsOfPaymentName !== undefined)
            url_ += "TermsOfPaymentName=" + encodeURIComponent("" + termsOfPaymentName) + "&";
        if (termsOfPaymentPrice !== undefined)
            url_ += "TermsOfPaymentPrice=" + encodeURIComponent("" + termsOfPaymentPrice) + "&";
        if (termsOfPaymentVat !== undefined)
            url_ += "TermsOfPaymentVat=" + encodeURIComponent("" + termsOfPaymentVat) + "&";
        if (termsOfPaymentPriceInclVat !== undefined)
            url_ += "TermsOfPaymentPriceInclVat=" + encodeURIComponent("" + termsOfPaymentPriceInclVat) + "&";
        if (termsOfDeliveryId !== undefined)
            url_ += "TermsOfDeliveryId=" + encodeURIComponent("" + termsOfDeliveryId) + "&";
        if (termsOfDeliveryName !== undefined)
            url_ += "TermsOfDeliveryName=" + encodeURIComponent("" + termsOfDeliveryName) + "&";
        if (termsOfDeliveryPrice !== undefined)
            url_ += "TermsOfDeliveryPrice=" + encodeURIComponent("" + termsOfDeliveryPrice) + "&";
        if (termsOfDeliveryVat !== undefined)
            url_ += "TermsOfDeliveryVat=" + encodeURIComponent("" + termsOfDeliveryVat) + "&";
        if (termsOfDeliveryPriceInclVat !== undefined)
            url_ += "TermsOfDeliveryPriceInclVat=" + encodeURIComponent("" + termsOfDeliveryPriceInclVat) + "&";
        if (countryId !== undefined)
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&";
        if (languageId !== undefined)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (currencyId !== undefined)
            url_ += "CurrencyId=" + encodeURIComponent("" + currencyId) + "&";
        if (orderComment !== undefined)
            url_ += "OrderComment=" + encodeURIComponent("" + orderComment) + "&";
        if (acceptedTerms !== undefined)
            url_ += "AcceptedTerms=" + encodeURIComponent("" + acceptedTerms) + "&";
        if (shippingTag !== undefined)
            url_ += "ShippingTag=" + encodeURIComponent("" + shippingTag) + "&";
        if (referredByPersonId !== undefined)
            url_ += "ReferredByPersonId=" + encodeURIComponent("" + referredByPersonId) + "&";
        if (orderValueExclVat !== undefined)
            url_ += "OrderValueExclVat=" + encodeURIComponent("" + orderValueExclVat) + "&";
        if (orderValueInclVat !== undefined)
            url_ += "OrderValueInclVat=" + encodeURIComponent("" + orderValueInclVat) + "&";
        if (orderVat !== undefined)
            url_ += "OrderVat=" + encodeURIComponent("" + orderVat) + "&";
        if (discount !== undefined)
            url_ += "Discount=" + encodeURIComponent("" + discount) + "&";
        if (discountVat !== undefined)
            url_ += "DiscountVat=" + encodeURIComponent("" + discountVat) + "&";
        if (discountInclVat !== undefined)
            url_ += "DiscountInclVat=" + encodeURIComponent("" + discountInclVat) + "&";
        if (discountDescription !== undefined)
            url_ += "DiscountDescription=" + encodeURIComponent("" + discountDescription) + "&";
        if (totalValueExclVat !== undefined)
            url_ += "TotalValueExclVat=" + encodeURIComponent("" + totalValueExclVat) + "&";
        if (totalValueInclVat !== undefined)
            url_ += "TotalValueInclVat=" + encodeURIComponent("" + totalValueInclVat) + "&";
        if (totalVat !== undefined)
            url_ += "TotalVat=" + encodeURIComponent("" + totalVat) + "&";
        if (acceptTermsOfServiceId !== undefined)
            url_ += "AcceptTermsOfServiceId=" + encodeURIComponent("" + acceptTermsOfServiceId) + "&";
        if (acceptPrivacyPolicyId !== undefined)
            url_ += "AcceptPrivacyPolicyId=" + encodeURIComponent("" + acceptPrivacyPolicyId) + "&";
        if (products !== undefined)
            products.forEach((item, index) => {
                for (let attr in item)
                    url_ += "Products[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (promoCodes !== undefined)
            promoCodes.forEach((item, index) => {
                for (let attr in item)
                    url_ += "PromoCodes[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (shoppingCartProducts !== undefined)
            shoppingCartProducts.forEach((item, index) => {
                for (let attr in item)
                    url_ += "ShoppingCartProducts[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processOrderShoppingCartWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processOrderShoppingCartWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processOrderShoppingCartWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processOrderShoppingCart(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processOrderShoppingCart(xhr: any): BuyOrder {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BuyOrder = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BuyOrder.fromJS(resultData200) : new BuyOrder();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getOrder(id?: string) {
        return new Promise<BuyOrder>((resolve, reject) => {
            this.getOrderWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getOrderWithCallbacks(id: string, onSuccess?: (result: BuyOrder) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Order/GetOrder?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetOrderWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetOrderWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetOrderWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetOrder(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetOrder(xhr: any): BuyOrder {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BuyOrder = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BuyOrder.fromJS(resultData200) : new BuyOrder();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @orderid (optional) 
     * @return Success
     */
    getPlainOrderTransactionDetails(orderid?: string) {
        return new Promise<PlainOrderTransactionDetails>((resolve, reject) => {
            this.getPlainOrderTransactionDetailsWithCallbacks(orderid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPlainOrderTransactionDetailsWithCallbacks(orderid: string, onSuccess?: (result: PlainOrderTransactionDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Order/GetPlainOrderTransactionDetails?";
        if (orderid !== undefined)
            url_ += "orderid=" + encodeURIComponent("" + orderid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPlainOrderTransactionDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPlainOrderTransactionDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPlainOrderTransactionDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPlainOrderTransactionDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPlainOrderTransactionDetails(xhr: any): PlainOrderTransactionDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PlainOrderTransactionDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PlainOrderTransactionDetails.fromJS(resultData200) : new PlainOrderTransactionDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IPaymentClient {
    /**
     * @termsofpaymentid (optional) 
     * @return Success
     */
    getPaymentSearchModel(termsofpaymentid?: string): Promise<PaymentsSearchModel>;
    /**
     * @return Success
     */
    getTermsOfPayments(): Promise<TermsOfPayment[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    getPayments(model?: PaymentsSearchModel): Promise<PaymentsResultModel>;
    /**
     * @id (optional) 
     * @return Success
     */
    getPaymentDetails(id?: number): Promise<Invoice>;
    /**
     * @workitemid (optional) 
     * @return Success
     */
    createPaymentBasisForWorkItem(workitemid?: number): Promise<ActionConfirmationResult>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Invoice): Promise<Invoice>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: Invoice): Promise<Invoice>;
    /**
     * @model (optional) 
     * @return Success
     */
    postSendGroupInvoice(model?: SendGroupInvoiceModel): Promise<ActionConfirmationResult[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    postSendFortnoxInvoice(id?: number): Promise<ActionConfirmationResult[]>;
    /**
     * @workitemids (optional) 
     * @return Success
     */
    notifyWorkItemsPaymentBasisCreated(workitemids?: number[]): Promise<void>;
}

export class PaymentClient extends base.CoreApiBaseClient implements IPaymentClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @termsofpaymentid (optional) 
     * @return Success
     */
    getPaymentSearchModel(termsofpaymentid?: string) {
        return new Promise<PaymentsSearchModel>((resolve, reject) => {
            this.getPaymentSearchModelWithCallbacks(termsofpaymentid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPaymentSearchModelWithCallbacks(termsofpaymentid: string, onSuccess?: (result: PaymentsSearchModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Payment/GetPaymentSearchModel?";
        if (termsofpaymentid !== undefined)
            url_ += "termsofpaymentid=" + encodeURIComponent("" + termsofpaymentid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPaymentSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPaymentSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPaymentSearchModelWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPaymentSearchModel(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPaymentSearchModel(xhr: any): PaymentsSearchModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PaymentsSearchModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentsSearchModel.fromJS(resultData200) : new PaymentsSearchModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getTermsOfPayments() {
        return new Promise<TermsOfPayment[]>((resolve, reject) => {
            this.getTermsOfPaymentsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTermsOfPaymentsWithCallbacks(onSuccess?: (result: TermsOfPayment[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Payment/GetTermsOfPayments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTermsOfPaymentsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTermsOfPaymentsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTermsOfPaymentsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTermsOfPayments(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTermsOfPayments(xhr: any): TermsOfPayment[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfPayment[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TermsOfPayment.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    getPayments(model?: PaymentsSearchModel) {
        return new Promise<PaymentsResultModel>((resolve, reject) => {
            this.getPaymentsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPaymentsWithCallbacks(model: PaymentsSearchModel, onSuccess?: (result: PaymentsResultModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Payment/GetPayments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPaymentsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPaymentsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPaymentsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPayments(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPayments(xhr: any): PaymentsResultModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PaymentsResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentsResultModel.fromJS(resultData200) : new PaymentsResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getPaymentDetails(id?: number) {
        return new Promise<Invoice>((resolve, reject) => {
            this.getPaymentDetailsWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPaymentDetailsWithCallbacks(id: number, onSuccess?: (result: Invoice) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Payment/GetPaymentDetails?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPaymentDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPaymentDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPaymentDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPaymentDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPaymentDetails(xhr: any): Invoice {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Invoice = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Invoice.fromJS(resultData200) : new Invoice();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workitemid (optional) 
     * @return Success
     */
    createPaymentBasisForWorkItem(workitemid?: number) {
        return new Promise<ActionConfirmationResult>((resolve, reject) => {
            this.createPaymentBasisForWorkItemWithCallbacks(workitemid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private createPaymentBasisForWorkItemWithCallbacks(workitemid: number, onSuccess?: (result: ActionConfirmationResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Payment/CreatePaymentBasisForWorkItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(workitemid);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCreatePaymentBasisForWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCreatePaymentBasisForWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCreatePaymentBasisForWorkItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCreatePaymentBasisForWorkItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCreatePaymentBasisForWorkItem(xhr: any): ActionConfirmationResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ActionConfirmationResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ActionConfirmationResult.fromJS(resultData200) : new ActionConfirmationResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Invoice) {
        return new Promise<Invoice>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: Invoice, onSuccess?: (result: Invoice) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Payment/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): Invoice {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Invoice = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Invoice.fromJS(resultData200) : new Invoice();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: Invoice) {
        return new Promise<Invoice>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: Invoice, onSuccess?: (result: Invoice) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Payment/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): Invoice {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Invoice = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Invoice.fromJS(resultData200) : new Invoice();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postSendGroupInvoice(model?: SendGroupInvoiceModel) {
        return new Promise<ActionConfirmationResult[]>((resolve, reject) => {
            this.postSendGroupInvoiceWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSendGroupInvoiceWithCallbacks(model: SendGroupInvoiceModel, onSuccess?: (result: ActionConfirmationResult[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Payment/PostSendGroupInvoice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSendGroupInvoiceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSendGroupInvoiceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSendGroupInvoiceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSendGroupInvoice(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSendGroupInvoice(xhr: any): ActionConfirmationResult[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ActionConfirmationResult[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ActionConfirmationResult.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    postSendFortnoxInvoice(id?: number) {
        return new Promise<ActionConfirmationResult[]>((resolve, reject) => {
            this.postSendFortnoxInvoiceWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSendFortnoxInvoiceWithCallbacks(id: number, onSuccess?: (result: ActionConfirmationResult[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Payment/PostSendFortnoxInvoice?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSendFortnoxInvoiceWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSendFortnoxInvoiceWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSendFortnoxInvoiceWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSendFortnoxInvoice(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSendFortnoxInvoice(xhr: any): ActionConfirmationResult[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ActionConfirmationResult[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ActionConfirmationResult.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workitemids (optional) 
     * @return Success
     */
    notifyWorkItemsPaymentBasisCreated(workitemids?: number[]) {
        return new Promise<void>((resolve, reject) => {
            this.notifyWorkItemsPaymentBasisCreatedWithCallbacks(workitemids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private notifyWorkItemsPaymentBasisCreatedWithCallbacks(workitemids: number[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Payment/NotifyWorkItemsPaymentBasisCreated";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(workitemids);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processNotifyWorkItemsPaymentBasisCreatedWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processNotifyWorkItemsPaymentBasisCreatedWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processNotifyWorkItemsPaymentBasisCreatedWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processNotifyWorkItemsPaymentBasisCreated(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processNotifyWorkItemsPaymentBasisCreated(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IPersonClient {
    /**
     * @return Success
     */
    getContactsSearchModel(): Promise<SearchModel>;
    /**
     * @model (optional) 
     * @return Success
     */
    searchContacts(model?: SearchModel): Promise<PersonSearchResult>;
    /**
     * @employerpersonid (optional) 
     * @return Success
     */
    getAllThatsWorkingForEmployer(employerpersonid?: string): Promise<Person[]>;
    /**
     * @personids (optional) 
     * @return Success
     */
    getContacts(personids?: number[]): Promise<Person[]>;
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllEverBooked(skip?: number, take?: number): Promise<Person[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getDetails(id?: number): Promise<PersonDetails>;
    /**
     * @return Success
     */
    getSendFromEmailAddresses(): Promise<EmailSenderModel[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PersonDetails): Promise<PersonDetails>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: PersonDetails): Promise<PersonDetails>;
    /**
     * @itemId (optional) 
     * @itemType (optional) 
     * @convertToItemType (optional) 
     * @return Success
     */
    convertPersonType(itemId?: string, itemType?: string, convertToItemType?: string): Promise<void>;
    /**
     * @personid (optional) 
     * @return Success
     */
    validateAndGetContactDeleteSummary(personid?: number): Promise<ValidateContactDeleteResponse>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    deletePermanent(id?: number): Promise<void>;
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getDeleted(skip?: number, take?: number): Promise<PersonCompact[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    tryRestoreDeleted(id?: string): Promise<void>;
    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllPersonDeleteRequestFailSummaries(requestcontinuationtoken?: string): Promise<TupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString>;
    /**
     * @id (optional) 
     * @return Success
     */
    deletePersonDeleteRequestFailSummary(id?: string): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    maskContactDetailsForPersonDeleteRequestFailSummary(id?: string): Promise<void>;
    /**
     * @model (optional) 
     * @return Success
     */
    getCustomPersonFields(model?: CustomPersonFieldSerchModel): Promise<CustomPersonField[]>;
}

export class PersonClient extends base.CoreApiBaseClient implements IPersonClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getContactsSearchModel() {
        return new Promise<SearchModel>((resolve, reject) => {
            this.getContactsSearchModelWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getContactsSearchModelWithCallbacks(onSuccess?: (result: SearchModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/GetContactsSearchModel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetContactsSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetContactsSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetContactsSearchModelWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetContactsSearchModel(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetContactsSearchModel(xhr: any): SearchModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SearchModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SearchModel.fromJS(resultData200) : new SearchModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    searchContacts(model?: SearchModel) {
        return new Promise<PersonSearchResult>((resolve, reject) => {
            this.searchContactsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private searchContactsWithCallbacks(model: SearchModel, onSuccess?: (result: PersonSearchResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/SearchContacts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSearchContactsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSearchContactsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSearchContactsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSearchContacts(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSearchContacts(xhr: any): PersonSearchResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonSearchResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonSearchResult.fromJS(resultData200) : new PersonSearchResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @employerpersonid (optional) 
     * @return Success
     */
    getAllThatsWorkingForEmployer(employerpersonid?: string) {
        return new Promise<Person[]>((resolve, reject) => {
            this.getAllThatsWorkingForEmployerWithCallbacks(employerpersonid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllThatsWorkingForEmployerWithCallbacks(employerpersonid: string, onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/GetAllThatsWorkingForEmployer?";
        if (employerpersonid !== undefined)
            url_ += "employerpersonid=" + encodeURIComponent("" + employerpersonid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllThatsWorkingForEmployerWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllThatsWorkingForEmployerWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllThatsWorkingForEmployerWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllThatsWorkingForEmployer(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllThatsWorkingForEmployer(xhr: any): Person[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Person[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personids (optional) 
     * @return Success
     */
    getContacts(personids?: number[]) {
        return new Promise<Person[]>((resolve, reject) => {
            this.getContactsWithCallbacks(personids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getContactsWithCallbacks(personids: number[], onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/GetContacts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(personids);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetContactsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetContactsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetContactsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetContacts(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetContacts(xhr: any): Person[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Person[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getAllEverBooked(skip?: number, take?: number) {
        return new Promise<Person[]>((resolve, reject) => {
            this.getAllEverBookedWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllEverBookedWithCallbacks(skip: number, take: number, onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/GetAllEverBooked?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllEverBookedWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllEverBookedWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllEverBookedWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllEverBooked(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllEverBooked(xhr: any): Person[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Person[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getDetails(id?: number) {
        return new Promise<PersonDetails>((resolve, reject) => {
            this.getDetailsWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDetailsWithCallbacks(id: number, onSuccess?: (result: PersonDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/GetDetails?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDetails(xhr: any): PersonDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonDetails.fromJS(resultData200) : new PersonDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getSendFromEmailAddresses() {
        return new Promise<EmailSenderModel[]>((resolve, reject) => {
            this.getSendFromEmailAddressesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSendFromEmailAddressesWithCallbacks(onSuccess?: (result: EmailSenderModel[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/GetSendFromEmailAddresses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSendFromEmailAddressesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSendFromEmailAddressesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSendFromEmailAddressesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSendFromEmailAddresses(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSendFromEmailAddresses(xhr: any): EmailSenderModel[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: EmailSenderModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(EmailSenderModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PersonDetails) {
        return new Promise<PersonDetails>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: PersonDetails, onSuccess?: (result: PersonDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): PersonDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonDetails.fromJS(resultData200) : new PersonDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: PersonDetails) {
        return new Promise<PersonDetails>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: PersonDetails, onSuccess?: (result: PersonDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): PersonDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonDetails.fromJS(resultData200) : new PersonDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @itemId (optional) 
     * @itemType (optional) 
     * @convertToItemType (optional) 
     * @return Success
     */
    convertPersonType(itemId?: string, itemType?: string, convertToItemType?: string) {
        return new Promise<void>((resolve, reject) => {
            this.convertPersonTypeWithCallbacks(itemId, itemType, convertToItemType, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private convertPersonTypeWithCallbacks(itemId: string, itemType: string, convertToItemType: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/ConvertPersonType?";
        if (itemId !== undefined)
            url_ += "ItemId=" + encodeURIComponent("" + itemId) + "&";
        if (itemType !== undefined)
            url_ += "ItemType=" + encodeURIComponent("" + itemType) + "&";
        if (convertToItemType !== undefined)
            url_ += "ConvertToItemType=" + encodeURIComponent("" + convertToItemType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processConvertPersonTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processConvertPersonTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processConvertPersonTypeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processConvertPersonType(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processConvertPersonType(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    validateAndGetContactDeleteSummary(personid?: number) {
        return new Promise<ValidateContactDeleteResponse>((resolve, reject) => {
            this.validateAndGetContactDeleteSummaryWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private validateAndGetContactDeleteSummaryWithCallbacks(personid: number, onSuccess?: (result: ValidateContactDeleteResponse) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/ValidateAndGetContactDeleteSummary?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processValidateAndGetContactDeleteSummaryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processValidateAndGetContactDeleteSummaryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processValidateAndGetContactDeleteSummaryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processValidateAndGetContactDeleteSummary(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processValidateAndGetContactDeleteSummary(xhr: any): ValidateContactDeleteResponse {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ValidateContactDeleteResponse = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ValidateContactDeleteResponse.fromJS(resultData200) : new ValidateContactDeleteResponse();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deletePermanent(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deletePermanentWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deletePermanentWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/DeletePermanent?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeletePermanentWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeletePermanentWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeletePermanentWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeletePermanent(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeletePermanent(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getDeleted(skip?: number, take?: number) {
        return new Promise<PersonCompact[]>((resolve, reject) => {
            this.getDeletedWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDeletedWithCallbacks(skip: number, take: number, onSuccess?: (result: PersonCompact[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/GetDeleted?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDeletedWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDeletedWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDeletedWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDeleted(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDeleted(xhr: any): PersonCompact[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonCompact[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PersonCompact.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    tryRestoreDeleted(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.tryRestoreDeletedWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private tryRestoreDeletedWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/TryRestoreDeleted?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processTryRestoreDeletedWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTryRestoreDeletedWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processTryRestoreDeletedWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTryRestoreDeleted(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTryRestoreDeleted(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllPersonDeleteRequestFailSummaries(requestcontinuationtoken?: string) {
        return new Promise<TupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString>((resolve, reject) => {
            this.getAllPersonDeleteRequestFailSummariesWithCallbacks(requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllPersonDeleteRequestFailSummariesWithCallbacks(requestcontinuationtoken: string, onSuccess?: (result: TupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/GetAllPersonDeleteRequestFailSummaries?";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllPersonDeleteRequestFailSummariesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllPersonDeleteRequestFailSummariesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllPersonDeleteRequestFailSummariesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllPersonDeleteRequestFailSummaries(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllPersonDeleteRequestFailSummaries(xhr: any): TupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString.fromJS(resultData200) : new TupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deletePersonDeleteRequestFailSummary(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deletePersonDeleteRequestFailSummaryWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deletePersonDeleteRequestFailSummaryWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/DeletePersonDeleteRequestFailSummary?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeletePersonDeleteRequestFailSummaryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeletePersonDeleteRequestFailSummaryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeletePersonDeleteRequestFailSummaryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeletePersonDeleteRequestFailSummary(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeletePersonDeleteRequestFailSummary(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    maskContactDetailsForPersonDeleteRequestFailSummary(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.maskContactDetailsForPersonDeleteRequestFailSummaryWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private maskContactDetailsForPersonDeleteRequestFailSummaryWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/MaskContactDetailsForPersonDeleteRequestFailSummary?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processMaskContactDetailsForPersonDeleteRequestFailSummaryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processMaskContactDetailsForPersonDeleteRequestFailSummaryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processMaskContactDetailsForPersonDeleteRequestFailSummaryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processMaskContactDetailsForPersonDeleteRequestFailSummary(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processMaskContactDetailsForPersonDeleteRequestFailSummary(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    getCustomPersonFields(model?: CustomPersonFieldSerchModel) {
        return new Promise<CustomPersonField[]>((resolve, reject) => {
            this.getCustomPersonFieldsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getCustomPersonFieldsWithCallbacks(model: CustomPersonFieldSerchModel, onSuccess?: (result: CustomPersonField[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Person/GetCustomPersonFields";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetCustomPersonFieldsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetCustomPersonFieldsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetCustomPersonFieldsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetCustomPersonFields(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetCustomPersonFields(xhr: any): CustomPersonField[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CustomPersonField[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CustomPersonField.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IPersonalDataConsentClient {
    /**
     * @personid (optional) 
     * @return Success
     */
    getPersonIsQualified(personid?: string): Promise<boolean>;
    /**
     * @personid (optional) 
     * @return Success
     */
    getAllForPerson(personid?: string): Promise<PersonalDataConsent[]>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: PersonalDataConsent): Promise<PersonalDataConsent>;
}

export class PersonalDataConsentClient extends base.CoreApiBaseClient implements IPersonalDataConsentClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    getPersonIsQualified(personid?: string) {
        return new Promise<boolean>((resolve, reject) => {
            this.getPersonIsQualifiedWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPersonIsQualifiedWithCallbacks(personid: string, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonalDataConsent/GetPersonIsQualified?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPersonIsQualifiedWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPersonIsQualifiedWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPersonIsQualifiedWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPersonIsQualified(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPersonIsQualified(xhr: any): boolean {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    getAllForPerson(personid?: string) {
        return new Promise<PersonalDataConsent[]>((resolve, reject) => {
            this.getAllForPersonWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForPersonWithCallbacks(personid: string, onSuccess?: (result: PersonalDataConsent[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonalDataConsent/GetAllForPerson?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForPersonWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForPerson(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForPerson(xhr: any): PersonalDataConsent[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonalDataConsent[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PersonalDataConsent.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: PersonalDataConsent) {
        return new Promise<PersonalDataConsent>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: PersonalDataConsent, onSuccess?: (result: PersonalDataConsent) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonalDataConsent/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): PersonalDataConsent {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonalDataConsent = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonalDataConsent.fromJS(resultData200) : new PersonalDataConsent();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IPersonalDataConsentSettingClient {
    /**
     * @return Success
     */
    getAll(): Promise<PersonalDataConsentSetting[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<PersonalDataConsentSetting>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PersonalDataConsentSetting): Promise<PersonalDataConsentSetting>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: PersonalDataConsentSetting): Promise<PersonalDataConsentSetting>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class PersonalDataConsentSettingClient extends base.CoreApiBaseClient implements IPersonalDataConsentSettingClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<PersonalDataConsentSetting[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: PersonalDataConsentSetting[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonalDataConsentSetting/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): PersonalDataConsentSetting[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonalDataConsentSetting[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PersonalDataConsentSetting.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<PersonalDataConsentSetting>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: PersonalDataConsentSetting) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonalDataConsentSetting/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): PersonalDataConsentSetting {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonalDataConsentSetting = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonalDataConsentSetting.fromJS(resultData200) : new PersonalDataConsentSetting();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PersonalDataConsentSetting) {
        return new Promise<PersonalDataConsentSetting>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: PersonalDataConsentSetting, onSuccess?: (result: PersonalDataConsentSetting) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonalDataConsentSetting/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): PersonalDataConsentSetting {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonalDataConsentSetting = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonalDataConsentSetting.fromJS(resultData200) : new PersonalDataConsentSetting();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: PersonalDataConsentSetting) {
        return new Promise<PersonalDataConsentSetting>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: PersonalDataConsentSetting, onSuccess?: (result: PersonalDataConsentSetting) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonalDataConsentSetting/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): PersonalDataConsentSetting {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonalDataConsentSetting = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonalDataConsentSetting.fromJS(resultData200) : new PersonalDataConsentSetting();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonalDataConsentSetting/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IPersonLanguageClient {
    /**
     * @personid (optional) 
     * @return Success
     */
    get(personid?: number): Promise<PersonLanguage[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PersonLanguage): Promise<PersonLanguage>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: PersonLanguage): Promise<PersonLanguage>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
}

export class PersonLanguageClient extends base.CoreApiBaseClient implements IPersonLanguageClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    get(personid?: number) {
        return new Promise<PersonLanguage[]>((resolve, reject) => {
            this.getWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(personid: number, onSuccess?: (result: PersonLanguage[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonLanguage/Get?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): PersonLanguage[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonLanguage[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PersonLanguage.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PersonLanguage) {
        return new Promise<PersonLanguage>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: PersonLanguage, onSuccess?: (result: PersonLanguage) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonLanguage/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): PersonLanguage {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonLanguage = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonLanguage.fromJS(resultData200) : new PersonLanguage();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: PersonLanguage) {
        return new Promise<PersonLanguage>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: PersonLanguage, onSuccess?: (result: PersonLanguage) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonLanguage/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): PersonLanguage {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonLanguage = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonLanguage.fromJS(resultData200) : new PersonLanguage();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonLanguage/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IPersonProfessionClient {
    /**
     * @personid (optional) 
     * @return Success
     */
    get(personid?: number): Promise<PersonProfession[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PersonProfession): Promise<PersonProfession>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: PersonProfession): Promise<PersonProfession>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
}

export class PersonProfessionClient extends base.CoreApiBaseClient implements IPersonProfessionClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    get(personid?: number) {
        return new Promise<PersonProfession[]>((resolve, reject) => {
            this.getWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(personid: number, onSuccess?: (result: PersonProfession[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonProfession/Get?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): PersonProfession[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonProfession[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PersonProfession.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PersonProfession) {
        return new Promise<PersonProfession>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: PersonProfession, onSuccess?: (result: PersonProfession) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonProfession/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): PersonProfession {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonProfession = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonProfession.fromJS(resultData200) : new PersonProfession();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: PersonProfession) {
        return new Promise<PersonProfession>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: PersonProfession, onSuccess?: (result: PersonProfession) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonProfession/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): PersonProfession {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonProfession = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonProfession.fromJS(resultData200) : new PersonProfession();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/PersonProfession/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IPingClient {
    /**
     * @return Success
     */
    ping(): Promise<void>;
}

export class PingClient extends base.CoreApiBaseClient implements IPingClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    ping() {
        return new Promise<void>((resolve, reject) => {
            this.pingWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private pingWithCallbacks(onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Ping/Ping";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPing(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPing(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IProductClient {
    /**
     * @productid (optional) 
     * @return Success
     */
    getProductCategoriesMappings(productid?: number): Promise<ProductCategoriesMapping[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    postProductCategoriesMapping(model?: ProductCategoriesMapping): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteProductCategoriesMapping(id?: string): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: number): Promise<Product>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Product): Promise<void>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Product): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    all(skip?: number, take?: number): Promise<Product[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    details(id?: number): Promise<ProductDetails>;
    /**
     * @id (optional) 
     * @return Success
     */
    allInCategory(id?: number): Promise<Product[]>;
    /**
     * @tag (optional) 
     * @return Success
     */
    allForHashTag(tag?: string): Promise<Product[]>;
    /**
     * @productsubscriptionoptionid (optional) 
     * @return Success
     */
    allAvailableForSubscriptionOption(productsubscriptionoptionid?: number): Promise<Product[]>;
    /**
     * @return Success
     */
    getAllProductTags(): Promise<string[]>;
}

export class ProductClient extends base.CoreApiBaseClient implements IProductClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @productid (optional) 
     * @return Success
     */
    getProductCategoriesMappings(productid?: number) {
        return new Promise<ProductCategoriesMapping[]>((resolve, reject) => {
            this.getProductCategoriesMappingsWithCallbacks(productid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getProductCategoriesMappingsWithCallbacks(productid: number, onSuccess?: (result: ProductCategoriesMapping[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Product/GetProductCategoriesMappings?";
        if (productid !== undefined)
            url_ += "productid=" + encodeURIComponent("" + productid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetProductCategoriesMappingsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetProductCategoriesMappingsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetProductCategoriesMappingsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetProductCategoriesMappings(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetProductCategoriesMappings(xhr: any): ProductCategoriesMapping[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ProductCategoriesMapping[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ProductCategoriesMapping.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postProductCategoriesMapping(model?: ProductCategoriesMapping) {
        return new Promise<void>((resolve, reject) => {
            this.postProductCategoriesMappingWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postProductCategoriesMappingWithCallbacks(model: ProductCategoriesMapping, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Product/PostProductCategoriesMapping";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostProductCategoriesMappingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostProductCategoriesMappingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostProductCategoriesMappingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostProductCategoriesMapping(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostProductCategoriesMapping(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteProductCategoriesMapping(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteProductCategoriesMappingWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteProductCategoriesMappingWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Product/DeleteProductCategoriesMapping?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteProductCategoriesMappingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteProductCategoriesMappingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteProductCategoriesMappingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteProductCategoriesMapping(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteProductCategoriesMapping(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: number) {
        return new Promise<Product>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: number, onSuccess?: (result: Product) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Product/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Product {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Product = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Product.fromJS(resultData200) : new Product();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Product) {
        return new Promise<void>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: Product, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Product/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Product) {
        return new Promise<void>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: Product, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Product/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Product/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    all(skip?: number, take?: number) {
        return new Promise<Product[]>((resolve, reject) => {
            this.allWithCallbacks(skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private allWithCallbacks(skip: number, take: number, onSuccess?: (result: Product[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Product/All?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAll(xhr: any): Product[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Product[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Product.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    details(id?: number) {
        return new Promise<ProductDetails>((resolve, reject) => {
            this.detailsWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private detailsWithCallbacks(id: number, onSuccess?: (result: ProductDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Product/Details?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDetails(xhr: any): ProductDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ProductDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductDetails.fromJS(resultData200) : new ProductDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    allInCategory(id?: number) {
        return new Promise<Product[]>((resolve, reject) => {
            this.allInCategoryWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private allInCategoryWithCallbacks(id: number, onSuccess?: (result: Product[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Product/AllInCategory?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAllInCategoryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAllInCategoryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAllInCategoryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAllInCategory(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAllInCategory(xhr: any): Product[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Product[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Product.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @tag (optional) 
     * @return Success
     */
    allForHashTag(tag?: string) {
        return new Promise<Product[]>((resolve, reject) => {
            this.allForHashTagWithCallbacks(tag, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private allForHashTagWithCallbacks(tag: string, onSuccess?: (result: Product[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Product/AllForHashTag?";
        if (tag !== undefined)
            url_ += "tag=" + encodeURIComponent("" + tag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAllForHashTagWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAllForHashTagWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAllForHashTagWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAllForHashTag(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAllForHashTag(xhr: any): Product[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Product[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Product.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @productsubscriptionoptionid (optional) 
     * @return Success
     */
    allAvailableForSubscriptionOption(productsubscriptionoptionid?: number) {
        return new Promise<Product[]>((resolve, reject) => {
            this.allAvailableForSubscriptionOptionWithCallbacks(productsubscriptionoptionid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private allAvailableForSubscriptionOptionWithCallbacks(productsubscriptionoptionid: number, onSuccess?: (result: Product[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Product/AllAvailableForSubscriptionOption?";
        if (productsubscriptionoptionid !== undefined)
            url_ += "productsubscriptionoptionid=" + encodeURIComponent("" + productsubscriptionoptionid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAllAvailableForSubscriptionOptionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAllAvailableForSubscriptionOptionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAllAvailableForSubscriptionOptionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAllAvailableForSubscriptionOption(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAllAvailableForSubscriptionOption(xhr: any): Product[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Product[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Product.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllProductTags() {
        return new Promise<string[]>((resolve, reject) => {
            this.getAllProductTagsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllProductTagsWithCallbacks(onSuccess?: (result: string[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/Product/GetAllProductTags";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllProductTagsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllProductTagsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllProductTagsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllProductTags(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllProductTags(xhr: any): string[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IProductCategoryClient {
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: number): Promise<Category>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Category): Promise<void>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Category): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
}

export class ProductCategoryClient extends base.CoreApiBaseClient implements IProductCategoryClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: number) {
        return new Promise<Category>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: number, onSuccess?: (result: Category) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ProductCategory/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Category {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Category = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Category.fromJS(resultData200) : new Category();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Category) {
        return new Promise<void>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: Category, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ProductCategory/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Category) {
        return new Promise<void>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: Category, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ProductCategory/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ProductCategory/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IRatingCommentClient {
    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @return Success
     */
    getAllFor(itemid?: string, itemtype?: string): Promise<RatingComment[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: RatingComment): Promise<RatingComment>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: RatingComment): Promise<RatingComment>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @return Success
     */
    getTotalRatingFor(itemid?: string, itemtype?: string): Promise<number>;
}

export class RatingCommentClient extends base.CoreApiBaseClient implements IRatingCommentClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @return Success
     */
    getAllFor(itemid?: string, itemtype?: string) {
        return new Promise<RatingComment[]>((resolve, reject) => {
            this.getAllForWithCallbacks(itemid, itemtype, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForWithCallbacks(itemid: string, itemtype: string, onSuccess?: (result: RatingComment[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RatingComment/GetAllFor?";
        if (itemid !== undefined)
            url_ += "itemid=" + encodeURIComponent("" + itemid) + "&";
        if (itemtype !== undefined)
            url_ += "itemtype=" + encodeURIComponent("" + itemtype) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllFor(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllFor(xhr: any): RatingComment[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RatingComment[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(RatingComment.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: RatingComment) {
        return new Promise<RatingComment>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: RatingComment, onSuccess?: (result: RatingComment) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RatingComment/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): RatingComment {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RatingComment = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RatingComment.fromJS(resultData200) : new RatingComment();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: RatingComment) {
        return new Promise<RatingComment>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: RatingComment, onSuccess?: (result: RatingComment) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RatingComment/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): RatingComment {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RatingComment = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RatingComment.fromJS(resultData200) : new RatingComment();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RatingComment/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @return Success
     */
    getTotalRatingFor(itemid?: string, itemtype?: string) {
        return new Promise<number>((resolve, reject) => {
            this.getTotalRatingForWithCallbacks(itemid, itemtype, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTotalRatingForWithCallbacks(itemid: string, itemtype: string, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RatingComment/GetTotalRatingFor?";
        if (itemid !== undefined)
            url_ += "itemid=" + encodeURIComponent("" + itemid) + "&";
        if (itemtype !== undefined)
            url_ += "itemtype=" + encodeURIComponent("" + itemtype) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTotalRatingForWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTotalRatingForWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTotalRatingForWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTotalRatingFor(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTotalRatingFor(xhr: any): number {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IRecipeClient {
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<Recipe>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Recipe): Promise<Recipe>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: Recipe): Promise<Recipe>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class RecipeClient extends base.CoreApiBaseClient implements IRecipeClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<Recipe>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: Recipe) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Recipe/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Recipe {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Recipe = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Recipe.fromJS(resultData200) : new Recipe();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Recipe) {
        return new Promise<Recipe>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: Recipe, onSuccess?: (result: Recipe) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Recipe/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): Recipe {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Recipe = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Recipe.fromJS(resultData200) : new Recipe();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: Recipe) {
        return new Promise<Recipe>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: Recipe, onSuccess?: (result: Recipe) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Recipe/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): Recipe {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Recipe = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Recipe.fromJS(resultData200) : new Recipe();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Recipe/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IRecruitPipeClient {
    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getAll(from?: Date, to?: Date): Promise<RecruitPipe[]>;
    /**
     * @return Success
     */
    getAllActive(): Promise<RecruitPipe[]>;
    /**
     * @return Success
     */
    getAllInactive(): Promise<RecruitPipe[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<RecruitPipe>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: RecruitPipe): Promise<RecruitPipe>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: RecruitPipe): Promise<RecruitPipe>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
    /**
     * @return Success
     */
    getAllRecruitPipeSettings(): Promise<RecruitPipeSetting[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    postRecruitPipeSetting(model?: RecruitPipeSetting): Promise<RecruitPipeSetting>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putRecruitPipeSetting(id?: string, model?: RecruitPipeSetting): Promise<RecruitPipeSetting>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteRecruitPipeSetting(id?: string): Promise<void>;
}

export class RecruitPipeClient extends base.CoreApiBaseClient implements IRecruitPipeClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getAll(from?: Date, to?: Date) {
        return new Promise<RecruitPipe[]>((resolve, reject) => {
            this.getAllWithCallbacks(from, to, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(from: Date, to: Date, onSuccess?: (result: RecruitPipe[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/GetAll?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent("" + from.toJSON()) + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): RecruitPipe[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipe[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(RecruitPipe.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllActive() {
        return new Promise<RecruitPipe[]>((resolve, reject) => {
            this.getAllActiveWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllActiveWithCallbacks(onSuccess?: (result: RecruitPipe[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/GetAllActive";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllActiveWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllActiveWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllActiveWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllActive(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllActive(xhr: any): RecruitPipe[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipe[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(RecruitPipe.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllInactive() {
        return new Promise<RecruitPipe[]>((resolve, reject) => {
            this.getAllInactiveWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllInactiveWithCallbacks(onSuccess?: (result: RecruitPipe[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/GetAllInactive";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllInactiveWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllInactiveWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllInactiveWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllInactive(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllInactive(xhr: any): RecruitPipe[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipe[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(RecruitPipe.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<RecruitPipe>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: RecruitPipe) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): RecruitPipe {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipe = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipe.fromJS(resultData200) : new RecruitPipe();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: RecruitPipe) {
        return new Promise<RecruitPipe>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: RecruitPipe, onSuccess?: (result: RecruitPipe) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): RecruitPipe {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipe = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipe.fromJS(resultData200) : new RecruitPipe();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: RecruitPipe) {
        return new Promise<RecruitPipe>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: RecruitPipe, onSuccess?: (result: RecruitPipe) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): RecruitPipe {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipe = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipe.fromJS(resultData200) : new RecruitPipe();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getAllRecruitPipeSettings() {
        return new Promise<RecruitPipeSetting[]>((resolve, reject) => {
            this.getAllRecruitPipeSettingsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllRecruitPipeSettingsWithCallbacks(onSuccess?: (result: RecruitPipeSetting[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/GetAllRecruitPipeSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllRecruitPipeSettingsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllRecruitPipeSettingsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllRecruitPipeSettingsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllRecruitPipeSettings(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllRecruitPipeSettings(xhr: any): RecruitPipeSetting[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeSetting[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(RecruitPipeSetting.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postRecruitPipeSetting(model?: RecruitPipeSetting) {
        return new Promise<RecruitPipeSetting>((resolve, reject) => {
            this.postRecruitPipeSettingWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postRecruitPipeSettingWithCallbacks(model: RecruitPipeSetting, onSuccess?: (result: RecruitPipeSetting) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/PostRecruitPipeSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostRecruitPipeSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostRecruitPipeSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostRecruitPipeSettingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostRecruitPipeSetting(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostRecruitPipeSetting(xhr: any): RecruitPipeSetting {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeSetting = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipeSetting.fromJS(resultData200) : new RecruitPipeSetting();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putRecruitPipeSetting(id?: string, model?: RecruitPipeSetting) {
        return new Promise<RecruitPipeSetting>((resolve, reject) => {
            this.putRecruitPipeSettingWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putRecruitPipeSettingWithCallbacks(id: string, model: RecruitPipeSetting, onSuccess?: (result: RecruitPipeSetting) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/PutRecruitPipeSetting?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutRecruitPipeSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutRecruitPipeSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutRecruitPipeSettingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutRecruitPipeSetting(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutRecruitPipeSetting(xhr: any): RecruitPipeSetting {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeSetting = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipeSetting.fromJS(resultData200) : new RecruitPipeSetting();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteRecruitPipeSetting(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteRecruitPipeSettingWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteRecruitPipeSettingWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipe/DeleteRecruitPipeSetting?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteRecruitPipeSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteRecruitPipeSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteRecruitPipeSettingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteRecruitPipeSetting(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteRecruitPipeSetting(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IRecruitPipeStepClient {
    /**
     * @id (optional) 
     * @return Success
     */
    getAllByRecruitPipe(id?: string): Promise<RecruitPipeStep[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<RecruitPipeStep>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: RecruitPipeStep): Promise<RecruitPipeStep>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: RecruitPipeStep): Promise<RecruitPipeStep>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class RecruitPipeStepClient extends base.CoreApiBaseClient implements IRecruitPipeStepClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAllByRecruitPipe(id?: string) {
        return new Promise<RecruitPipeStep[]>((resolve, reject) => {
            this.getAllByRecruitPipeWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByRecruitPipeWithCallbacks(id: string, onSuccess?: (result: RecruitPipeStep[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStep/GetAllByRecruitPipe?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByRecruitPipeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByRecruitPipeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByRecruitPipeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByRecruitPipe(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByRecruitPipe(xhr: any): RecruitPipeStep[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeStep[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(RecruitPipeStep.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<RecruitPipeStep>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: RecruitPipeStep) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStep/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): RecruitPipeStep {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeStep = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipeStep.fromJS(resultData200) : new RecruitPipeStep();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: RecruitPipeStep) {
        return new Promise<RecruitPipeStep>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: RecruitPipeStep, onSuccess?: (result: RecruitPipeStep) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStep/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): RecruitPipeStep {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeStep = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipeStep.fromJS(resultData200) : new RecruitPipeStep();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: RecruitPipeStep) {
        return new Promise<RecruitPipeStep>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: RecruitPipeStep, onSuccess?: (result: RecruitPipeStep) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStep/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): RecruitPipeStep {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeStep = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipeStep.fromJS(resultData200) : new RecruitPipeStep();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStep/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IRecruitPipeStepItemClient {
    /**
     * @id (optional) 
     * @return Success
     */
    getAllByRecruitPipe(id?: string): Promise<RecruitPipeStepItem[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getAllByRecruitPipeStep(id?: string): Promise<RecruitPipeStepItem[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: RecruitPipeStepItem): Promise<RecruitPipeStepItem>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: RecruitPipeStepItem): Promise<RecruitPipeStepItem>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<RecruitPipeStepItem>;
}

export class RecruitPipeStepItemClient extends base.CoreApiBaseClient implements IRecruitPipeStepItemClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAllByRecruitPipe(id?: string) {
        return new Promise<RecruitPipeStepItem[]>((resolve, reject) => {
            this.getAllByRecruitPipeWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByRecruitPipeWithCallbacks(id: string, onSuccess?: (result: RecruitPipeStepItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItem/GetAllByRecruitPipe?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByRecruitPipeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByRecruitPipeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByRecruitPipeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByRecruitPipe(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByRecruitPipe(xhr: any): RecruitPipeStepItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeStepItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(RecruitPipeStepItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAllByRecruitPipeStep(id?: string) {
        return new Promise<RecruitPipeStepItem[]>((resolve, reject) => {
            this.getAllByRecruitPipeStepWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByRecruitPipeStepWithCallbacks(id: string, onSuccess?: (result: RecruitPipeStepItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItem/GetAllByRecruitPipeStep?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByRecruitPipeStepWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByRecruitPipeStepWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByRecruitPipeStepWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByRecruitPipeStep(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByRecruitPipeStep(xhr: any): RecruitPipeStepItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeStepItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(RecruitPipeStepItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: RecruitPipeStepItem) {
        return new Promise<RecruitPipeStepItem>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: RecruitPipeStepItem, onSuccess?: (result: RecruitPipeStepItem) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItem/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): RecruitPipeStepItem {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeStepItem = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipeStepItem.fromJS(resultData200) : new RecruitPipeStepItem();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: RecruitPipeStepItem) {
        return new Promise<RecruitPipeStepItem>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: RecruitPipeStepItem, onSuccess?: (result: RecruitPipeStepItem) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItem/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): RecruitPipeStepItem {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeStepItem = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipeStepItem.fromJS(resultData200) : new RecruitPipeStepItem();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItem/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<RecruitPipeStepItem>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: RecruitPipeStepItem) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItem/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): RecruitPipeStepItem {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RecruitPipeStepItem = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RecruitPipeStepItem.fromJS(resultData200) : new RecruitPipeStepItem();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IRecruitPipeStepItemRatingCommentClient {
    /**
     * @id (optional) 
     * @return Success
     */
    getAllByPipeStepItem(id?: string): Promise<RatingComment[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: RatingComment): Promise<RatingComment>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: RatingComment): Promise<RatingComment>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    getTotalRatingForPipeStepItem(id?: string): Promise<number>;
}

export class RecruitPipeStepItemRatingCommentClient extends base.CoreApiBaseClient implements IRecruitPipeStepItemRatingCommentClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAllByPipeStepItem(id?: string) {
        return new Promise<RatingComment[]>((resolve, reject) => {
            this.getAllByPipeStepItemWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByPipeStepItemWithCallbacks(id: string, onSuccess?: (result: RatingComment[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItemRatingComment/GetAllByPipeStepItem?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByPipeStepItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByPipeStepItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByPipeStepItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByPipeStepItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByPipeStepItem(xhr: any): RatingComment[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RatingComment[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(RatingComment.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: RatingComment) {
        return new Promise<RatingComment>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: RatingComment, onSuccess?: (result: RatingComment) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItemRatingComment/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): RatingComment {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RatingComment = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RatingComment.fromJS(resultData200) : new RatingComment();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: RatingComment) {
        return new Promise<RatingComment>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: RatingComment, onSuccess?: (result: RatingComment) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItemRatingComment/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): RatingComment {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: RatingComment = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RatingComment.fromJS(resultData200) : new RatingComment();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItemRatingComment/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getTotalRatingForPipeStepItem(id?: string) {
        return new Promise<number>((resolve, reject) => {
            this.getTotalRatingForPipeStepItemWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTotalRatingForPipeStepItemWithCallbacks(id: string, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/RecruitPipeStepItemRatingComment/GetTotalRatingForPipeStepItem?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTotalRatingForPipeStepItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTotalRatingForPipeStepItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTotalRatingForPipeStepItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTotalRatingForPipeStepItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTotalRatingForPipeStepItem(xhr: any): number {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IReferenceClient {
    /**
     * @id (optional) 
     * @return Success
     */
    getAllForId(id?: string): Promise<Reference[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<Reference>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Reference): Promise<Reference>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: Reference): Promise<Reference>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class ReferenceClient extends base.CoreApiBaseClient implements IReferenceClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAllForId(id?: string) {
        return new Promise<Reference[]>((resolve, reject) => {
            this.getAllForIdWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForIdWithCallbacks(id: string, onSuccess?: (result: Reference[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reference/GetAllForId?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForIdWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForIdWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForIdWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForId(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForId(xhr: any): Reference[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Reference[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Reference.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<Reference>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: Reference) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reference/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Reference {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Reference = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Reference.fromJS(resultData200) : new Reference();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Reference) {
        return new Promise<Reference>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: Reference, onSuccess?: (result: Reference) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reference/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): Reference {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Reference = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Reference.fromJS(resultData200) : new Reference();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: Reference) {
        return new Promise<Reference>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: Reference, onSuccess?: (result: Reference) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reference/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): Reference {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Reference = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Reference.fromJS(resultData200) : new Reference();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reference/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IReferenceCheckClient {
    /**
     * @id (optional) 
     * @return Success
     */
    getAllForId(id?: string): Promise<ReferenceCheck[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<ReferenceCheck>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ReferenceCheck): Promise<ReferenceCheck>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ReferenceCheck): Promise<ReferenceCheck>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class ReferenceCheckClient extends base.CoreApiBaseClient implements IReferenceCheckClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAllForId(id?: string) {
        return new Promise<ReferenceCheck[]>((resolve, reject) => {
            this.getAllForIdWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForIdWithCallbacks(id: string, onSuccess?: (result: ReferenceCheck[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ReferenceCheck/GetAllForId?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForIdWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForIdWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForIdWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForId(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForId(xhr: any): ReferenceCheck[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ReferenceCheck[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ReferenceCheck.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<ReferenceCheck>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: ReferenceCheck) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ReferenceCheck/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): ReferenceCheck {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ReferenceCheck = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ReferenceCheck.fromJS(resultData200) : new ReferenceCheck();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ReferenceCheck) {
        return new Promise<ReferenceCheck>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: ReferenceCheck, onSuccess?: (result: ReferenceCheck) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ReferenceCheck/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): ReferenceCheck {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ReferenceCheck = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ReferenceCheck.fromJS(resultData200) : new ReferenceCheck();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ReferenceCheck) {
        return new Promise<ReferenceCheck>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: ReferenceCheck, onSuccess?: (result: ReferenceCheck) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ReferenceCheck/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): ReferenceCheck {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ReferenceCheck = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ReferenceCheck.fromJS(resultData200) : new ReferenceCheck();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ReferenceCheck/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IReferenceCheckTemplateClient {
    /**
     * @return Success
     */
    getAll(): Promise<ReferenceCheckTemplate[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<ReferenceCheckTemplate>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ReferenceCheckTemplate): Promise<ReferenceCheckTemplate>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ReferenceCheckTemplate): Promise<ReferenceCheckTemplate>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class ReferenceCheckTemplateClient extends base.CoreApiBaseClient implements IReferenceCheckTemplateClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<ReferenceCheckTemplate[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: ReferenceCheckTemplate[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ReferenceCheckTemplate/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): ReferenceCheckTemplate[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ReferenceCheckTemplate[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ReferenceCheckTemplate.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<ReferenceCheckTemplate>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: ReferenceCheckTemplate) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ReferenceCheckTemplate/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): ReferenceCheckTemplate {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ReferenceCheckTemplate = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ReferenceCheckTemplate.fromJS(resultData200) : new ReferenceCheckTemplate();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: ReferenceCheckTemplate) {
        return new Promise<ReferenceCheckTemplate>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: ReferenceCheckTemplate, onSuccess?: (result: ReferenceCheckTemplate) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ReferenceCheckTemplate/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): ReferenceCheckTemplate {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ReferenceCheckTemplate = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ReferenceCheckTemplate.fromJS(resultData200) : new ReferenceCheckTemplate();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: ReferenceCheckTemplate) {
        return new Promise<ReferenceCheckTemplate>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: ReferenceCheckTemplate, onSuccess?: (result: ReferenceCheckTemplate) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ReferenceCheckTemplate/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): ReferenceCheckTemplate {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ReferenceCheckTemplate = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ReferenceCheckTemplate.fromJS(resultData200) : new ReferenceCheckTemplate();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/ReferenceCheckTemplate/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IReminderClient {
    /**
     * @return Success
     */
    getMyActiveReminders(): Promise<Reminder[]>;
    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @return Success
     */
    getAllActiveRemindersFor(itemid?: string, itemtype?: string): Promise<Reminder[]>;
    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @return Success
     */
    getMyActiveRemindersFor(itemid?: string, itemtype?: string): Promise<Reminder[]>;
    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @return Success
     */
    getMyAccomplishedRemindersFor(itemid?: string, itemtype?: string): Promise<Reminder[]>;
    /**
     * @reminder (optional) 
     * @return Success
     */
    post(reminder?: Reminder): Promise<Reminder>;
    /**
     * @id (optional) 
     * @reminder (optional) 
     * @return Success
     */
    put(id?: string, reminder?: Reminder): Promise<Reminder>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class ReminderClient extends base.CoreApiBaseClient implements IReminderClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMyActiveReminders() {
        return new Promise<Reminder[]>((resolve, reject) => {
            this.getMyActiveRemindersWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getMyActiveRemindersWithCallbacks(onSuccess?: (result: Reminder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reminder/GetMyActiveReminders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetMyActiveRemindersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetMyActiveRemindersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetMyActiveRemindersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetMyActiveReminders(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetMyActiveReminders(xhr: any): Reminder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Reminder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Reminder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @return Success
     */
    getAllActiveRemindersFor(itemid?: string, itemtype?: string) {
        return new Promise<Reminder[]>((resolve, reject) => {
            this.getAllActiveRemindersForWithCallbacks(itemid, itemtype, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllActiveRemindersForWithCallbacks(itemid: string, itemtype: string, onSuccess?: (result: Reminder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reminder/GetAllActiveRemindersFor?";
        if (itemid !== undefined)
            url_ += "itemid=" + encodeURIComponent("" + itemid) + "&";
        if (itemtype !== undefined)
            url_ += "itemtype=" + encodeURIComponent("" + itemtype) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllActiveRemindersForWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllActiveRemindersForWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllActiveRemindersForWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllActiveRemindersFor(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllActiveRemindersFor(xhr: any): Reminder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Reminder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Reminder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @return Success
     */
    getMyActiveRemindersFor(itemid?: string, itemtype?: string) {
        return new Promise<Reminder[]>((resolve, reject) => {
            this.getMyActiveRemindersForWithCallbacks(itemid, itemtype, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getMyActiveRemindersForWithCallbacks(itemid: string, itemtype: string, onSuccess?: (result: Reminder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reminder/GetMyActiveRemindersFor?";
        if (itemid !== undefined)
            url_ += "itemid=" + encodeURIComponent("" + itemid) + "&";
        if (itemtype !== undefined)
            url_ += "itemtype=" + encodeURIComponent("" + itemtype) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetMyActiveRemindersForWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetMyActiveRemindersForWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetMyActiveRemindersForWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetMyActiveRemindersFor(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetMyActiveRemindersFor(xhr: any): Reminder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Reminder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Reminder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @itemid (optional) 
     * @itemtype (optional) 
     * @return Success
     */
    getMyAccomplishedRemindersFor(itemid?: string, itemtype?: string) {
        return new Promise<Reminder[]>((resolve, reject) => {
            this.getMyAccomplishedRemindersForWithCallbacks(itemid, itemtype, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getMyAccomplishedRemindersForWithCallbacks(itemid: string, itemtype: string, onSuccess?: (result: Reminder[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reminder/GetMyAccomplishedRemindersFor?";
        if (itemid !== undefined)
            url_ += "itemid=" + encodeURIComponent("" + itemid) + "&";
        if (itemtype !== undefined)
            url_ += "itemtype=" + encodeURIComponent("" + itemtype) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetMyAccomplishedRemindersForWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetMyAccomplishedRemindersForWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetMyAccomplishedRemindersForWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetMyAccomplishedRemindersFor(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetMyAccomplishedRemindersFor(xhr: any): Reminder[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Reminder[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Reminder.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @reminder (optional) 
     * @return Success
     */
    post(reminder?: Reminder) {
        return new Promise<Reminder>((resolve, reject) => {
            this.postWithCallbacks(reminder, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(reminder: Reminder, onSuccess?: (result: Reminder) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reminder/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(reminder ? reminder.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): Reminder {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Reminder = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Reminder.fromJS(resultData200) : new Reminder();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @reminder (optional) 
     * @return Success
     */
    put(id?: string, reminder?: Reminder) {
        return new Promise<Reminder>((resolve, reject) => {
            this.putWithCallbacks(id, reminder, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, reminder: Reminder, onSuccess?: (result: Reminder) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reminder/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(reminder ? reminder.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): Reminder {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Reminder = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Reminder.fromJS(resultData200) : new Reminder();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Reminder/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface ISalePipeClient {
    /**
     * @return Success
     */
    getAllMyActiveSalePipes(): Promise<SalePipe[]>;
    /**
     * @pipeid (optional) 
     * @fromdate (optional) 
     * @todate (optional) 
     * @memberpersonid (optional) 
     * @return Success
     */
    getProcessExpectedStatsItems(pipeid?: string, fromdate?: string, todate?: string, memberpersonid?: string): Promise<SalePipeStats>;
    /**
     * @pipeid (optional) 
     * @fromdate (optional) 
     * @todate (optional) 
     * @memberpersonid (optional) 
     * @return Success
     */
    getClosedSuccessStatsItems(pipeid?: string, fromdate?: string, todate?: string, memberpersonid?: string): Promise<SalePipeStats>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<SalePipe>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: SalePipe): Promise<SalePipe>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: SalePipe): Promise<SalePipe>;
}

export class SalePipeClient extends base.CoreApiBaseClient implements ISalePipeClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMyActiveSalePipes() {
        return new Promise<SalePipe[]>((resolve, reject) => {
            this.getAllMyActiveSalePipesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllMyActiveSalePipesWithCallbacks(onSuccess?: (result: SalePipe[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipe/GetAllMyActiveSalePipes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllMyActiveSalePipesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllMyActiveSalePipesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllMyActiveSalePipesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllMyActiveSalePipes(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllMyActiveSalePipes(xhr: any): SalePipe[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipe[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SalePipe.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @pipeid (optional) 
     * @fromdate (optional) 
     * @todate (optional) 
     * @memberpersonid (optional) 
     * @return Success
     */
    getProcessExpectedStatsItems(pipeid?: string, fromdate?: string, todate?: string, memberpersonid?: string) {
        return new Promise<SalePipeStats>((resolve, reject) => {
            this.getProcessExpectedStatsItemsWithCallbacks(pipeid, fromdate, todate, memberpersonid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getProcessExpectedStatsItemsWithCallbacks(pipeid: string, fromdate: string, todate: string, memberpersonid: string, onSuccess?: (result: SalePipeStats) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipe/GetProcessExpectedStatsItems?";
        if (pipeid !== undefined)
            url_ += "pipeid=" + encodeURIComponent("" + pipeid) + "&";
        if (fromdate !== undefined)
            url_ += "fromdate=" + encodeURIComponent("" + fromdate) + "&";
        if (todate !== undefined)
            url_ += "todate=" + encodeURIComponent("" + todate) + "&";
        if (memberpersonid !== undefined)
            url_ += "memberpersonid=" + encodeURIComponent("" + memberpersonid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetProcessExpectedStatsItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetProcessExpectedStatsItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetProcessExpectedStatsItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetProcessExpectedStatsItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetProcessExpectedStatsItems(xhr: any): SalePipeStats {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStats = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipeStats.fromJS(resultData200) : new SalePipeStats();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @pipeid (optional) 
     * @fromdate (optional) 
     * @todate (optional) 
     * @memberpersonid (optional) 
     * @return Success
     */
    getClosedSuccessStatsItems(pipeid?: string, fromdate?: string, todate?: string, memberpersonid?: string) {
        return new Promise<SalePipeStats>((resolve, reject) => {
            this.getClosedSuccessStatsItemsWithCallbacks(pipeid, fromdate, todate, memberpersonid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getClosedSuccessStatsItemsWithCallbacks(pipeid: string, fromdate: string, todate: string, memberpersonid: string, onSuccess?: (result: SalePipeStats) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipe/GetClosedSuccessStatsItems?";
        if (pipeid !== undefined)
            url_ += "pipeid=" + encodeURIComponent("" + pipeid) + "&";
        if (fromdate !== undefined)
            url_ += "fromdate=" + encodeURIComponent("" + fromdate) + "&";
        if (todate !== undefined)
            url_ += "todate=" + encodeURIComponent("" + todate) + "&";
        if (memberpersonid !== undefined)
            url_ += "memberpersonid=" + encodeURIComponent("" + memberpersonid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetClosedSuccessStatsItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetClosedSuccessStatsItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetClosedSuccessStatsItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetClosedSuccessStatsItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetClosedSuccessStatsItems(xhr: any): SalePipeStats {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStats = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipeStats.fromJS(resultData200) : new SalePipeStats();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipe/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<SalePipe>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: SalePipe) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipe/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): SalePipe {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipe = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipe.fromJS(resultData200) : new SalePipe();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: SalePipe) {
        return new Promise<SalePipe>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: SalePipe, onSuccess?: (result: SalePipe) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipe/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): SalePipe {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipe = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipe.fromJS(resultData200) : new SalePipe();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: SalePipe) {
        return new Promise<SalePipe>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: SalePipe, onSuccess?: (result: SalePipe) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipe/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): SalePipe {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipe = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipe.fromJS(resultData200) : new SalePipe();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface ISalePipeMemberClient {
    /**
     * @pipeid (optional) 
     * @return Success
     */
    getPipeMembers(pipeid?: string): Promise<PipeMember[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PipeMember): Promise<PipeMember>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: PipeMember): Promise<PipeMember>;
    /**
     * @id (optional) 
     * @newresponsiblepersonid (optional) 
     * @return Success
     */
    deletePermanently(id?: string, newresponsiblepersonid?: string): Promise<void>;
}

export class SalePipeMemberClient extends base.CoreApiBaseClient implements ISalePipeMemberClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @pipeid (optional) 
     * @return Success
     */
    getPipeMembers(pipeid?: string) {
        return new Promise<PipeMember[]>((resolve, reject) => {
            this.getPipeMembersWithCallbacks(pipeid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPipeMembersWithCallbacks(pipeid: string, onSuccess?: (result: PipeMember[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeMember/GetPipeMembers?";
        if (pipeid !== undefined)
            url_ += "pipeid=" + encodeURIComponent("" + pipeid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPipeMembersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPipeMembersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPipeMembersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPipeMembers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPipeMembers(xhr: any): PipeMember[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PipeMember[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PipeMember.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: PipeMember) {
        return new Promise<PipeMember>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: PipeMember, onSuccess?: (result: PipeMember) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeMember/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): PipeMember {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PipeMember = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PipeMember.fromJS(resultData200) : new PipeMember();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: PipeMember) {
        return new Promise<PipeMember>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: PipeMember, onSuccess?: (result: PipeMember) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeMember/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): PipeMember {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PipeMember = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PipeMember.fromJS(resultData200) : new PipeMember();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @newresponsiblepersonid (optional) 
     * @return Success
     */
    deletePermanently(id?: string, newresponsiblepersonid?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deletePermanentlyWithCallbacks(id, newresponsiblepersonid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deletePermanentlyWithCallbacks(id: string, newresponsiblepersonid: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeMember/DeletePermanently?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (newresponsiblepersonid !== undefined)
            url_ += "newresponsiblepersonid=" + encodeURIComponent("" + newresponsiblepersonid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeletePermanentlyWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeletePermanentlyWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeletePermanentlyWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeletePermanently(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeletePermanently(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface ISalePipeStepClient {
    /**
     * @id (optional) 
     * @return Success
     */
    getAllForSalePipe(id?: string): Promise<SalePipeStep[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<SalePipeStep>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: SalePipeStep): Promise<SalePipeStep>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: SalePipeStep): Promise<SalePipeStep>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class SalePipeStepClient extends base.CoreApiBaseClient implements ISalePipeStepClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAllForSalePipe(id?: string) {
        return new Promise<SalePipeStep[]>((resolve, reject) => {
            this.getAllForSalePipeWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForSalePipeWithCallbacks(id: string, onSuccess?: (result: SalePipeStep[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStep/GetAllForSalePipe?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForSalePipeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForSalePipeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForSalePipeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForSalePipe(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForSalePipe(xhr: any): SalePipeStep[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStep[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SalePipeStep.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<SalePipeStep>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: SalePipeStep) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStep/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): SalePipeStep {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStep = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipeStep.fromJS(resultData200) : new SalePipeStep();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: SalePipeStep) {
        return new Promise<SalePipeStep>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: SalePipeStep, onSuccess?: (result: SalePipeStep) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStep/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): SalePipeStep {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStep = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipeStep.fromJS(resultData200) : new SalePipeStep();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: SalePipeStep) {
        return new Promise<SalePipeStep>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: SalePipeStep, onSuccess?: (result: SalePipeStep) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStep/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): SalePipeStep {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStep = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipeStep.fromJS(resultData200) : new SalePipeStep();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStep/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface ISalePipeStepItemClient {
    /**
     * @id (optional) 
     * @responsibleid (optional) 
     * @return Success
     */
    getAllForSalePipeStep(id?: string, responsibleid?: string): Promise<SalePipeStepItem[]>;
    /**
     * @id (optional) 
     * @responsibleid (optional) 
     * @return Success
     */
    getAllForSalePipeAndResponsible(id?: string, responsibleid?: string): Promise<SalePipeStepItem[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<SalePipeStepItem>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: SalePipeStepItem): Promise<SalePipeStepItem>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: SalePipeStepItem): Promise<SalePipeStepItem>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class SalePipeStepItemClient extends base.CoreApiBaseClient implements ISalePipeStepItemClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @id (optional) 
     * @responsibleid (optional) 
     * @return Success
     */
    getAllForSalePipeStep(id?: string, responsibleid?: string) {
        return new Promise<SalePipeStepItem[]>((resolve, reject) => {
            this.getAllForSalePipeStepWithCallbacks(id, responsibleid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForSalePipeStepWithCallbacks(id: string, responsibleid: string, onSuccess?: (result: SalePipeStepItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStepItem/GetAllForSalePipeStep?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (responsibleid !== undefined)
            url_ += "responsibleid=" + encodeURIComponent("" + responsibleid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForSalePipeStepWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForSalePipeStepWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForSalePipeStepWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForSalePipeStep(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForSalePipeStep(xhr: any): SalePipeStepItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStepItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SalePipeStepItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @responsibleid (optional) 
     * @return Success
     */
    getAllForSalePipeAndResponsible(id?: string, responsibleid?: string) {
        return new Promise<SalePipeStepItem[]>((resolve, reject) => {
            this.getAllForSalePipeAndResponsibleWithCallbacks(id, responsibleid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForSalePipeAndResponsibleWithCallbacks(id: string, responsibleid: string, onSuccess?: (result: SalePipeStepItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStepItem/GetAllForSalePipeAndResponsible?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (responsibleid !== undefined)
            url_ += "responsibleid=" + encodeURIComponent("" + responsibleid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForSalePipeAndResponsibleWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForSalePipeAndResponsibleWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForSalePipeAndResponsibleWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForSalePipeAndResponsible(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForSalePipeAndResponsible(xhr: any): SalePipeStepItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStepItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SalePipeStepItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<SalePipeStepItem>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: SalePipeStepItem) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStepItem/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): SalePipeStepItem {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStepItem = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipeStepItem.fromJS(resultData200) : new SalePipeStepItem();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: SalePipeStepItem) {
        return new Promise<SalePipeStepItem>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: SalePipeStepItem, onSuccess?: (result: SalePipeStepItem) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStepItem/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): SalePipeStepItem {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStepItem = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipeStepItem.fromJS(resultData200) : new SalePipeStepItem();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: SalePipeStepItem) {
        return new Promise<SalePipeStepItem>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: SalePipeStepItem, onSuccess?: (result: SalePipeStepItem) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStepItem/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): SalePipeStepItem {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SalePipeStepItem = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalePipeStepItem.fromJS(resultData200) : new SalePipeStepItem();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SalePipeStepItem/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IScheduleClient {
    /**
     * @yearnr (optional) 
     * @weeknr (optional) 
     * @return Success
     */
    getBookedWorkItemWorkersForWeek(yearnr?: number, weeknr?: number): Promise<Person[]>;
    /**
     * @workerpersonid (optional) 
     * @return Success
     */
    getTotalReportedTimeForWorker(workerpersonid?: number): Promise<number>;
    /**
     * @workitemids (optional) 
     * @return Success
     */
    getTotalReportedTimeForWorkItems(workitemids?: number[]): Promise<number>;
}

export class ScheduleClient extends base.CoreApiBaseClient implements IScheduleClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @yearnr (optional) 
     * @weeknr (optional) 
     * @return Success
     */
    getBookedWorkItemWorkersForWeek(yearnr?: number, weeknr?: number) {
        return new Promise<Person[]>((resolve, reject) => {
            this.getBookedWorkItemWorkersForWeekWithCallbacks(yearnr, weeknr, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getBookedWorkItemWorkersForWeekWithCallbacks(yearnr: number, weeknr: number, onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Schedule/GetBookedWorkItemWorkersForWeek?";
        if (yearnr !== undefined)
            url_ += "yearnr=" + encodeURIComponent("" + yearnr) + "&";
        if (weeknr !== undefined)
            url_ += "weeknr=" + encodeURIComponent("" + weeknr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetBookedWorkItemWorkersForWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetBookedWorkItemWorkersForWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetBookedWorkItemWorkersForWeekWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetBookedWorkItemWorkersForWeek(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetBookedWorkItemWorkersForWeek(xhr: any): Person[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Person[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workerpersonid (optional) 
     * @return Success
     */
    getTotalReportedTimeForWorker(workerpersonid?: number) {
        return new Promise<number>((resolve, reject) => {
            this.getTotalReportedTimeForWorkerWithCallbacks(workerpersonid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTotalReportedTimeForWorkerWithCallbacks(workerpersonid: number, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Schedule/GetTotalReportedTimeForWorker?";
        if (workerpersonid !== undefined)
            url_ += "workerpersonid=" + encodeURIComponent("" + workerpersonid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTotalReportedTimeForWorkerWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTotalReportedTimeForWorkerWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTotalReportedTimeForWorkerWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTotalReportedTimeForWorker(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTotalReportedTimeForWorker(xhr: any): number {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workitemids (optional) 
     * @return Success
     */
    getTotalReportedTimeForWorkItems(workitemids?: number[]) {
        return new Promise<number>((resolve, reject) => {
            this.getTotalReportedTimeForWorkItemsWithCallbacks(workitemids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTotalReportedTimeForWorkItemsWithCallbacks(workitemids: number[], onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Schedule/GetTotalReportedTimeForWorkItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(workitemids);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTotalReportedTimeForWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTotalReportedTimeForWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTotalReportedTimeForWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTotalReportedTimeForWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTotalReportedTimeForWorkItems(xhr: any): number {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface ISecureMessageClient {
    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getMyCreatedSecureMessages(requestcontinuationtoken?: string): Promise<ContinuationResultOfIEnumerableOfSecureMessage>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<SecureMessage>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: SecureMessage): Promise<SecureMessage>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class SecureMessageClient extends base.CoreApiBaseClient implements ISecureMessageClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getMyCreatedSecureMessages(requestcontinuationtoken?: string) {
        return new Promise<ContinuationResultOfIEnumerableOfSecureMessage>((resolve, reject) => {
            this.getMyCreatedSecureMessagesWithCallbacks(requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getMyCreatedSecureMessagesWithCallbacks(requestcontinuationtoken: string, onSuccess?: (result: ContinuationResultOfIEnumerableOfSecureMessage) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SecureMessage/GetMyCreatedSecureMessages?";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetMyCreatedSecureMessagesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetMyCreatedSecureMessagesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetMyCreatedSecureMessagesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetMyCreatedSecureMessages(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetMyCreatedSecureMessages(xhr: any): ContinuationResultOfIEnumerableOfSecureMessage {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContinuationResultOfIEnumerableOfSecureMessage = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ContinuationResultOfIEnumerableOfSecureMessage.fromJS(resultData200) : new ContinuationResultOfIEnumerableOfSecureMessage();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<SecureMessage>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: SecureMessage) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SecureMessage/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): SecureMessage {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SecureMessage = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SecureMessage.fromJS(resultData200) : new SecureMessage();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: SecureMessage) {
        return new Promise<SecureMessage>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: SecureMessage, onSuccess?: (result: SecureMessage) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SecureMessage/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): SecureMessage {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SecureMessage = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SecureMessage.fromJS(resultData200) : new SecureMessage();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/SecureMessage/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface ISettingClient {
    /**
     * @return Success
     */
    getCustomFields(): Promise<CustomField[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getCustomField(id?: number): Promise<CustomField>;
    /**
     * @model (optional) 
     * @return Success
     */
    postCustomField(model?: CustomField): Promise<CustomField>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putCustomField(id?: number, model?: CustomField): Promise<CustomField>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteCustomField(id?: number): Promise<void>;
    /**
     * @viewmodelname (optional) 
     * @return Success
     */
    getLiquidViewmodelPropertyInfo(viewmodelname?: string): Promise<MonacoLiquidModelPropertyCompletion[]>;
    /**
     * @return Success
     */
    getAllEventSubscriberInputEmailTemplateDescriptions(): Promise<EventSubscriberInputEmailTemplate[]>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putEventSubscriberInputEmailTemplateDescription(id?: string, model?: EventSubscriberInputEmailTemplate): Promise<EventSubscriberInputEmailTemplate>;
    /**
     * @return Success
     */
    getPersonalDataManagementSetting(): Promise<PersonalDataManagementSetting>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putPersonalDataManagementSetting(id?: string, model?: PersonalDataManagementSetting): Promise<PersonalDataManagementSetting>;
    /**
     * @return Success
     */
    getSettings(): Promise<SettingsModel>;
    /**
     * @name (optional) 
     * @return Success
     */
    addProductColor(name?: string): Promise<ProductColor>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putProductColor(id?: number, model?: ProductColor): Promise<ProductColor>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteProductColor(id?: number): Promise<void>;
    /**
     * @name (optional) 
     * @return Success
     */
    addProductSize(name?: string): Promise<ProductSize>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putProductSize(id?: number, model?: ProductSize): Promise<ProductSize>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteProductSize(id?: number): Promise<void>;
    /**
     * @searchstr (optional) 
     * @countryid (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getPreferedZipCodes(searchstr?: string, countryid?: string, skip?: number, take?: number): Promise<DeliveryDay[]>;
    /**
     * @searchstr (optional) 
     * @searchweekday (optional) 
     * @countryid (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getPreferedZipCodesForDayOfWeek(searchstr?: string, searchweekday?: number, countryid?: string, skip?: number, take?: number): Promise<DeliveryDay[]>;
    /**
     * @zipcode (optional) 
     * @return Success
     */
    savePreferedZipCode(zipcode?: DeliveryDay): Promise<DeliveryDay>;
    /**
     * @ids (optional) 
     * @dayofweek (optional) 
     * @return Success
     */
    changeZipCodesDayOfWeek(ids?: number[], dayofweek?: number): Promise<void>;
    /**
     * @ids (optional) 
     * @dayofweek (optional) 
     * @return Success
     */
    copyZipCodesToDayOfWeek(ids?: number[], dayofweek?: number): Promise<void>;
    /**
     * @searchstr (optional) 
     * @return Success
     */
    getMarketingblocks(searchstr?: string): Promise<MarketingBlock[]>;
    /**
     * @marketingblock (optional) 
     * @return Success
     */
    saveMarketingblock(marketingblock?: MarketingBlock): Promise<MarketingBlock>;
    /**
     * @searchstr (optional) 
     * @currencyid (optional) 
     * @personid (optional) 
     * @referedbypersonid (optional) 
     * @return Success
     */
    getPromoCodes(searchstr?: string, currencyid?: string, personid?: string, referedbypersonid?: string): Promise<PromoCode[]>;
    /**
     * @searchstr (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getUsedPromoCodes(searchstr?: string, skip?: number, take?: number): Promise<PagingResult>;
    /**
     * @return Success
     */
    getAllPromoCodes(): Promise<PromoCode[]>;
    /**
     * @code (optional) 
     * @return Success
     */
    savePromoCode(code?: PromoCode): Promise<PromoCode>;
    /**
     * @code (optional) 
     * @return Success
     */
    deletePromoCode(code?: PromoCode): Promise<void>;
    /**
     * @return Success
     */
    getBillingReleaseLimits(): Promise<BillingReleaseLimit[]>;
    /**
     * @limit (optional) 
     * @return Success
     */
    saveBillingReleaseLimit(limit?: BillingReleaseLimit): Promise<BillingReleaseLimit>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteBillingReleaseLimit(id?: number): Promise<void>;
    /**
     * @return Success
     */
    getTermsOfDeliveries(): Promise<TermsOfDelivery[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    saveTermsOfDelivery(model?: TermsOfDelivery): Promise<TermsOfDelivery>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteTermsOfDelivery(id?: string): Promise<void>;
    /**
     * @return Success
     */
    getTermsOfPayments(): Promise<TermsOfPayment[]>;
    /**
     * @termsOfPaymentId (optional) 
     * @return Success
     */
    getTermsOfPaymentDetails(termsOfPaymentId?: string): Promise<TermsOfPaymentWithCredentials>;
    /**
     * @model (optional) 
     * @return Success
     */
    saveTermsOfPayment(model?: TermsOfPayment): Promise<TermsOfPayment>;
    /**
     * @model (optional) 
     * @return Success
     */
    saveTermsOfPaymentDetails(model?: TermsOfPaymentWithCredentials): Promise<TermsOfPaymentWithCredentials>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteTermsOfPayment(id?: string): Promise<void>;
    /**
     * @return Success
     */
    getSystemRoles(): Promise<SystemRole[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    postSystemRole(model?: SystemRole): Promise<void>;
    /**
     * @userid (optional) 
     * @model (optional) 
     * @return Success
     */
    putUserRoles(userid?: number, model?: UpdateUserRolesModel): Promise<boolean>;
    /**
     * @return Success
     */
    getAllWorkCompensationMultipliers(): Promise<WorkCompensationMultiplier[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getWorkCompensationMultiplier(id?: number): Promise<WorkCompensationMultiplier>;
    /**
     * @model (optional) 
     * @return Success
     */
    postWorkCompensationMultipliers(model?: WorkCompensationMultiplier): Promise<void>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putWorkCompensationMultipliers(id?: number, model?: WorkCompensationMultiplier): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteWorkCompensationMultipliers(id?: number): Promise<void>;
    /**
     * @return Success
     */
    getAllDefaultPriceProfiles(): Promise<DefaultPriceProfile[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getDefaultPriceProfile(id?: number): Promise<DefaultPriceProfile>;
    /**
     * @model (optional) 
     * @return Success
     */
    postDefaultPriceProfile(model?: DefaultPriceProfile): Promise<void>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putDefaultPriceProfile(id?: number, model?: DefaultPriceProfile): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteDefaultPriceProfile(id?: number): Promise<void>;
    /**
     * @defaultPriceProfileId (optional) 
     * @return Success
     */
    getDefaultPriceProfileTimeGroups(defaultPriceProfileId?: number): Promise<DefaultPriceProfileTimeGroup[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getDefaultPriceProfileTimeGroup(id?: number): Promise<DefaultPriceProfileTimeGroup>;
    /**
     * @model (optional) 
     * @return Success
     */
    postDefaultPriceProfileTimeGroup(model?: DefaultPriceProfileTimeGroup): Promise<void>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putDefaultPriceProfileTimeGroup(id?: number, model?: DefaultPriceProfileTimeGroup): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteDefaultPriceProfileTimeGroup(id?: number): Promise<void>;
    /**
     * @return Success
     */
    getAccountConfig(): Promise<AccountConfig>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putAccountConfig(id?: string, model?: AccountConfig): Promise<AccountConfig>;
    /**
     * @return Success
     */
    getPersonalConfig(): Promise<PersonalConfig>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putPersonalConfig(id?: string, model?: PersonalConfig): Promise<PersonalConfig>;
    /**
     * @return Success
     */
    getConfigOptions(): Promise<ConfigOptions>;
    /**
     * @return Success
     */
    getAllEventSubscribers(): Promise<EventSubscriberDescriptions[]>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putEventSubscriberDescription(id?: string, model?: EventSubscriberDescription): Promise<EventSubscriberDescription>;
    /**
     * @id (optional) 
     * @return Success
     */
    regenerateEventSubscriberDescription(id?: string): Promise<void>;
    /**
     * @return Success
     */
    getCustomGroups(): Promise<CustomGroup[]>;
    /**
     * @itemtype (optional) 
     * @return Success
     */
    getCustomGroupsForType(itemtype?: string): Promise<CustomGroup[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getCustomGroup(id?: number): Promise<CustomGroup>;
    /**
     * @model (optional) 
     * @return Success
     */
    postCustomGroup(model?: CustomGroup): Promise<CustomGroup>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putCustomGroup(id?: number, model?: CustomGroup): Promise<CustomGroup>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteCustomGroup(id?: number): Promise<void>;
}

export class SettingClient extends base.CoreApiBaseClient implements ISettingClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCustomFields() {
        return new Promise<CustomField[]>((resolve, reject) => {
            this.getCustomFieldsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getCustomFieldsWithCallbacks(onSuccess?: (result: CustomField[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetCustomFields";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetCustomFieldsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetCustomFieldsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetCustomFieldsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetCustomFields(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetCustomFields(xhr: any): CustomField[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CustomField[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CustomField.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getCustomField(id?: number) {
        return new Promise<CustomField>((resolve, reject) => {
            this.getCustomFieldWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getCustomFieldWithCallbacks(id: number, onSuccess?: (result: CustomField) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetCustomField?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetCustomFieldWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetCustomFieldWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetCustomFieldWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetCustomField(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetCustomField(xhr: any): CustomField {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CustomField = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomField.fromJS(resultData200) : new CustomField();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postCustomField(model?: CustomField) {
        return new Promise<CustomField>((resolve, reject) => {
            this.postCustomFieldWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postCustomFieldWithCallbacks(model: CustomField, onSuccess?: (result: CustomField) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PostCustomField";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostCustomFieldWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostCustomFieldWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostCustomFieldWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostCustomField(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostCustomField(xhr: any): CustomField {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CustomField = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomField.fromJS(resultData200) : new CustomField();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putCustomField(id?: number, model?: CustomField) {
        return new Promise<CustomField>((resolve, reject) => {
            this.putCustomFieldWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putCustomFieldWithCallbacks(id: number, model: CustomField, onSuccess?: (result: CustomField) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutCustomField?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutCustomFieldWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutCustomFieldWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutCustomFieldWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutCustomField(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutCustomField(xhr: any): CustomField {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CustomField = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomField.fromJS(resultData200) : new CustomField();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteCustomField(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteCustomFieldWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteCustomFieldWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeleteCustomField?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteCustomFieldWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteCustomFieldWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteCustomFieldWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteCustomField(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteCustomField(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @viewmodelname (optional) 
     * @return Success
     */
    getLiquidViewmodelPropertyInfo(viewmodelname?: string) {
        return new Promise<MonacoLiquidModelPropertyCompletion[]>((resolve, reject) => {
            this.getLiquidViewmodelPropertyInfoWithCallbacks(viewmodelname, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getLiquidViewmodelPropertyInfoWithCallbacks(viewmodelname: string, onSuccess?: (result: MonacoLiquidModelPropertyCompletion[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetLiquidViewmodelPropertyInfo?";
        if (viewmodelname !== undefined)
            url_ += "viewmodelname=" + encodeURIComponent("" + viewmodelname) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetLiquidViewmodelPropertyInfoWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetLiquidViewmodelPropertyInfoWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetLiquidViewmodelPropertyInfoWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetLiquidViewmodelPropertyInfo(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetLiquidViewmodelPropertyInfo(xhr: any): MonacoLiquidModelPropertyCompletion[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: MonacoLiquidModelPropertyCompletion[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(MonacoLiquidModelPropertyCompletion.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllEventSubscriberInputEmailTemplateDescriptions() {
        return new Promise<EventSubscriberInputEmailTemplate[]>((resolve, reject) => {
            this.getAllEventSubscriberInputEmailTemplateDescriptionsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllEventSubscriberInputEmailTemplateDescriptionsWithCallbacks(onSuccess?: (result: EventSubscriberInputEmailTemplate[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetAllEventSubscriberInputEmailTemplateDescriptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllEventSubscriberInputEmailTemplateDescriptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllEventSubscriberInputEmailTemplateDescriptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllEventSubscriberInputEmailTemplateDescriptionsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllEventSubscriberInputEmailTemplateDescriptions(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllEventSubscriberInputEmailTemplateDescriptions(xhr: any): EventSubscriberInputEmailTemplate[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: EventSubscriberInputEmailTemplate[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(EventSubscriberInputEmailTemplate.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putEventSubscriberInputEmailTemplateDescription(id?: string, model?: EventSubscriberInputEmailTemplate) {
        return new Promise<EventSubscriberInputEmailTemplate>((resolve, reject) => {
            this.putEventSubscriberInputEmailTemplateDescriptionWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putEventSubscriberInputEmailTemplateDescriptionWithCallbacks(id: string, model: EventSubscriberInputEmailTemplate, onSuccess?: (result: EventSubscriberInputEmailTemplate) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutEventSubscriberInputEmailTemplateDescription?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutEventSubscriberInputEmailTemplateDescriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutEventSubscriberInputEmailTemplateDescriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutEventSubscriberInputEmailTemplateDescriptionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutEventSubscriberInputEmailTemplateDescription(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutEventSubscriberInputEmailTemplateDescription(xhr: any): EventSubscriberInputEmailTemplate {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: EventSubscriberInputEmailTemplate = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EventSubscriberInputEmailTemplate.fromJS(resultData200) : new EventSubscriberInputEmailTemplate();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getPersonalDataManagementSetting() {
        return new Promise<PersonalDataManagementSetting>((resolve, reject) => {
            this.getPersonalDataManagementSettingWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPersonalDataManagementSettingWithCallbacks(onSuccess?: (result: PersonalDataManagementSetting) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetPersonalDataManagementSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPersonalDataManagementSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPersonalDataManagementSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPersonalDataManagementSettingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPersonalDataManagementSetting(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPersonalDataManagementSetting(xhr: any): PersonalDataManagementSetting {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonalDataManagementSetting = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonalDataManagementSetting.fromJS(resultData200) : new PersonalDataManagementSetting();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putPersonalDataManagementSetting(id?: string, model?: PersonalDataManagementSetting) {
        return new Promise<PersonalDataManagementSetting>((resolve, reject) => {
            this.putPersonalDataManagementSettingWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putPersonalDataManagementSettingWithCallbacks(id: string, model: PersonalDataManagementSetting, onSuccess?: (result: PersonalDataManagementSetting) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutPersonalDataManagementSetting?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutPersonalDataManagementSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutPersonalDataManagementSettingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutPersonalDataManagementSettingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutPersonalDataManagementSetting(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutPersonalDataManagementSetting(xhr: any): PersonalDataManagementSetting {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonalDataManagementSetting = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonalDataManagementSetting.fromJS(resultData200) : new PersonalDataManagementSetting();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getSettings() {
        return new Promise<SettingsModel>((resolve, reject) => {
            this.getSettingsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSettingsWithCallbacks(onSuccess?: (result: SettingsModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSettingsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSettingsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSettingsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSettings(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSettings(xhr: any): SettingsModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SettingsModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SettingsModel.fromJS(resultData200) : new SettingsModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @name (optional) 
     * @return Success
     */
    addProductColor(name?: string) {
        return new Promise<ProductColor>((resolve, reject) => {
            this.addProductColorWithCallbacks(name, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private addProductColorWithCallbacks(name: string, onSuccess?: (result: ProductColor) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/AddProductColor?";
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAddProductColorWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddProductColorWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAddProductColorWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAddProductColor(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAddProductColor(xhr: any): ProductColor {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ProductColor = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductColor.fromJS(resultData200) : new ProductColor();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putProductColor(id?: number, model?: ProductColor) {
        return new Promise<ProductColor>((resolve, reject) => {
            this.putProductColorWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putProductColorWithCallbacks(id: number, model: ProductColor, onSuccess?: (result: ProductColor) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutProductColor?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutProductColorWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutProductColorWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutProductColorWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutProductColor(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutProductColor(xhr: any): ProductColor {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ProductColor = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductColor.fromJS(resultData200) : new ProductColor();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteProductColor(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteProductColorWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteProductColorWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeleteProductColor?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteProductColorWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteProductColorWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteProductColorWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteProductColor(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteProductColor(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @name (optional) 
     * @return Success
     */
    addProductSize(name?: string) {
        return new Promise<ProductSize>((resolve, reject) => {
            this.addProductSizeWithCallbacks(name, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private addProductSizeWithCallbacks(name: string, onSuccess?: (result: ProductSize) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/AddProductSize?";
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAddProductSizeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddProductSizeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAddProductSizeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAddProductSize(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAddProductSize(xhr: any): ProductSize {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ProductSize = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductSize.fromJS(resultData200) : new ProductSize();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putProductSize(id?: number, model?: ProductSize) {
        return new Promise<ProductSize>((resolve, reject) => {
            this.putProductSizeWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putProductSizeWithCallbacks(id: number, model: ProductSize, onSuccess?: (result: ProductSize) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutProductSize?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutProductSizeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutProductSizeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutProductSizeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutProductSize(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutProductSize(xhr: any): ProductSize {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ProductSize = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductSize.fromJS(resultData200) : new ProductSize();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteProductSize(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteProductSizeWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteProductSizeWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeleteProductSize?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteProductSizeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteProductSizeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteProductSizeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteProductSize(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteProductSize(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @searchstr (optional) 
     * @countryid (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getPreferedZipCodes(searchstr?: string, countryid?: string, skip?: number, take?: number) {
        return new Promise<DeliveryDay[]>((resolve, reject) => {
            this.getPreferedZipCodesWithCallbacks(searchstr, countryid, skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPreferedZipCodesWithCallbacks(searchstr: string, countryid: string, skip: number, take: number, onSuccess?: (result: DeliveryDay[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetPreferedZipCodes?";
        if (searchstr !== undefined)
            url_ += "searchstr=" + encodeURIComponent("" + searchstr) + "&";
        if (countryid !== undefined)
            url_ += "countryid=" + encodeURIComponent("" + countryid) + "&";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPreferedZipCodesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPreferedZipCodesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPreferedZipCodesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPreferedZipCodes(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPreferedZipCodes(xhr: any): DeliveryDay[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DeliveryDay[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DeliveryDay.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @searchstr (optional) 
     * @searchweekday (optional) 
     * @countryid (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getPreferedZipCodesForDayOfWeek(searchstr?: string, searchweekday?: number, countryid?: string, skip?: number, take?: number) {
        return new Promise<DeliveryDay[]>((resolve, reject) => {
            this.getPreferedZipCodesForDayOfWeekWithCallbacks(searchstr, searchweekday, countryid, skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPreferedZipCodesForDayOfWeekWithCallbacks(searchstr: string, searchweekday: number, countryid: string, skip: number, take: number, onSuccess?: (result: DeliveryDay[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetPreferedZipCodesForDayOfWeek?";
        if (searchstr !== undefined)
            url_ += "searchstr=" + encodeURIComponent("" + searchstr) + "&";
        if (searchweekday !== undefined)
            url_ += "searchweekday=" + encodeURIComponent("" + searchweekday) + "&";
        if (countryid !== undefined)
            url_ += "countryid=" + encodeURIComponent("" + countryid) + "&";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPreferedZipCodesForDayOfWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPreferedZipCodesForDayOfWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPreferedZipCodesForDayOfWeekWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPreferedZipCodesForDayOfWeek(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPreferedZipCodesForDayOfWeek(xhr: any): DeliveryDay[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DeliveryDay[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DeliveryDay.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @zipcode (optional) 
     * @return Success
     */
    savePreferedZipCode(zipcode?: DeliveryDay) {
        return new Promise<DeliveryDay>((resolve, reject) => {
            this.savePreferedZipCodeWithCallbacks(zipcode, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private savePreferedZipCodeWithCallbacks(zipcode: DeliveryDay, onSuccess?: (result: DeliveryDay) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/SavePreferedZipCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(zipcode ? zipcode.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSavePreferedZipCodeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSavePreferedZipCodeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSavePreferedZipCodeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSavePreferedZipCode(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSavePreferedZipCode(xhr: any): DeliveryDay {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DeliveryDay = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DeliveryDay.fromJS(resultData200) : new DeliveryDay();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @ids (optional) 
     * @dayofweek (optional) 
     * @return Success
     */
    changeZipCodesDayOfWeek(ids?: number[], dayofweek?: number) {
        return new Promise<void>((resolve, reject) => {
            this.changeZipCodesDayOfWeekWithCallbacks(ids, dayofweek, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private changeZipCodesDayOfWeekWithCallbacks(ids: number[], dayofweek: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/ChangeZipCodesDayOfWeek?";
        if (ids !== undefined)
            ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        if (dayofweek !== undefined)
            url_ += "dayofweek=" + encodeURIComponent("" + dayofweek) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processChangeZipCodesDayOfWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processChangeZipCodesDayOfWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processChangeZipCodesDayOfWeekWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processChangeZipCodesDayOfWeek(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processChangeZipCodesDayOfWeek(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @ids (optional) 
     * @dayofweek (optional) 
     * @return Success
     */
    copyZipCodesToDayOfWeek(ids?: number[], dayofweek?: number) {
        return new Promise<void>((resolve, reject) => {
            this.copyZipCodesToDayOfWeekWithCallbacks(ids, dayofweek, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private copyZipCodesToDayOfWeekWithCallbacks(ids: number[], dayofweek: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/CopyZipCodesToDayOfWeek?";
        if (ids !== undefined)
            ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        if (dayofweek !== undefined)
            url_ += "dayofweek=" + encodeURIComponent("" + dayofweek) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCopyZipCodesToDayOfWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCopyZipCodesToDayOfWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCopyZipCodesToDayOfWeekWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCopyZipCodesToDayOfWeek(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCopyZipCodesToDayOfWeek(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @searchstr (optional) 
     * @return Success
     */
    getMarketingblocks(searchstr?: string) {
        return new Promise<MarketingBlock[]>((resolve, reject) => {
            this.getMarketingblocksWithCallbacks(searchstr, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getMarketingblocksWithCallbacks(searchstr: string, onSuccess?: (result: MarketingBlock[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetMarketingblocks?";
        if (searchstr !== undefined)
            url_ += "searchstr=" + encodeURIComponent("" + searchstr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetMarketingblocksWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetMarketingblocksWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetMarketingblocksWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetMarketingblocks(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetMarketingblocks(xhr: any): MarketingBlock[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: MarketingBlock[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(MarketingBlock.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @marketingblock (optional) 
     * @return Success
     */
    saveMarketingblock(marketingblock?: MarketingBlock) {
        return new Promise<MarketingBlock>((resolve, reject) => {
            this.saveMarketingblockWithCallbacks(marketingblock, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private saveMarketingblockWithCallbacks(marketingblock: MarketingBlock, onSuccess?: (result: MarketingBlock) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/SaveMarketingblock";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(marketingblock ? marketingblock.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSaveMarketingblockWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSaveMarketingblockWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSaveMarketingblockWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSaveMarketingblock(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSaveMarketingblock(xhr: any): MarketingBlock {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: MarketingBlock = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? MarketingBlock.fromJS(resultData200) : new MarketingBlock();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @searchstr (optional) 
     * @currencyid (optional) 
     * @personid (optional) 
     * @referedbypersonid (optional) 
     * @return Success
     */
    getPromoCodes(searchstr?: string, currencyid?: string, personid?: string, referedbypersonid?: string) {
        return new Promise<PromoCode[]>((resolve, reject) => {
            this.getPromoCodesWithCallbacks(searchstr, currencyid, personid, referedbypersonid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPromoCodesWithCallbacks(searchstr: string, currencyid: string, personid: string, referedbypersonid: string, onSuccess?: (result: PromoCode[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetPromoCodes?";
        if (searchstr !== undefined)
            url_ += "searchstr=" + encodeURIComponent("" + searchstr) + "&";
        if (currencyid !== undefined)
            url_ += "currencyid=" + encodeURIComponent("" + currencyid) + "&";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (referedbypersonid !== undefined)
            url_ += "referedbypersonid=" + encodeURIComponent("" + referedbypersonid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPromoCodesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPromoCodesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPromoCodesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPromoCodes(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPromoCodes(xhr: any): PromoCode[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PromoCode[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PromoCode.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @searchstr (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getUsedPromoCodes(searchstr?: string, skip?: number, take?: number) {
        return new Promise<PagingResult>((resolve, reject) => {
            this.getUsedPromoCodesWithCallbacks(searchstr, skip, take, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getUsedPromoCodesWithCallbacks(searchstr: string, skip: number, take: number, onSuccess?: (result: PagingResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetUsedPromoCodes?";
        if (searchstr !== undefined)
            url_ += "searchstr=" + encodeURIComponent("" + searchstr) + "&";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetUsedPromoCodesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetUsedPromoCodesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetUsedPromoCodesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetUsedPromoCodes(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetUsedPromoCodes(xhr: any): PagingResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PagingResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagingResult.fromJS(resultData200) : new PagingResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllPromoCodes() {
        return new Promise<PromoCode[]>((resolve, reject) => {
            this.getAllPromoCodesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllPromoCodesWithCallbacks(onSuccess?: (result: PromoCode[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetAllPromoCodes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllPromoCodesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllPromoCodesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllPromoCodesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllPromoCodes(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllPromoCodes(xhr: any): PromoCode[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PromoCode[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PromoCode.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @code (optional) 
     * @return Success
     */
    savePromoCode(code?: PromoCode) {
        return new Promise<PromoCode>((resolve, reject) => {
            this.savePromoCodeWithCallbacks(code, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private savePromoCodeWithCallbacks(code: PromoCode, onSuccess?: (result: PromoCode) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/SavePromoCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(code ? code.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSavePromoCodeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSavePromoCodeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSavePromoCodeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSavePromoCode(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSavePromoCode(xhr: any): PromoCode {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PromoCode = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PromoCode.fromJS(resultData200) : new PromoCode();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @code (optional) 
     * @return Success
     */
    deletePromoCode(code?: PromoCode) {
        return new Promise<void>((resolve, reject) => {
            this.deletePromoCodeWithCallbacks(code, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deletePromoCodeWithCallbacks(code: PromoCode, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeletePromoCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(code ? code.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeletePromoCodeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeletePromoCodeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeletePromoCodeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeletePromoCode(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeletePromoCode(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getBillingReleaseLimits() {
        return new Promise<BillingReleaseLimit[]>((resolve, reject) => {
            this.getBillingReleaseLimitsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getBillingReleaseLimitsWithCallbacks(onSuccess?: (result: BillingReleaseLimit[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetBillingReleaseLimits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetBillingReleaseLimitsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetBillingReleaseLimitsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetBillingReleaseLimitsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetBillingReleaseLimits(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetBillingReleaseLimits(xhr: any): BillingReleaseLimit[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BillingReleaseLimit[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(BillingReleaseLimit.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @limit (optional) 
     * @return Success
     */
    saveBillingReleaseLimit(limit?: BillingReleaseLimit) {
        return new Promise<BillingReleaseLimit>((resolve, reject) => {
            this.saveBillingReleaseLimitWithCallbacks(limit, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private saveBillingReleaseLimitWithCallbacks(limit: BillingReleaseLimit, onSuccess?: (result: BillingReleaseLimit) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/SaveBillingReleaseLimit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(limit ? limit.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSaveBillingReleaseLimitWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSaveBillingReleaseLimitWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSaveBillingReleaseLimitWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSaveBillingReleaseLimit(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSaveBillingReleaseLimit(xhr: any): BillingReleaseLimit {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: BillingReleaseLimit = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BillingReleaseLimit.fromJS(resultData200) : new BillingReleaseLimit();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteBillingReleaseLimit(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteBillingReleaseLimitWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteBillingReleaseLimitWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeleteBillingReleaseLimit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteBillingReleaseLimitWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteBillingReleaseLimitWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteBillingReleaseLimitWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteBillingReleaseLimit(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteBillingReleaseLimit(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getTermsOfDeliveries() {
        return new Promise<TermsOfDelivery[]>((resolve, reject) => {
            this.getTermsOfDeliveriesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTermsOfDeliveriesWithCallbacks(onSuccess?: (result: TermsOfDelivery[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetTermsOfDeliveries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTermsOfDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTermsOfDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTermsOfDeliveriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTermsOfDeliveries(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTermsOfDeliveries(xhr: any): TermsOfDelivery[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfDelivery[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TermsOfDelivery.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    saveTermsOfDelivery(model?: TermsOfDelivery) {
        return new Promise<TermsOfDelivery>((resolve, reject) => {
            this.saveTermsOfDeliveryWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private saveTermsOfDeliveryWithCallbacks(model: TermsOfDelivery, onSuccess?: (result: TermsOfDelivery) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/SaveTermsOfDelivery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSaveTermsOfDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSaveTermsOfDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSaveTermsOfDeliveryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSaveTermsOfDelivery(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSaveTermsOfDelivery(xhr: any): TermsOfDelivery {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfDelivery = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TermsOfDelivery.fromJS(resultData200) : new TermsOfDelivery();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteTermsOfDelivery(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteTermsOfDeliveryWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteTermsOfDeliveryWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeleteTermsOfDelivery?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteTermsOfDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteTermsOfDeliveryWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteTermsOfDeliveryWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteTermsOfDelivery(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteTermsOfDelivery(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getTermsOfPayments() {
        return new Promise<TermsOfPayment[]>((resolve, reject) => {
            this.getTermsOfPaymentsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTermsOfPaymentsWithCallbacks(onSuccess?: (result: TermsOfPayment[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetTermsOfPayments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTermsOfPaymentsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTermsOfPaymentsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTermsOfPaymentsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTermsOfPayments(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTermsOfPayments(xhr: any): TermsOfPayment[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfPayment[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TermsOfPayment.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @termsOfPaymentId (optional) 
     * @return Success
     */
    getTermsOfPaymentDetails(termsOfPaymentId?: string) {
        return new Promise<TermsOfPaymentWithCredentials>((resolve, reject) => {
            this.getTermsOfPaymentDetailsWithCallbacks(termsOfPaymentId, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTermsOfPaymentDetailsWithCallbacks(termsOfPaymentId: string, onSuccess?: (result: TermsOfPaymentWithCredentials) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetTermsOfPaymentDetails?";
        if (termsOfPaymentId !== undefined)
            url_ += "TermsOfPaymentId=" + encodeURIComponent("" + termsOfPaymentId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTermsOfPaymentDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTermsOfPaymentDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTermsOfPaymentDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTermsOfPaymentDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTermsOfPaymentDetails(xhr: any): TermsOfPaymentWithCredentials {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfPaymentWithCredentials = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TermsOfPaymentWithCredentials.fromJS(resultData200) : new TermsOfPaymentWithCredentials();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    saveTermsOfPayment(model?: TermsOfPayment) {
        return new Promise<TermsOfPayment>((resolve, reject) => {
            this.saveTermsOfPaymentWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private saveTermsOfPaymentWithCallbacks(model: TermsOfPayment, onSuccess?: (result: TermsOfPayment) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/SaveTermsOfPayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSaveTermsOfPaymentWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSaveTermsOfPaymentWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSaveTermsOfPaymentWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSaveTermsOfPayment(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSaveTermsOfPayment(xhr: any): TermsOfPayment {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfPayment = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TermsOfPayment.fromJS(resultData200) : new TermsOfPayment();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    saveTermsOfPaymentDetails(model?: TermsOfPaymentWithCredentials) {
        return new Promise<TermsOfPaymentWithCredentials>((resolve, reject) => {
            this.saveTermsOfPaymentDetailsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private saveTermsOfPaymentDetailsWithCallbacks(model: TermsOfPaymentWithCredentials, onSuccess?: (result: TermsOfPaymentWithCredentials) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/SaveTermsOfPaymentDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSaveTermsOfPaymentDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSaveTermsOfPaymentDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSaveTermsOfPaymentDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSaveTermsOfPaymentDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSaveTermsOfPaymentDetails(xhr: any): TermsOfPaymentWithCredentials {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TermsOfPaymentWithCredentials = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TermsOfPaymentWithCredentials.fromJS(resultData200) : new TermsOfPaymentWithCredentials();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteTermsOfPayment(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteTermsOfPaymentWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteTermsOfPaymentWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeleteTermsOfPayment?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteTermsOfPaymentWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteTermsOfPaymentWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteTermsOfPaymentWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteTermsOfPayment(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteTermsOfPayment(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getSystemRoles() {
        return new Promise<SystemRole[]>((resolve, reject) => {
            this.getSystemRolesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSystemRolesWithCallbacks(onSuccess?: (result: SystemRole[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetSystemRoles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSystemRolesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSystemRolesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSystemRolesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSystemRoles(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSystemRoles(xhr: any): SystemRole[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SystemRole[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SystemRole.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postSystemRole(model?: SystemRole) {
        return new Promise<void>((resolve, reject) => {
            this.postSystemRoleWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSystemRoleWithCallbacks(model: SystemRole, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PostSystemRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSystemRoleWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSystemRoleWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSystemRoleWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSystemRole(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSystemRole(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @userid (optional) 
     * @model (optional) 
     * @return Success
     */
    putUserRoles(userid?: number, model?: UpdateUserRolesModel) {
        return new Promise<boolean>((resolve, reject) => {
            this.putUserRolesWithCallbacks(userid, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putUserRolesWithCallbacks(userid: number, model: UpdateUserRolesModel, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutUserRoles?";
        if (userid !== undefined)
            url_ += "userid=" + encodeURIComponent("" + userid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutUserRolesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutUserRolesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutUserRolesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutUserRoles(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutUserRoles(xhr: any): boolean {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllWorkCompensationMultipliers() {
        return new Promise<WorkCompensationMultiplier[]>((resolve, reject) => {
            this.getAllWorkCompensationMultipliersWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWorkCompensationMultipliersWithCallbacks(onSuccess?: (result: WorkCompensationMultiplier[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetAllWorkCompensationMultipliers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWorkCompensationMultipliersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWorkCompensationMultipliersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWorkCompensationMultipliersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllWorkCompensationMultipliers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllWorkCompensationMultipliers(xhr: any): WorkCompensationMultiplier[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkCompensationMultiplier[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkCompensationMultiplier.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getWorkCompensationMultiplier(id?: number) {
        return new Promise<WorkCompensationMultiplier>((resolve, reject) => {
            this.getWorkCompensationMultiplierWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkCompensationMultiplierWithCallbacks(id: number, onSuccess?: (result: WorkCompensationMultiplier) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetWorkCompensationMultiplier?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkCompensationMultiplierWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkCompensationMultiplierWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkCompensationMultiplierWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkCompensationMultiplier(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkCompensationMultiplier(xhr: any): WorkCompensationMultiplier {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkCompensationMultiplier = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkCompensationMultiplier.fromJS(resultData200) : new WorkCompensationMultiplier();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postWorkCompensationMultipliers(model?: WorkCompensationMultiplier) {
        return new Promise<void>((resolve, reject) => {
            this.postWorkCompensationMultipliersWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWorkCompensationMultipliersWithCallbacks(model: WorkCompensationMultiplier, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PostWorkCompensationMultipliers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWorkCompensationMultipliersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWorkCompensationMultipliersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWorkCompensationMultipliersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostWorkCompensationMultipliers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostWorkCompensationMultipliers(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putWorkCompensationMultipliers(id?: number, model?: WorkCompensationMultiplier) {
        return new Promise<void>((resolve, reject) => {
            this.putWorkCompensationMultipliersWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWorkCompensationMultipliersWithCallbacks(id: number, model: WorkCompensationMultiplier, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutWorkCompensationMultipliers?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWorkCompensationMultipliersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWorkCompensationMultipliersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWorkCompensationMultipliersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutWorkCompensationMultipliers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutWorkCompensationMultipliers(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteWorkCompensationMultipliers(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWorkCompensationMultipliersWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWorkCompensationMultipliersWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeleteWorkCompensationMultipliers?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWorkCompensationMultipliersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWorkCompensationMultipliersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWorkCompensationMultipliersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteWorkCompensationMultipliers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteWorkCompensationMultipliers(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getAllDefaultPriceProfiles() {
        return new Promise<DefaultPriceProfile[]>((resolve, reject) => {
            this.getAllDefaultPriceProfilesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllDefaultPriceProfilesWithCallbacks(onSuccess?: (result: DefaultPriceProfile[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetAllDefaultPriceProfiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllDefaultPriceProfilesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllDefaultPriceProfilesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllDefaultPriceProfilesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllDefaultPriceProfiles(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllDefaultPriceProfiles(xhr: any): DefaultPriceProfile[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfile[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DefaultPriceProfile.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getDefaultPriceProfile(id?: number) {
        return new Promise<DefaultPriceProfile>((resolve, reject) => {
            this.getDefaultPriceProfileWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDefaultPriceProfileWithCallbacks(id: number, onSuccess?: (result: DefaultPriceProfile) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetDefaultPriceProfile?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDefaultPriceProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDefaultPriceProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDefaultPriceProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDefaultPriceProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDefaultPriceProfile(xhr: any): DefaultPriceProfile {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfile = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DefaultPriceProfile.fromJS(resultData200) : new DefaultPriceProfile();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postDefaultPriceProfile(model?: DefaultPriceProfile) {
        return new Promise<void>((resolve, reject) => {
            this.postDefaultPriceProfileWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postDefaultPriceProfileWithCallbacks(model: DefaultPriceProfile, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PostDefaultPriceProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostDefaultPriceProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostDefaultPriceProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostDefaultPriceProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostDefaultPriceProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostDefaultPriceProfile(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putDefaultPriceProfile(id?: number, model?: DefaultPriceProfile) {
        return new Promise<void>((resolve, reject) => {
            this.putDefaultPriceProfileWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putDefaultPriceProfileWithCallbacks(id: number, model: DefaultPriceProfile, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutDefaultPriceProfile?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutDefaultPriceProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutDefaultPriceProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutDefaultPriceProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutDefaultPriceProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutDefaultPriceProfile(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteDefaultPriceProfile(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteDefaultPriceProfileWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteDefaultPriceProfileWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeleteDefaultPriceProfile?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteDefaultPriceProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteDefaultPriceProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteDefaultPriceProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteDefaultPriceProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteDefaultPriceProfile(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @defaultPriceProfileId (optional) 
     * @return Success
     */
    getDefaultPriceProfileTimeGroups(defaultPriceProfileId?: number) {
        return new Promise<DefaultPriceProfileTimeGroup[]>((resolve, reject) => {
            this.getDefaultPriceProfileTimeGroupsWithCallbacks(defaultPriceProfileId, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDefaultPriceProfileTimeGroupsWithCallbacks(defaultPriceProfileId: number, onSuccess?: (result: DefaultPriceProfileTimeGroup[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetDefaultPriceProfileTimeGroups?";
        if (defaultPriceProfileId !== undefined)
            url_ += "DefaultPriceProfileId=" + encodeURIComponent("" + defaultPriceProfileId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDefaultPriceProfileTimeGroupsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDefaultPriceProfileTimeGroupsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDefaultPriceProfileTimeGroupsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDefaultPriceProfileTimeGroups(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDefaultPriceProfileTimeGroups(xhr: any): DefaultPriceProfileTimeGroup[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfileTimeGroup[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DefaultPriceProfileTimeGroup.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getDefaultPriceProfileTimeGroup(id?: number) {
        return new Promise<DefaultPriceProfileTimeGroup>((resolve, reject) => {
            this.getDefaultPriceProfileTimeGroupWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDefaultPriceProfileTimeGroupWithCallbacks(id: number, onSuccess?: (result: DefaultPriceProfileTimeGroup) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetDefaultPriceProfileTimeGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDefaultPriceProfileTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDefaultPriceProfileTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDefaultPriceProfileTimeGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDefaultPriceProfileTimeGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDefaultPriceProfileTimeGroup(xhr: any): DefaultPriceProfileTimeGroup {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfileTimeGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DefaultPriceProfileTimeGroup.fromJS(resultData200) : new DefaultPriceProfileTimeGroup();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postDefaultPriceProfileTimeGroup(model?: DefaultPriceProfileTimeGroup) {
        return new Promise<void>((resolve, reject) => {
            this.postDefaultPriceProfileTimeGroupWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postDefaultPriceProfileTimeGroupWithCallbacks(model: DefaultPriceProfileTimeGroup, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PostDefaultPriceProfileTimeGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostDefaultPriceProfileTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostDefaultPriceProfileTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostDefaultPriceProfileTimeGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostDefaultPriceProfileTimeGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostDefaultPriceProfileTimeGroup(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putDefaultPriceProfileTimeGroup(id?: number, model?: DefaultPriceProfileTimeGroup) {
        return new Promise<void>((resolve, reject) => {
            this.putDefaultPriceProfileTimeGroupWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putDefaultPriceProfileTimeGroupWithCallbacks(id: number, model: DefaultPriceProfileTimeGroup, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutDefaultPriceProfileTimeGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutDefaultPriceProfileTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutDefaultPriceProfileTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutDefaultPriceProfileTimeGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutDefaultPriceProfileTimeGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutDefaultPriceProfileTimeGroup(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteDefaultPriceProfileTimeGroup(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteDefaultPriceProfileTimeGroupWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteDefaultPriceProfileTimeGroupWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeleteDefaultPriceProfileTimeGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteDefaultPriceProfileTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteDefaultPriceProfileTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteDefaultPriceProfileTimeGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteDefaultPriceProfileTimeGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteDefaultPriceProfileTimeGroup(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getAccountConfig() {
        return new Promise<AccountConfig>((resolve, reject) => {
            this.getAccountConfigWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAccountConfigWithCallbacks(onSuccess?: (result: AccountConfig) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetAccountConfig";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAccountConfigWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAccountConfigWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAccountConfigWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAccountConfig(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAccountConfig(xhr: any): AccountConfig {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AccountConfig = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AccountConfig.fromJS(resultData200) : new AccountConfig();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putAccountConfig(id?: string, model?: AccountConfig) {
        return new Promise<AccountConfig>((resolve, reject) => {
            this.putAccountConfigWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putAccountConfigWithCallbacks(id: string, model: AccountConfig, onSuccess?: (result: AccountConfig) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutAccountConfig?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutAccountConfigWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutAccountConfigWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutAccountConfigWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutAccountConfig(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutAccountConfig(xhr: any): AccountConfig {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: AccountConfig = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AccountConfig.fromJS(resultData200) : new AccountConfig();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getPersonalConfig() {
        return new Promise<PersonalConfig>((resolve, reject) => {
            this.getPersonalConfigWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPersonalConfigWithCallbacks(onSuccess?: (result: PersonalConfig) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetPersonalConfig";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPersonalConfigWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPersonalConfigWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPersonalConfigWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPersonalConfig(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPersonalConfig(xhr: any): PersonalConfig {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonalConfig = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonalConfig.fromJS(resultData200) : new PersonalConfig();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putPersonalConfig(id?: string, model?: PersonalConfig) {
        return new Promise<PersonalConfig>((resolve, reject) => {
            this.putPersonalConfigWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putPersonalConfigWithCallbacks(id: string, model: PersonalConfig, onSuccess?: (result: PersonalConfig) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutPersonalConfig?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutPersonalConfigWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutPersonalConfigWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutPersonalConfigWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutPersonalConfig(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutPersonalConfig(xhr: any): PersonalConfig {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonalConfig = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonalConfig.fromJS(resultData200) : new PersonalConfig();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getConfigOptions() {
        return new Promise<ConfigOptions>((resolve, reject) => {
            this.getConfigOptionsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getConfigOptionsWithCallbacks(onSuccess?: (result: ConfigOptions) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetConfigOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetConfigOptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetConfigOptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetConfigOptionsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetConfigOptions(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetConfigOptions(xhr: any): ConfigOptions {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ConfigOptions = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ConfigOptions.fromJS(resultData200) : new ConfigOptions();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllEventSubscribers() {
        return new Promise<EventSubscriberDescriptions[]>((resolve, reject) => {
            this.getAllEventSubscribersWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllEventSubscribersWithCallbacks(onSuccess?: (result: EventSubscriberDescriptions[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetAllEventSubscribers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllEventSubscribersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllEventSubscribersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllEventSubscribersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllEventSubscribers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllEventSubscribers(xhr: any): EventSubscriberDescriptions[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: EventSubscriberDescriptions[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(EventSubscriberDescriptions.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putEventSubscriberDescription(id?: string, model?: EventSubscriberDescription) {
        return new Promise<EventSubscriberDescription>((resolve, reject) => {
            this.putEventSubscriberDescriptionWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putEventSubscriberDescriptionWithCallbacks(id: string, model: EventSubscriberDescription, onSuccess?: (result: EventSubscriberDescription) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutEventSubscriberDescription?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutEventSubscriberDescriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutEventSubscriberDescriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutEventSubscriberDescriptionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutEventSubscriberDescription(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutEventSubscriberDescription(xhr: any): EventSubscriberDescription {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: EventSubscriberDescription = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EventSubscriberDescription.fromJS(resultData200) : new EventSubscriberDescription();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    regenerateEventSubscriberDescription(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.regenerateEventSubscriberDescriptionWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private regenerateEventSubscriberDescriptionWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/RegenerateEventSubscriberDescription?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processRegenerateEventSubscriberDescriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processRegenerateEventSubscriberDescriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processRegenerateEventSubscriberDescriptionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processRegenerateEventSubscriberDescription(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processRegenerateEventSubscriberDescription(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getCustomGroups() {
        return new Promise<CustomGroup[]>((resolve, reject) => {
            this.getCustomGroupsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getCustomGroupsWithCallbacks(onSuccess?: (result: CustomGroup[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetCustomGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetCustomGroupsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetCustomGroupsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetCustomGroupsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetCustomGroups(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetCustomGroups(xhr: any): CustomGroup[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CustomGroup[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CustomGroup.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @itemtype (optional) 
     * @return Success
     */
    getCustomGroupsForType(itemtype?: string) {
        return new Promise<CustomGroup[]>((resolve, reject) => {
            this.getCustomGroupsForTypeWithCallbacks(itemtype, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getCustomGroupsForTypeWithCallbacks(itemtype: string, onSuccess?: (result: CustomGroup[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetCustomGroupsForType?";
        if (itemtype !== undefined)
            url_ += "itemtype=" + encodeURIComponent("" + itemtype) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetCustomGroupsForTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetCustomGroupsForTypeWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetCustomGroupsForTypeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetCustomGroupsForType(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetCustomGroupsForType(xhr: any): CustomGroup[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CustomGroup[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CustomGroup.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getCustomGroup(id?: number) {
        return new Promise<CustomGroup>((resolve, reject) => {
            this.getCustomGroupWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getCustomGroupWithCallbacks(id: number, onSuccess?: (result: CustomGroup) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/GetCustomGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetCustomGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetCustomGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetCustomGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetCustomGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetCustomGroup(xhr: any): CustomGroup {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CustomGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomGroup.fromJS(resultData200) : new CustomGroup();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postCustomGroup(model?: CustomGroup) {
        return new Promise<CustomGroup>((resolve, reject) => {
            this.postCustomGroupWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postCustomGroupWithCallbacks(model: CustomGroup, onSuccess?: (result: CustomGroup) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PostCustomGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostCustomGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostCustomGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostCustomGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostCustomGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostCustomGroup(xhr: any): CustomGroup {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CustomGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomGroup.fromJS(resultData200) : new CustomGroup();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putCustomGroup(id?: number, model?: CustomGroup) {
        return new Promise<CustomGroup>((resolve, reject) => {
            this.putCustomGroupWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putCustomGroupWithCallbacks(id: number, model: CustomGroup, onSuccess?: (result: CustomGroup) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/PutCustomGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutCustomGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutCustomGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutCustomGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutCustomGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutCustomGroup(xhr: any): CustomGroup {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CustomGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomGroup.fromJS(resultData200) : new CustomGroup();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteCustomGroup(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteCustomGroupWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteCustomGroupWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Setting/DeleteCustomGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteCustomGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteCustomGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteCustomGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteCustomGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteCustomGroup(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface ISignatureClient {
    /**
     * @return Success
     */
    get(): Promise<Signature>;
    /**
     * @id (optional) 
     * @signature (optional) 
     * @return Success
     */
    put(id?: string, signature?: Signature): Promise<Signature>;
}

export class SignatureClient extends base.CoreApiBaseClient implements ISignatureClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    get() {
        return new Promise<Signature>((resolve, reject) => {
            this.getWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(onSuccess?: (result: Signature) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Signature/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Signature {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Signature = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Signature.fromJS(resultData200) : new Signature();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @signature (optional) 
     * @return Success
     */
    put(id?: string, signature?: Signature) {
        return new Promise<Signature>((resolve, reject) => {
            this.putWithCallbacks(id, signature, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, signature: Signature, onSuccess?: (result: Signature) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Signature/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(signature ? signature.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): Signature {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Signature = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Signature.fromJS(resultData200) : new Signature();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface ISubscriptionClient {
    /**
     * @searchstr (optional) 
     * @return Success
     */
    getActiveSubscriptions(searchstr?: string): Promise<SubscriptionOptimizedDescription[]>;
    /**
     * @searchstr (optional) 
     * @return Success
     */
    getEndedSubscriptions(searchstr?: string): Promise<SubscriptionOptimizedDescription[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: number): Promise<Subscription>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Subscription): Promise<Subscription>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Subscription): Promise<Subscription>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteSubscriptionAndDeliveries(id?: number): Promise<boolean>;
    /**
     * @id (optional) 
     * @enddate (optional) 
     * @return Success
     */
    postEndSubscription(id?: number, enddate?: Date): Promise<void>;
    /**
     * @subscriptionid (optional) 
     * @return Success
     */
    getSubscriptionCreationDetails(subscriptionid?: number): Promise<CreateOrEditDetails>;
}

export class SubscriptionClient extends base.CoreApiBaseClient implements ISubscriptionClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @searchstr (optional) 
     * @return Success
     */
    getActiveSubscriptions(searchstr?: string) {
        return new Promise<SubscriptionOptimizedDescription[]>((resolve, reject) => {
            this.getActiveSubscriptionsWithCallbacks(searchstr, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getActiveSubscriptionsWithCallbacks(searchstr: string, onSuccess?: (result: SubscriptionOptimizedDescription[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Subscription/GetActiveSubscriptions?";
        if (searchstr !== undefined)
            url_ += "searchstr=" + encodeURIComponent("" + searchstr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetActiveSubscriptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetActiveSubscriptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetActiveSubscriptionsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetActiveSubscriptions(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetActiveSubscriptions(xhr: any): SubscriptionOptimizedDescription[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SubscriptionOptimizedDescription[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SubscriptionOptimizedDescription.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @searchstr (optional) 
     * @return Success
     */
    getEndedSubscriptions(searchstr?: string) {
        return new Promise<SubscriptionOptimizedDescription[]>((resolve, reject) => {
            this.getEndedSubscriptionsWithCallbacks(searchstr, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getEndedSubscriptionsWithCallbacks(searchstr: string, onSuccess?: (result: SubscriptionOptimizedDescription[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Subscription/GetEndedSubscriptions?";
        if (searchstr !== undefined)
            url_ += "searchstr=" + encodeURIComponent("" + searchstr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetEndedSubscriptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetEndedSubscriptionsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetEndedSubscriptionsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetEndedSubscriptions(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetEndedSubscriptions(xhr: any): SubscriptionOptimizedDescription[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SubscriptionOptimizedDescription[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SubscriptionOptimizedDescription.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: number) {
        return new Promise<Subscription>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: number, onSuccess?: (result: Subscription) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Subscription/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Subscription {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Subscription = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Subscription.fromJS(resultData200) : new Subscription();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Subscription) {
        return new Promise<Subscription>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: Subscription, onSuccess?: (result: Subscription) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Subscription/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): Subscription {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Subscription = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Subscription.fromJS(resultData200) : new Subscription();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: Subscription) {
        return new Promise<Subscription>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: Subscription, onSuccess?: (result: Subscription) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Subscription/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): Subscription {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Subscription = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Subscription.fromJS(resultData200) : new Subscription();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteSubscriptionAndDeliveries(id?: number) {
        return new Promise<boolean>((resolve, reject) => {
            this.deleteSubscriptionAndDeliveriesWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteSubscriptionAndDeliveriesWithCallbacks(id: number, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Subscription/DeleteSubscriptionAndDeliveries?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteSubscriptionAndDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteSubscriptionAndDeliveriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteSubscriptionAndDeliveriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteSubscriptionAndDeliveries(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteSubscriptionAndDeliveries(xhr: any): boolean {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @enddate (optional) 
     * @return Success
     */
    postEndSubscription(id?: number, enddate?: Date) {
        return new Promise<void>((resolve, reject) => {
            this.postEndSubscriptionWithCallbacks(id, enddate, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postEndSubscriptionWithCallbacks(id: number, enddate: Date, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Subscription/PostEndSubscription?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(enddate);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostEndSubscriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostEndSubscriptionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostEndSubscriptionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostEndSubscription(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostEndSubscription(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @subscriptionid (optional) 
     * @return Success
     */
    getSubscriptionCreationDetails(subscriptionid?: number) {
        return new Promise<CreateOrEditDetails>((resolve, reject) => {
            this.getSubscriptionCreationDetailsWithCallbacks(subscriptionid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSubscriptionCreationDetailsWithCallbacks(subscriptionid: number, onSuccess?: (result: CreateOrEditDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Subscription/GetSubscriptionCreationDetails?";
        if (subscriptionid !== undefined)
            url_ += "subscriptionid=" + encodeURIComponent("" + subscriptionid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSubscriptionCreationDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSubscriptionCreationDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSubscriptionCreationDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSubscriptionCreationDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSubscriptionCreationDetails(xhr: any): CreateOrEditDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CreateOrEditDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CreateOrEditDetails.fromJS(resultData200) : new CreateOrEditDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface ISubscriptionOptionClient {
    /**
     * @forpostno (optional) 
     * @forproductid (optional) 
     * @return Success
     */
    allIncludingAvailableProducts(forpostno?: string, forproductid?: string): Promise<ProductSubscriptionOptionDetails[]>;
    /**
     * @productsubscriptionoptionid (optional) 
     * @return Success
     */
    getPossibleSubscriptionOptionDeliveryDaysRegardingOrderLockout(productsubscriptionoptionid?: number): Promise<string[]>;
}

export class SubscriptionOptionClient extends base.CoreApiBaseClient implements ISubscriptionOptionClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @forpostno (optional) 
     * @forproductid (optional) 
     * @return Success
     */
    allIncludingAvailableProducts(forpostno?: string, forproductid?: string) {
        return new Promise<ProductSubscriptionOptionDetails[]>((resolve, reject) => {
            this.allIncludingAvailableProductsWithCallbacks(forpostno, forproductid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private allIncludingAvailableProductsWithCallbacks(forpostno: string, forproductid: string, onSuccess?: (result: ProductSubscriptionOptionDetails[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/SubscriptionOption/AllIncludingAvailableProducts?";
        if (forpostno !== undefined)
            url_ += "forpostno=" + encodeURIComponent("" + forpostno) + "&";
        if (forproductid !== undefined)
            url_ += "forproductid=" + encodeURIComponent("" + forproductid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAllIncludingAvailableProductsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAllIncludingAvailableProductsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAllIncludingAvailableProductsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAllIncludingAvailableProducts(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAllIncludingAvailableProducts(xhr: any): ProductSubscriptionOptionDetails[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ProductSubscriptionOptionDetails[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ProductSubscriptionOptionDetails.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @productsubscriptionoptionid (optional) 
     * @return Success
     */
    getPossibleSubscriptionOptionDeliveryDaysRegardingOrderLockout(productsubscriptionoptionid?: number) {
        return new Promise<string[]>((resolve, reject) => {
            this.getPossibleSubscriptionOptionDeliveryDaysRegardingOrderLockoutWithCallbacks(productsubscriptionoptionid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPossibleSubscriptionOptionDeliveryDaysRegardingOrderLockoutWithCallbacks(productsubscriptionoptionid: number, onSuccess?: (result: string[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/open/SubscriptionOption/GetPossibleSubscriptionOptionDeliveryDaysRegardingOrderLockout?";
        if (productsubscriptionoptionid !== undefined)
            url_ += "productsubscriptionoptionid=" + encodeURIComponent("" + productsubscriptionoptionid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPossibleSubscriptionOptionDeliveryDaysRegardingOrderLockoutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPossibleSubscriptionOptionDeliveryDaysRegardingOrderLockoutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPossibleSubscriptionOptionDeliveryDaysRegardingOrderLockoutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPossibleSubscriptionOptionDeliveryDaysRegardingOrderLockout(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPossibleSubscriptionOptionDeliveryDaysRegardingOrderLockout(xhr: any): string[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface ITeamClient {
    /**
     * @return Success
     */
    getAll(): Promise<Team[]>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: Team): Promise<Team>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
    /**
     * @teamid (optional) 
     * @return Success
     */
    getTeamMembers(teamid?: string): Promise<Person[]>;
    /**
     * @personid (optional) 
     * @return Success
     */
    getTeamsForPerson(personid?: string): Promise<Team[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    addTeamMemberMapping(model?: TeamMemberMapping): Promise<TeamMemberMapping>;
    /**
     * @teamid (optional) 
     * @personid (optional) 
     * @return Success
     */
    removeTeamMemberMapping(teamid?: string, personid?: string): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<Team>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Team): Promise<Team>;
}

export class TeamClient extends base.CoreApiBaseClient implements ITeamClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<Team[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: Team[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Team/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): Team[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Team[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Team.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: Team) {
        return new Promise<Team>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: Team, onSuccess?: (result: Team) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Team/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): Team {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Team = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Team.fromJS(resultData200) : new Team();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Team/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @teamid (optional) 
     * @return Success
     */
    getTeamMembers(teamid?: string) {
        return new Promise<Person[]>((resolve, reject) => {
            this.getTeamMembersWithCallbacks(teamid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTeamMembersWithCallbacks(teamid: string, onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Team/GetTeamMembers?";
        if (teamid !== undefined)
            url_ += "teamid=" + encodeURIComponent("" + teamid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTeamMembersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTeamMembersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTeamMembersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTeamMembers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTeamMembers(xhr: any): Person[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Person[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    getTeamsForPerson(personid?: string) {
        return new Promise<Team[]>((resolve, reject) => {
            this.getTeamsForPersonWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTeamsForPersonWithCallbacks(personid: string, onSuccess?: (result: Team[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Team/GetTeamsForPerson?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTeamsForPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTeamsForPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTeamsForPersonWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTeamsForPerson(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTeamsForPerson(xhr: any): Team[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Team[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Team.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    addTeamMemberMapping(model?: TeamMemberMapping) {
        return new Promise<TeamMemberMapping>((resolve, reject) => {
            this.addTeamMemberMappingWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private addTeamMemberMappingWithCallbacks(model: TeamMemberMapping, onSuccess?: (result: TeamMemberMapping) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Team/AddTeamMemberMapping";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processAddTeamMemberMappingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAddTeamMemberMappingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processAddTeamMemberMappingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAddTeamMemberMapping(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAddTeamMemberMapping(xhr: any): TeamMemberMapping {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TeamMemberMapping = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TeamMemberMapping.fromJS(resultData200) : new TeamMemberMapping();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @teamid (optional) 
     * @personid (optional) 
     * @return Success
     */
    removeTeamMemberMapping(teamid?: string, personid?: string) {
        return new Promise<void>((resolve, reject) => {
            this.removeTeamMemberMappingWithCallbacks(teamid, personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private removeTeamMemberMappingWithCallbacks(teamid: string, personid: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Team/RemoveTeamMemberMapping?";
        if (teamid !== undefined)
            url_ += "teamid=" + encodeURIComponent("" + teamid) + "&";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processRemoveTeamMemberMappingWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processRemoveTeamMemberMappingWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processRemoveTeamMemberMappingWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processRemoveTeamMemberMapping(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processRemoveTeamMemberMapping(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<Team>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: Team) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Team/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): Team {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Team = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Team.fromJS(resultData200) : new Team();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: Team) {
        return new Promise<Team>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: Team, onSuccess?: (result: Team) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Team/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): Team {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Team = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Team.fromJS(resultData200) : new Team();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface ITemplateClient {
    /**
     * @forviewmodelname (optional) 
     * @return Success
     */
    getLiquidTemplates(forviewmodelname?: string): Promise<TemplateListItem[]>;
    /**
     * @return Success
     */
    getPrintableTemplateNamesForWorkItems(): Promise<TemplateListItem[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getTemplateDetails(id?: number): Promise<Template>;
    /**
     * @model (optional) 
     * @return Success
     */
    parseTemplateAndWorkItems(model?: ParseTemplateWorkItemsModel): Promise<string>;
    /**
     * @model (optional) 
     * @return Success
     */
    parseTemplateAndWorkItem(model?: ParseTemplateWorkItemModel): Promise<string>;
    /**
     * @model (optional) 
     * @return Success
     */
    parseTemplateAndWorkAd(model?: ParseTemplateWorkAdModel): Promise<ParseTemplateResult>;
    /**
     * @spec (optional) 
     * @return Success
     */
    parseLiquidTemplateAndDynamicModel(spec?: ParseTemplateDynamicModel): Promise<string>;
    /**
     * @spec (optional) 
     * @return Success
     */
    parseRazorTemplateAndDynamicModel(spec?: ParseTemplateDynamicModel): Promise<string>;
}

export class TemplateClient extends base.CoreApiBaseClient implements ITemplateClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @forviewmodelname (optional) 
     * @return Success
     */
    getLiquidTemplates(forviewmodelname?: string) {
        return new Promise<TemplateListItem[]>((resolve, reject) => {
            this.getLiquidTemplatesWithCallbacks(forviewmodelname, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getLiquidTemplatesWithCallbacks(forviewmodelname: string, onSuccess?: (result: TemplateListItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Template/GetLiquidTemplates?";
        if (forviewmodelname !== undefined)
            url_ += "forviewmodelname=" + encodeURIComponent("" + forviewmodelname) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetLiquidTemplatesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetLiquidTemplatesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetLiquidTemplatesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetLiquidTemplates(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetLiquidTemplates(xhr: any): TemplateListItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TemplateListItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TemplateListItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getPrintableTemplateNamesForWorkItems() {
        return new Promise<TemplateListItem[]>((resolve, reject) => {
            this.getPrintableTemplateNamesForWorkItemsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPrintableTemplateNamesForWorkItemsWithCallbacks(onSuccess?: (result: TemplateListItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Template/GetPrintableTemplateNamesForWorkItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPrintableTemplateNamesForWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPrintableTemplateNamesForWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPrintableTemplateNamesForWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPrintableTemplateNamesForWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPrintableTemplateNamesForWorkItems(xhr: any): TemplateListItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TemplateListItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TemplateListItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getTemplateDetails(id?: number) {
        return new Promise<Template>((resolve, reject) => {
            this.getTemplateDetailsWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTemplateDetailsWithCallbacks(id: number, onSuccess?: (result: Template) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Template/GetTemplateDetails?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTemplateDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTemplateDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTemplateDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTemplateDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTemplateDetails(xhr: any): Template {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Template = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Template.fromJS(resultData200) : new Template();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    parseTemplateAndWorkItems(model?: ParseTemplateWorkItemsModel) {
        return new Promise<string>((resolve, reject) => {
            this.parseTemplateAndWorkItemsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private parseTemplateAndWorkItemsWithCallbacks(model: ParseTemplateWorkItemsModel, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Template/ParseTemplateAndWorkItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processParseTemplateAndWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processParseTemplateAndWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processParseTemplateAndWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processParseTemplateAndWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processParseTemplateAndWorkItems(xhr: any): string {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    parseTemplateAndWorkItem(model?: ParseTemplateWorkItemModel) {
        return new Promise<string>((resolve, reject) => {
            this.parseTemplateAndWorkItemWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private parseTemplateAndWorkItemWithCallbacks(model: ParseTemplateWorkItemModel, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Template/ParseTemplateAndWorkItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processParseTemplateAndWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processParseTemplateAndWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processParseTemplateAndWorkItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processParseTemplateAndWorkItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processParseTemplateAndWorkItem(xhr: any): string {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    parseTemplateAndWorkAd(model?: ParseTemplateWorkAdModel) {
        return new Promise<ParseTemplateResult>((resolve, reject) => {
            this.parseTemplateAndWorkAdWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private parseTemplateAndWorkAdWithCallbacks(model: ParseTemplateWorkAdModel, onSuccess?: (result: ParseTemplateResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Template/ParseTemplateAndWorkAd";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processParseTemplateAndWorkAdWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processParseTemplateAndWorkAdWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processParseTemplateAndWorkAdWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processParseTemplateAndWorkAd(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processParseTemplateAndWorkAd(xhr: any): ParseTemplateResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ParseTemplateResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ParseTemplateResult.fromJS(resultData200) : new ParseTemplateResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @spec (optional) 
     * @return Success
     */
    parseLiquidTemplateAndDynamicModel(spec?: ParseTemplateDynamicModel) {
        return new Promise<string>((resolve, reject) => {
            this.parseLiquidTemplateAndDynamicModelWithCallbacks(spec, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private parseLiquidTemplateAndDynamicModelWithCallbacks(spec: ParseTemplateDynamicModel, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Template/ParseLiquidTemplateAndDynamicModel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(spec ? spec.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processParseLiquidTemplateAndDynamicModelWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processParseLiquidTemplateAndDynamicModelWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processParseLiquidTemplateAndDynamicModelWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processParseLiquidTemplateAndDynamicModel(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processParseLiquidTemplateAndDynamicModel(xhr: any): string {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @spec (optional) 
     * @return Success
     */
    parseRazorTemplateAndDynamicModel(spec?: ParseTemplateDynamicModel) {
        return new Promise<string>((resolve, reject) => {
            this.parseRazorTemplateAndDynamicModelWithCallbacks(spec, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private parseRazorTemplateAndDynamicModelWithCallbacks(spec: ParseTemplateDynamicModel, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Template/ParseRazorTemplateAndDynamicModel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(spec ? spec.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processParseRazorTemplateAndDynamicModelWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processParseRazorTemplateAndDynamicModelWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processParseRazorTemplateAndDynamicModelWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processParseRazorTemplateAndDynamicModel(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processParseRazorTemplateAndDynamicModel(xhr: any): string {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface ITimeGroupClient {
    /**
     * @return Success
     */
    getTimeGroupProfileCustomers(): Promise<TimeGroupProfileCustomer[]>;
    /**
     * @return Success
     */
    getAllProfiles(): Promise<DefaultPriceProfile[]>;
    /**
     * @personid (optional) 
     * @return Success
     */
    getEmployerSpecificAndGeneralProfiles(personid?: string): Promise<DefaultPriceProfile[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getProfilesByCustomer(id?: string): Promise<DefaultPriceProfile[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    searchProfiles(model?: TimeGroupProfileSearchModel): Promise<DefaultPriceProfile[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getProfile(id?: number): Promise<DefaultPriceProfile>;
    /**
     * @model (optional) 
     * @return Success
     */
    postProfile(model?: DefaultPriceProfile): Promise<DefaultPriceProfile>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putProfile(id?: number, model?: DefaultPriceProfile): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteProfile(id?: number): Promise<void>;
    /**
     * @defaultpriceprofileid (optional) 
     * @return Success
     */
    getDefaultPriceProfileBreakLogic(defaultpriceprofileid?: number): Promise<DefaultPriceProfileBreakLogic>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putDefaultPriceProfileBreakLogic(id?: string, model?: DefaultPriceProfileBreakLogic): Promise<DefaultPriceProfileBreakLogic>;
    /**
     * @defaultPriceProfileId (optional) 
     * @return Success
     */
    getTimeGroups(defaultPriceProfileId?: number): Promise<DefaultPriceProfileTimeGroup[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getTimeGroup(id?: number): Promise<DefaultPriceProfileTimeGroup>;
    /**
     * @model (optional) 
     * @return Success
     */
    postTimeGroup(model?: DefaultPriceProfileTimeGroup): Promise<void>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putTimeGroup(id?: number, model?: DefaultPriceProfileTimeGroup): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteTimeGroup(id?: number): Promise<void>;
    /**
     * @return Success
     */
    getTimegroupLogicFromTimes(): Promise<TimeOfDay[]>;
    /**
     * @return Success
     */
    getTimegroupLogicTomTimes(): Promise<TimeOfDay[]>;
    /**
     * @return Success
     */
    getTrackTimeDayTypes(): Promise<DayType[]>;
    /**
     * @defaultPriceProfileTimeGroupId (optional) 
     * @return Success
     */
    getAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileTimeGroupId(defaultPriceProfileTimeGroupId?: number): Promise<TimeGroupRecordDayTimeLogic[]>;
    /**
     * @defaultPriceProfileId (optional) 
     * @return Success
     */
    getAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileId(defaultPriceProfileId?: number): Promise<TimeGroupRecordDayTimeLogic[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getTimeGroupRecordDayTimeLogic(id?: string): Promise<TimeGroupRecordDayTimeLogic>;
    /**
     * @model (optional) 
     * @return Success
     */
    postTimeGroupRecordDayTimeLogic(model?: TimeGroupRecordDayTimeLogic): Promise<TimeGroupRecordDayTimeLogic>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putTimeGroupRecordDayTimeLogic(id?: string, model?: TimeGroupRecordDayTimeLogic): Promise<TimeGroupRecordDayTimeLogic>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteTimeGroupRecordDayTimeLogic(id?: string): Promise<void>;
    /**
     * @return Success
     */
    getSpecialDayTrackTimeDayTypes(): Promise<DayType[]>;
    /**
     * @year (optional) 
     * @return Success
     */
    getSpecialDays(year?: number): Promise<SpecialDay[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getSpecialDay(id?: string): Promise<SpecialDay>;
    /**
     * @model (optional) 
     * @return Success
     */
    postSpecialDay(model?: SpecialDay): Promise<SpecialDay>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putSpecialDay(id?: string, model?: SpecialDay): Promise<SpecialDay>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteSpecialDay(id?: string): Promise<void>;
    /**
     * @defaultpriceprofileid (optional) 
     * @newname (optional) 
     * @return Success
     */
    copyDefaultTimeGroupProfile(defaultpriceprofileid?: number, newname?: string): Promise<DefaultPriceProfile>;
}

export class TimeGroupClient extends base.CoreApiBaseClient implements ITimeGroupClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTimeGroupProfileCustomers() {
        return new Promise<TimeGroupProfileCustomer[]>((resolve, reject) => {
            this.getTimeGroupProfileCustomersWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTimeGroupProfileCustomersWithCallbacks(onSuccess?: (result: TimeGroupProfileCustomer[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetTimeGroupProfileCustomers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTimeGroupProfileCustomersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTimeGroupProfileCustomersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTimeGroupProfileCustomersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTimeGroupProfileCustomers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTimeGroupProfileCustomers(xhr: any): TimeGroupProfileCustomer[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeGroupProfileCustomer[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimeGroupProfileCustomer.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllProfiles() {
        return new Promise<DefaultPriceProfile[]>((resolve, reject) => {
            this.getAllProfilesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllProfilesWithCallbacks(onSuccess?: (result: DefaultPriceProfile[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetAllProfiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllProfilesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllProfilesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllProfilesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllProfiles(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllProfiles(xhr: any): DefaultPriceProfile[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfile[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DefaultPriceProfile.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    getEmployerSpecificAndGeneralProfiles(personid?: string) {
        return new Promise<DefaultPriceProfile[]>((resolve, reject) => {
            this.getEmployerSpecificAndGeneralProfilesWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getEmployerSpecificAndGeneralProfilesWithCallbacks(personid: string, onSuccess?: (result: DefaultPriceProfile[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetEmployerSpecificAndGeneralProfiles?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetEmployerSpecificAndGeneralProfilesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetEmployerSpecificAndGeneralProfilesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetEmployerSpecificAndGeneralProfilesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetEmployerSpecificAndGeneralProfiles(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetEmployerSpecificAndGeneralProfiles(xhr: any): DefaultPriceProfile[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfile[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DefaultPriceProfile.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getProfilesByCustomer(id?: string) {
        return new Promise<DefaultPriceProfile[]>((resolve, reject) => {
            this.getProfilesByCustomerWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getProfilesByCustomerWithCallbacks(id: string, onSuccess?: (result: DefaultPriceProfile[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetProfilesByCustomer?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetProfilesByCustomerWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetProfilesByCustomerWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetProfilesByCustomerWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetProfilesByCustomer(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetProfilesByCustomer(xhr: any): DefaultPriceProfile[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfile[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DefaultPriceProfile.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    searchProfiles(model?: TimeGroupProfileSearchModel) {
        return new Promise<DefaultPriceProfile[]>((resolve, reject) => {
            this.searchProfilesWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private searchProfilesWithCallbacks(model: TimeGroupProfileSearchModel, onSuccess?: (result: DefaultPriceProfile[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/SearchProfiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSearchProfilesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSearchProfilesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSearchProfilesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSearchProfiles(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSearchProfiles(xhr: any): DefaultPriceProfile[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfile[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DefaultPriceProfile.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getProfile(id?: number) {
        return new Promise<DefaultPriceProfile>((resolve, reject) => {
            this.getProfileWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getProfileWithCallbacks(id: number, onSuccess?: (result: DefaultPriceProfile) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetProfile?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetProfile(xhr: any): DefaultPriceProfile {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfile = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DefaultPriceProfile.fromJS(resultData200) : new DefaultPriceProfile();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postProfile(model?: DefaultPriceProfile) {
        return new Promise<DefaultPriceProfile>((resolve, reject) => {
            this.postProfileWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postProfileWithCallbacks(model: DefaultPriceProfile, onSuccess?: (result: DefaultPriceProfile) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/PostProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostProfile(xhr: any): DefaultPriceProfile {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfile = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DefaultPriceProfile.fromJS(resultData200) : new DefaultPriceProfile();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putProfile(id?: number, model?: DefaultPriceProfile) {
        return new Promise<void>((resolve, reject) => {
            this.putProfileWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putProfileWithCallbacks(id: number, model: DefaultPriceProfile, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/PutProfile?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutProfile(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteProfile(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteProfileWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteProfileWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/DeleteProfile?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteProfile(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @defaultpriceprofileid (optional) 
     * @return Success
     */
    getDefaultPriceProfileBreakLogic(defaultpriceprofileid?: number) {
        return new Promise<DefaultPriceProfileBreakLogic>((resolve, reject) => {
            this.getDefaultPriceProfileBreakLogicWithCallbacks(defaultpriceprofileid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDefaultPriceProfileBreakLogicWithCallbacks(defaultpriceprofileid: number, onSuccess?: (result: DefaultPriceProfileBreakLogic) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetDefaultPriceProfileBreakLogic?";
        if (defaultpriceprofileid !== undefined)
            url_ += "defaultpriceprofileid=" + encodeURIComponent("" + defaultpriceprofileid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDefaultPriceProfileBreakLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDefaultPriceProfileBreakLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDefaultPriceProfileBreakLogicWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDefaultPriceProfileBreakLogic(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDefaultPriceProfileBreakLogic(xhr: any): DefaultPriceProfileBreakLogic {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfileBreakLogic = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DefaultPriceProfileBreakLogic.fromJS(resultData200) : new DefaultPriceProfileBreakLogic();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putDefaultPriceProfileBreakLogic(id?: string, model?: DefaultPriceProfileBreakLogic) {
        return new Promise<DefaultPriceProfileBreakLogic>((resolve, reject) => {
            this.putDefaultPriceProfileBreakLogicWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putDefaultPriceProfileBreakLogicWithCallbacks(id: string, model: DefaultPriceProfileBreakLogic, onSuccess?: (result: DefaultPriceProfileBreakLogic) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/PutDefaultPriceProfileBreakLogic?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutDefaultPriceProfileBreakLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutDefaultPriceProfileBreakLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutDefaultPriceProfileBreakLogicWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutDefaultPriceProfileBreakLogic(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutDefaultPriceProfileBreakLogic(xhr: any): DefaultPriceProfileBreakLogic {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfileBreakLogic = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DefaultPriceProfileBreakLogic.fromJS(resultData200) : new DefaultPriceProfileBreakLogic();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @defaultPriceProfileId (optional) 
     * @return Success
     */
    getTimeGroups(defaultPriceProfileId?: number) {
        return new Promise<DefaultPriceProfileTimeGroup[]>((resolve, reject) => {
            this.getTimeGroupsWithCallbacks(defaultPriceProfileId, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTimeGroupsWithCallbacks(defaultPriceProfileId: number, onSuccess?: (result: DefaultPriceProfileTimeGroup[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetTimeGroups?";
        if (defaultPriceProfileId !== undefined)
            url_ += "DefaultPriceProfileId=" + encodeURIComponent("" + defaultPriceProfileId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTimeGroupsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTimeGroupsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTimeGroupsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTimeGroups(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTimeGroups(xhr: any): DefaultPriceProfileTimeGroup[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfileTimeGroup[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DefaultPriceProfileTimeGroup.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getTimeGroup(id?: number) {
        return new Promise<DefaultPriceProfileTimeGroup>((resolve, reject) => {
            this.getTimeGroupWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTimeGroupWithCallbacks(id: number, onSuccess?: (result: DefaultPriceProfileTimeGroup) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetTimeGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTimeGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTimeGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTimeGroup(xhr: any): DefaultPriceProfileTimeGroup {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfileTimeGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DefaultPriceProfileTimeGroup.fromJS(resultData200) : new DefaultPriceProfileTimeGroup();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postTimeGroup(model?: DefaultPriceProfileTimeGroup) {
        return new Promise<void>((resolve, reject) => {
            this.postTimeGroupWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postTimeGroupWithCallbacks(model: DefaultPriceProfileTimeGroup, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/PostTimeGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostTimeGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostTimeGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostTimeGroup(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putTimeGroup(id?: number, model?: DefaultPriceProfileTimeGroup) {
        return new Promise<void>((resolve, reject) => {
            this.putTimeGroupWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putTimeGroupWithCallbacks(id: number, model: DefaultPriceProfileTimeGroup, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/PutTimeGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutTimeGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutTimeGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutTimeGroup(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteTimeGroup(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteTimeGroupWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteTimeGroupWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/DeleteTimeGroup?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteTimeGroupWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteTimeGroupWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteTimeGroup(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteTimeGroup(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getTimegroupLogicFromTimes() {
        return new Promise<TimeOfDay[]>((resolve, reject) => {
            this.getTimegroupLogicFromTimesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTimegroupLogicFromTimesWithCallbacks(onSuccess?: (result: TimeOfDay[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetTimegroupLogicFromTimes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTimegroupLogicFromTimesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTimegroupLogicFromTimesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTimegroupLogicFromTimesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTimegroupLogicFromTimes(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTimegroupLogicFromTimes(xhr: any): TimeOfDay[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeOfDay[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimeOfDay.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getTimegroupLogicTomTimes() {
        return new Promise<TimeOfDay[]>((resolve, reject) => {
            this.getTimegroupLogicTomTimesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTimegroupLogicTomTimesWithCallbacks(onSuccess?: (result: TimeOfDay[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetTimegroupLogicTomTimes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTimegroupLogicTomTimesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTimegroupLogicTomTimesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTimegroupLogicTomTimesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTimegroupLogicTomTimes(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTimegroupLogicTomTimes(xhr: any): TimeOfDay[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeOfDay[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimeOfDay.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getTrackTimeDayTypes() {
        return new Promise<DayType[]>((resolve, reject) => {
            this.getTrackTimeDayTypesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTrackTimeDayTypesWithCallbacks(onSuccess?: (result: DayType[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetTrackTimeDayTypes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTrackTimeDayTypesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTrackTimeDayTypesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTrackTimeDayTypesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTrackTimeDayTypes(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTrackTimeDayTypes(xhr: any): DayType[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DayType[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DayType.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @defaultPriceProfileTimeGroupId (optional) 
     * @return Success
     */
    getAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileTimeGroupId(defaultPriceProfileTimeGroupId?: number) {
        return new Promise<TimeGroupRecordDayTimeLogic[]>((resolve, reject) => {
            this.getAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileTimeGroupIdWithCallbacks(defaultPriceProfileTimeGroupId, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileTimeGroupIdWithCallbacks(defaultPriceProfileTimeGroupId: number, onSuccess?: (result: TimeGroupRecordDayTimeLogic[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileTimeGroupId?";
        if (defaultPriceProfileTimeGroupId !== undefined)
            url_ += "DefaultPriceProfileTimeGroupId=" + encodeURIComponent("" + defaultPriceProfileTimeGroupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileTimeGroupIdWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileTimeGroupIdWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileTimeGroupIdWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileTimeGroupId(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileTimeGroupId(xhr: any): TimeGroupRecordDayTimeLogic[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeGroupRecordDayTimeLogic[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimeGroupRecordDayTimeLogic.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @defaultPriceProfileId (optional) 
     * @return Success
     */
    getAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileId(defaultPriceProfileId?: number) {
        return new Promise<TimeGroupRecordDayTimeLogic[]>((resolve, reject) => {
            this.getAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileIdWithCallbacks(defaultPriceProfileId, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileIdWithCallbacks(defaultPriceProfileId: number, onSuccess?: (result: TimeGroupRecordDayTimeLogic[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileId?";
        if (defaultPriceProfileId !== undefined)
            url_ += "DefaultPriceProfileId=" + encodeURIComponent("" + defaultPriceProfileId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileIdWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileIdWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileIdWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileId(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllTimeGroupRecordDayTimeLogicForDefaultPriceProfileId(xhr: any): TimeGroupRecordDayTimeLogic[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeGroupRecordDayTimeLogic[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimeGroupRecordDayTimeLogic.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getTimeGroupRecordDayTimeLogic(id?: string) {
        return new Promise<TimeGroupRecordDayTimeLogic>((resolve, reject) => {
            this.getTimeGroupRecordDayTimeLogicWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTimeGroupRecordDayTimeLogicWithCallbacks(id: string, onSuccess?: (result: TimeGroupRecordDayTimeLogic) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetTimeGroupRecordDayTimeLogic?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTimeGroupRecordDayTimeLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTimeGroupRecordDayTimeLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTimeGroupRecordDayTimeLogicWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTimeGroupRecordDayTimeLogic(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTimeGroupRecordDayTimeLogic(xhr: any): TimeGroupRecordDayTimeLogic {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeGroupRecordDayTimeLogic = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeGroupRecordDayTimeLogic.fromJS(resultData200) : new TimeGroupRecordDayTimeLogic();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postTimeGroupRecordDayTimeLogic(model?: TimeGroupRecordDayTimeLogic) {
        return new Promise<TimeGroupRecordDayTimeLogic>((resolve, reject) => {
            this.postTimeGroupRecordDayTimeLogicWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postTimeGroupRecordDayTimeLogicWithCallbacks(model: TimeGroupRecordDayTimeLogic, onSuccess?: (result: TimeGroupRecordDayTimeLogic) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/PostTimeGroupRecordDayTimeLogic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostTimeGroupRecordDayTimeLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostTimeGroupRecordDayTimeLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostTimeGroupRecordDayTimeLogicWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostTimeGroupRecordDayTimeLogic(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostTimeGroupRecordDayTimeLogic(xhr: any): TimeGroupRecordDayTimeLogic {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeGroupRecordDayTimeLogic = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeGroupRecordDayTimeLogic.fromJS(resultData200) : new TimeGroupRecordDayTimeLogic();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putTimeGroupRecordDayTimeLogic(id?: string, model?: TimeGroupRecordDayTimeLogic) {
        return new Promise<TimeGroupRecordDayTimeLogic>((resolve, reject) => {
            this.putTimeGroupRecordDayTimeLogicWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putTimeGroupRecordDayTimeLogicWithCallbacks(id: string, model: TimeGroupRecordDayTimeLogic, onSuccess?: (result: TimeGroupRecordDayTimeLogic) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/PutTimeGroupRecordDayTimeLogic?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutTimeGroupRecordDayTimeLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutTimeGroupRecordDayTimeLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutTimeGroupRecordDayTimeLogicWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutTimeGroupRecordDayTimeLogic(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutTimeGroupRecordDayTimeLogic(xhr: any): TimeGroupRecordDayTimeLogic {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeGroupRecordDayTimeLogic = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeGroupRecordDayTimeLogic.fromJS(resultData200) : new TimeGroupRecordDayTimeLogic();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteTimeGroupRecordDayTimeLogic(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteTimeGroupRecordDayTimeLogicWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteTimeGroupRecordDayTimeLogicWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/DeleteTimeGroupRecordDayTimeLogic?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteTimeGroupRecordDayTimeLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteTimeGroupRecordDayTimeLogicWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteTimeGroupRecordDayTimeLogicWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteTimeGroupRecordDayTimeLogic(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteTimeGroupRecordDayTimeLogic(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getSpecialDayTrackTimeDayTypes() {
        return new Promise<DayType[]>((resolve, reject) => {
            this.getSpecialDayTrackTimeDayTypesWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSpecialDayTrackTimeDayTypesWithCallbacks(onSuccess?: (result: DayType[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetSpecialDayTrackTimeDayTypes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSpecialDayTrackTimeDayTypesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSpecialDayTrackTimeDayTypesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSpecialDayTrackTimeDayTypesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSpecialDayTrackTimeDayTypes(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSpecialDayTrackTimeDayTypes(xhr: any): DayType[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DayType[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DayType.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @year (optional) 
     * @return Success
     */
    getSpecialDays(year?: number) {
        return new Promise<SpecialDay[]>((resolve, reject) => {
            this.getSpecialDaysWithCallbacks(year, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSpecialDaysWithCallbacks(year: number, onSuccess?: (result: SpecialDay[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetSpecialDays?";
        if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSpecialDaysWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSpecialDaysWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSpecialDaysWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSpecialDays(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSpecialDays(xhr: any): SpecialDay[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SpecialDay[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SpecialDay.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getSpecialDay(id?: string) {
        return new Promise<SpecialDay>((resolve, reject) => {
            this.getSpecialDayWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getSpecialDayWithCallbacks(id: string, onSuccess?: (result: SpecialDay) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/GetSpecialDay?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetSpecialDayWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetSpecialDayWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetSpecialDayWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetSpecialDay(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetSpecialDay(xhr: any): SpecialDay {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SpecialDay = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SpecialDay.fromJS(resultData200) : new SpecialDay();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postSpecialDay(model?: SpecialDay) {
        return new Promise<SpecialDay>((resolve, reject) => {
            this.postSpecialDayWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postSpecialDayWithCallbacks(model: SpecialDay, onSuccess?: (result: SpecialDay) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/PostSpecialDay";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostSpecialDayWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostSpecialDayWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostSpecialDayWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostSpecialDay(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostSpecialDay(xhr: any): SpecialDay {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SpecialDay = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SpecialDay.fromJS(resultData200) : new SpecialDay();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putSpecialDay(id?: string, model?: SpecialDay) {
        return new Promise<SpecialDay>((resolve, reject) => {
            this.putSpecialDayWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putSpecialDayWithCallbacks(id: string, model: SpecialDay, onSuccess?: (result: SpecialDay) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/PutSpecialDay?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutSpecialDayWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutSpecialDayWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutSpecialDayWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutSpecialDay(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutSpecialDay(xhr: any): SpecialDay {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SpecialDay = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SpecialDay.fromJS(resultData200) : new SpecialDay();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteSpecialDay(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteSpecialDayWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteSpecialDayWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/DeleteSpecialDay?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteSpecialDayWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteSpecialDayWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteSpecialDayWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteSpecialDay(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteSpecialDay(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @defaultpriceprofileid (optional) 
     * @newname (optional) 
     * @return Success
     */
    copyDefaultTimeGroupProfile(defaultpriceprofileid?: number, newname?: string) {
        return new Promise<DefaultPriceProfile>((resolve, reject) => {
            this.copyDefaultTimeGroupProfileWithCallbacks(defaultpriceprofileid, newname, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private copyDefaultTimeGroupProfileWithCallbacks(defaultpriceprofileid: number, newname: string, onSuccess?: (result: DefaultPriceProfile) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeGroup/CopyDefaultTimeGroupProfile?";
        if (defaultpriceprofileid !== undefined)
            url_ += "defaultpriceprofileid=" + encodeURIComponent("" + defaultpriceprofileid) + "&";
        if (newname !== undefined)
            url_ += "newname=" + encodeURIComponent("" + newname) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCopyDefaultTimeGroupProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCopyDefaultTimeGroupProfileWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCopyDefaultTimeGroupProfileWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCopyDefaultTimeGroupProfile(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCopyDefaultTimeGroupProfile(xhr: any): DefaultPriceProfile {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: DefaultPriceProfile = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DefaultPriceProfile.fromJS(resultData200) : new DefaultPriceProfile();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface ITimelogClient {
    /**
     * @continuationtoken (optional) 
     * @return Success
     */
    getOrderedTimelogs(continuationtoken?: string): Promise<TupleOfIEnumerableOfTimelogAndString>;
    /**
     * @continuationtoken (optional) 
     * @return Success
     */
    getOrderedActiveTimelogs(continuationtoken?: string): Promise<TupleOfIEnumerableOfTimelogAndString>;
    /**
     * @workitemid (optional) 
     * @return Success
     */
    getTimelogsForWorkItem(workitemid?: string): Promise<Timelog[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getTimelogsForWorkShift(id?: string): Promise<Timelog[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    getTimelogs(model?: TimelogSearchModel): Promise<TupleOfIEnumerableOfTimelogAndString>;
    /**
     * @continuationtoken (optional) 
     * @return Success
     */
    getMyTimelogs(continuationtoken?: string): Promise<TupleOfIEnumerableOfTimelogAndString>;
    /**
     * @personid (optional) 
     * @continuationtoken (optional) 
     * @return Success
     */
    getPersonTimelogs(personid?: string, continuationtoken?: string): Promise<TupleOfIEnumerableOfTimelogAndString>;
    /**
     * @id (optional) 
     * @return Success
     */
    getTimelogItem(id?: string): Promise<Timelog>;
    /**
     * @return Success
     */
    startMyTimer(): Promise<Timelog>;
    /**
     * @return Success
     */
    stopMyTimer(): Promise<Timelog>;
    /**
     * @return Success
     */
    getMyRunningTimer(): Promise<Timelog>;
    /**
     * @return Success
     */
    getAllRunningTimers(): Promise<Timelog[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    postTimelog(model?: Timelog): Promise<Timelog>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putTimelog(id?: string, model?: Timelog): Promise<Timelog>;
    /**
     * @id (optional) 
     * @return Success
     */
    cancelTimelog(id?: string): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteTimelog(id?: string): Promise<void>;
    /**
     * @timelogid (optional) 
     * @return Success
     */
    getAllTimelogPositionsAsync(timelogid?: string): Promise<TimelogPosition[]>;
    /**
     * @return Success
     */
    getAllRunningTimelogsPositionsAsync(): Promise<TimelogPosition[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    postTimelogPositionAsync(model?: TimelogPosition): Promise<TimelogPosition>;
    /**
     * @id (optional) 
     * @return Success
     */
    deleteTimelogPositionAsync(id?: string): Promise<void>;
    /**
     * @personid (optional) 
     * @starttime (optional) 
     * @timezoneid (optional) 
     * @return Success
     */
    findMatchingWorkShift(personid?: string, starttime?: Date, timezoneid?: string): Promise<WorkShift>;
    /**
     * @personid (optional) 
     * @starttime (optional) 
     * @timezoneid (optional) 
     * @return Success
     */
    findAllMatchingWorkShifts(personid?: string, starttime?: Date, timezoneid?: string): Promise<WorkShift[]>;
    /**
     * @personid (optional) 
     * @starttime (optional) 
     * @timezoneid (optional) 
     * @return Success
     */
    findMatchingWorkItem(personid?: string, starttime?: Date, timezoneid?: string): Promise<WorkItem>;
    /**
     * @personid (optional) 
     * @starttime (optional) 
     * @timezoneid (optional) 
     * @return Success
     */
    findAllMatchingWorkItems(personid?: string, starttime?: Date, timezoneid?: string): Promise<WorkItem[]>;
}

export class TimelogClient extends base.CoreApiBaseClient implements ITimelogClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @continuationtoken (optional) 
     * @return Success
     */
    getOrderedTimelogs(continuationtoken?: string) {
        return new Promise<TupleOfIEnumerableOfTimelogAndString>((resolve, reject) => {
            this.getOrderedTimelogsWithCallbacks(continuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getOrderedTimelogsWithCallbacks(continuationtoken: string, onSuccess?: (result: TupleOfIEnumerableOfTimelogAndString) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetOrderedTimelogs?";
        if (continuationtoken !== undefined)
            url_ += "continuationtoken=" + encodeURIComponent("" + continuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetOrderedTimelogsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetOrderedTimelogsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetOrderedTimelogsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetOrderedTimelogs(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetOrderedTimelogs(xhr: any): TupleOfIEnumerableOfTimelogAndString {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TupleOfIEnumerableOfTimelogAndString = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TupleOfIEnumerableOfTimelogAndString.fromJS(resultData200) : new TupleOfIEnumerableOfTimelogAndString();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @continuationtoken (optional) 
     * @return Success
     */
    getOrderedActiveTimelogs(continuationtoken?: string) {
        return new Promise<TupleOfIEnumerableOfTimelogAndString>((resolve, reject) => {
            this.getOrderedActiveTimelogsWithCallbacks(continuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getOrderedActiveTimelogsWithCallbacks(continuationtoken: string, onSuccess?: (result: TupleOfIEnumerableOfTimelogAndString) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetOrderedActiveTimelogs?";
        if (continuationtoken !== undefined)
            url_ += "continuationtoken=" + encodeURIComponent("" + continuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetOrderedActiveTimelogsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetOrderedActiveTimelogsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetOrderedActiveTimelogsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetOrderedActiveTimelogs(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetOrderedActiveTimelogs(xhr: any): TupleOfIEnumerableOfTimelogAndString {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TupleOfIEnumerableOfTimelogAndString = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TupleOfIEnumerableOfTimelogAndString.fromJS(resultData200) : new TupleOfIEnumerableOfTimelogAndString();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workitemid (optional) 
     * @return Success
     */
    getTimelogsForWorkItem(workitemid?: string) {
        return new Promise<Timelog[]>((resolve, reject) => {
            this.getTimelogsForWorkItemWithCallbacks(workitemid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTimelogsForWorkItemWithCallbacks(workitemid: string, onSuccess?: (result: Timelog[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetTimelogsForWorkItem?";
        if (workitemid !== undefined)
            url_ += "workitemid=" + encodeURIComponent("" + workitemid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTimelogsForWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTimelogsForWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTimelogsForWorkItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTimelogsForWorkItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTimelogsForWorkItem(xhr: any): Timelog[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Timelog[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Timelog.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getTimelogsForWorkShift(id?: string) {
        return new Promise<Timelog[]>((resolve, reject) => {
            this.getTimelogsForWorkShiftWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTimelogsForWorkShiftWithCallbacks(id: string, onSuccess?: (result: Timelog[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetTimelogsForWorkShift?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTimelogsForWorkShiftWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTimelogsForWorkShiftWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTimelogsForWorkShiftWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTimelogsForWorkShift(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTimelogsForWorkShift(xhr: any): Timelog[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Timelog[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Timelog.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    getTimelogs(model?: TimelogSearchModel) {
        return new Promise<TupleOfIEnumerableOfTimelogAndString>((resolve, reject) => {
            this.getTimelogsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTimelogsWithCallbacks(model: TimelogSearchModel, onSuccess?: (result: TupleOfIEnumerableOfTimelogAndString) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetTimelogs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTimelogsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTimelogsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTimelogsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTimelogs(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTimelogs(xhr: any): TupleOfIEnumerableOfTimelogAndString {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TupleOfIEnumerableOfTimelogAndString = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TupleOfIEnumerableOfTimelogAndString.fromJS(resultData200) : new TupleOfIEnumerableOfTimelogAndString();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @continuationtoken (optional) 
     * @return Success
     */
    getMyTimelogs(continuationtoken?: string) {
        return new Promise<TupleOfIEnumerableOfTimelogAndString>((resolve, reject) => {
            this.getMyTimelogsWithCallbacks(continuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getMyTimelogsWithCallbacks(continuationtoken: string, onSuccess?: (result: TupleOfIEnumerableOfTimelogAndString) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetMyTimelogs?";
        if (continuationtoken !== undefined)
            url_ += "continuationtoken=" + encodeURIComponent("" + continuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetMyTimelogsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetMyTimelogsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetMyTimelogsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetMyTimelogs(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetMyTimelogs(xhr: any): TupleOfIEnumerableOfTimelogAndString {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TupleOfIEnumerableOfTimelogAndString = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TupleOfIEnumerableOfTimelogAndString.fromJS(resultData200) : new TupleOfIEnumerableOfTimelogAndString();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @continuationtoken (optional) 
     * @return Success
     */
    getPersonTimelogs(personid?: string, continuationtoken?: string) {
        return new Promise<TupleOfIEnumerableOfTimelogAndString>((resolve, reject) => {
            this.getPersonTimelogsWithCallbacks(personid, continuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getPersonTimelogsWithCallbacks(personid: string, continuationtoken: string, onSuccess?: (result: TupleOfIEnumerableOfTimelogAndString) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetPersonTimelogs?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (continuationtoken !== undefined)
            url_ += "continuationtoken=" + encodeURIComponent("" + continuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetPersonTimelogsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPersonTimelogsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetPersonTimelogsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPersonTimelogs(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPersonTimelogs(xhr: any): TupleOfIEnumerableOfTimelogAndString {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TupleOfIEnumerableOfTimelogAndString = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TupleOfIEnumerableOfTimelogAndString.fromJS(resultData200) : new TupleOfIEnumerableOfTimelogAndString();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getTimelogItem(id?: string) {
        return new Promise<Timelog>((resolve, reject) => {
            this.getTimelogItemWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getTimelogItemWithCallbacks(id: string, onSuccess?: (result: Timelog) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetTimelogItem?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetTimelogItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetTimelogItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetTimelogItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetTimelogItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetTimelogItem(xhr: any): Timelog {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Timelog = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Timelog.fromJS(resultData200) : new Timelog();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    startMyTimer() {
        return new Promise<Timelog>((resolve, reject) => {
            this.startMyTimerWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private startMyTimerWithCallbacks(onSuccess?: (result: Timelog) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/StartMyTimer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processStartMyTimerWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processStartMyTimerWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processStartMyTimerWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processStartMyTimer(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processStartMyTimer(xhr: any): Timelog {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Timelog = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Timelog.fromJS(resultData200) : new Timelog();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    stopMyTimer() {
        return new Promise<Timelog>((resolve, reject) => {
            this.stopMyTimerWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private stopMyTimerWithCallbacks(onSuccess?: (result: Timelog) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/StopMyTimer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processStopMyTimerWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processStopMyTimerWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processStopMyTimerWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processStopMyTimer(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processStopMyTimer(xhr: any): Timelog {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Timelog = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Timelog.fromJS(resultData200) : new Timelog();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getMyRunningTimer() {
        return new Promise<Timelog>((resolve, reject) => {
            this.getMyRunningTimerWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getMyRunningTimerWithCallbacks(onSuccess?: (result: Timelog) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetMyRunningTimer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetMyRunningTimerWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetMyRunningTimerWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetMyRunningTimerWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetMyRunningTimer(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetMyRunningTimer(xhr: any): Timelog {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Timelog = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Timelog.fromJS(resultData200) : new Timelog();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllRunningTimers() {
        return new Promise<Timelog[]>((resolve, reject) => {
            this.getAllRunningTimersWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllRunningTimersWithCallbacks(onSuccess?: (result: Timelog[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetAllRunningTimers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllRunningTimersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllRunningTimersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllRunningTimersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllRunningTimers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllRunningTimers(xhr: any): Timelog[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Timelog[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Timelog.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postTimelog(model?: Timelog) {
        return new Promise<Timelog>((resolve, reject) => {
            this.postTimelogWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postTimelogWithCallbacks(model: Timelog, onSuccess?: (result: Timelog) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/PostTimelog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostTimelogWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostTimelogWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostTimelogWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostTimelog(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostTimelog(xhr: any): Timelog {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Timelog = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Timelog.fromJS(resultData200) : new Timelog();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    putTimelog(id?: string, model?: Timelog) {
        return new Promise<Timelog>((resolve, reject) => {
            this.putTimelogWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putTimelogWithCallbacks(id: string, model: Timelog, onSuccess?: (result: Timelog) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/PutTimelog?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutTimelogWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutTimelogWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutTimelogWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutTimelog(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutTimelog(xhr: any): Timelog {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Timelog = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Timelog.fromJS(resultData200) : new Timelog();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    cancelTimelog(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.cancelTimelogWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private cancelTimelogWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/CancelTimelog?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCancelTimelogWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCancelTimelogWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCancelTimelogWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCancelTimelog(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCancelTimelog(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteTimelog(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteTimelogWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteTimelogWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/DeleteTimelog?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteTimelogWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteTimelogWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteTimelogWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteTimelog(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteTimelog(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @timelogid (optional) 
     * @return Success
     */
    getAllTimelogPositionsAsync(timelogid?: string) {
        return new Promise<TimelogPosition[]>((resolve, reject) => {
            this.getAllTimelogPositionsAsyncWithCallbacks(timelogid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllTimelogPositionsAsyncWithCallbacks(timelogid: string, onSuccess?: (result: TimelogPosition[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetAllTimelogPositionsAsync?";
        if (timelogid !== undefined)
            url_ += "timelogid=" + encodeURIComponent("" + timelogid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllTimelogPositionsAsyncWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllTimelogPositionsAsyncWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllTimelogPositionsAsyncWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllTimelogPositionsAsync(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllTimelogPositionsAsync(xhr: any): TimelogPosition[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimelogPosition[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimelogPosition.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllRunningTimelogsPositionsAsync() {
        return new Promise<TimelogPosition[]>((resolve, reject) => {
            this.getAllRunningTimelogsPositionsAsyncWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllRunningTimelogsPositionsAsyncWithCallbacks(onSuccess?: (result: TimelogPosition[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/GetAllRunningTimelogsPositionsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllRunningTimelogsPositionsAsyncWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllRunningTimelogsPositionsAsyncWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllRunningTimelogsPositionsAsyncWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllRunningTimelogsPositionsAsync(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllRunningTimelogsPositionsAsync(xhr: any): TimelogPosition[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimelogPosition[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimelogPosition.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postTimelogPositionAsync(model?: TimelogPosition) {
        return new Promise<TimelogPosition>((resolve, reject) => {
            this.postTimelogPositionAsyncWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postTimelogPositionAsyncWithCallbacks(model: TimelogPosition, onSuccess?: (result: TimelogPosition) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/PostTimelogPositionAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostTimelogPositionAsyncWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostTimelogPositionAsyncWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostTimelogPositionAsyncWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostTimelogPositionAsync(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostTimelogPositionAsync(xhr: any): TimelogPosition {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimelogPosition = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimelogPosition.fromJS(resultData200) : new TimelogPosition();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    deleteTimelogPositionAsync(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteTimelogPositionAsyncWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteTimelogPositionAsyncWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/DeleteTimelogPositionAsync?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteTimelogPositionAsyncWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteTimelogPositionAsyncWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteTimelogPositionAsyncWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteTimelogPositionAsync(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteTimelogPositionAsync(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @personid (optional) 
     * @starttime (optional) 
     * @timezoneid (optional) 
     * @return Success
     */
    findMatchingWorkShift(personid?: string, starttime?: Date, timezoneid?: string) {
        return new Promise<WorkShift>((resolve, reject) => {
            this.findMatchingWorkShiftWithCallbacks(personid, starttime, timezoneid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private findMatchingWorkShiftWithCallbacks(personid: string, starttime: Date, timezoneid: string, onSuccess?: (result: WorkShift) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/FindMatchingWorkShift?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (starttime !== undefined)
            url_ += "starttime=" + encodeURIComponent("" + starttime.toJSON()) + "&";
        if (timezoneid !== undefined)
            url_ += "timezoneid=" + encodeURIComponent("" + timezoneid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processFindMatchingWorkShiftWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindMatchingWorkShiftWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFindMatchingWorkShiftWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFindMatchingWorkShift(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFindMatchingWorkShift(xhr: any): WorkShift {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkShift = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkShift.fromJS(resultData200) : new WorkShift();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @starttime (optional) 
     * @timezoneid (optional) 
     * @return Success
     */
    findAllMatchingWorkShifts(personid?: string, starttime?: Date, timezoneid?: string) {
        return new Promise<WorkShift[]>((resolve, reject) => {
            this.findAllMatchingWorkShiftsWithCallbacks(personid, starttime, timezoneid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private findAllMatchingWorkShiftsWithCallbacks(personid: string, starttime: Date, timezoneid: string, onSuccess?: (result: WorkShift[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/FindAllMatchingWorkShifts?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (starttime !== undefined)
            url_ += "starttime=" + encodeURIComponent("" + starttime.toJSON()) + "&";
        if (timezoneid !== undefined)
            url_ += "timezoneid=" + encodeURIComponent("" + timezoneid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processFindAllMatchingWorkShiftsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindAllMatchingWorkShiftsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFindAllMatchingWorkShiftsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFindAllMatchingWorkShifts(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFindAllMatchingWorkShifts(xhr: any): WorkShift[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkShift[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkShift.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @starttime (optional) 
     * @timezoneid (optional) 
     * @return Success
     */
    findMatchingWorkItem(personid?: string, starttime?: Date, timezoneid?: string) {
        return new Promise<WorkItem>((resolve, reject) => {
            this.findMatchingWorkItemWithCallbacks(personid, starttime, timezoneid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private findMatchingWorkItemWithCallbacks(personid: string, starttime: Date, timezoneid: string, onSuccess?: (result: WorkItem) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/FindMatchingWorkItem?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (starttime !== undefined)
            url_ += "starttime=" + encodeURIComponent("" + starttime.toJSON()) + "&";
        if (timezoneid !== undefined)
            url_ += "timezoneid=" + encodeURIComponent("" + timezoneid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processFindMatchingWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindMatchingWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFindMatchingWorkItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFindMatchingWorkItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFindMatchingWorkItem(xhr: any): WorkItem {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItem = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkItem.fromJS(resultData200) : new WorkItem();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @starttime (optional) 
     * @timezoneid (optional) 
     * @return Success
     */
    findAllMatchingWorkItems(personid?: string, starttime?: Date, timezoneid?: string) {
        return new Promise<WorkItem[]>((resolve, reject) => {
            this.findAllMatchingWorkItemsWithCallbacks(personid, starttime, timezoneid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private findAllMatchingWorkItemsWithCallbacks(personid: string, starttime: Date, timezoneid: string, onSuccess?: (result: WorkItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Timelog/FindAllMatchingWorkItems?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (starttime !== undefined)
            url_ += "starttime=" + encodeURIComponent("" + starttime.toJSON()) + "&";
        if (timezoneid !== undefined)
            url_ += "timezoneid=" + encodeURIComponent("" + timezoneid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processFindAllMatchingWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFindAllMatchingWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processFindAllMatchingWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFindAllMatchingWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFindAllMatchingWorkItems(xhr: any): WorkItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface ITimeReportClient {
    /**
     * @model (optional) 
     * @return Success
     */
    createNewFromWorkShift(model?: WorkShift): Promise<TimeReport>;
    /**
     * @model (optional) 
     * @return Success
     */
    recalculate(model?: TimeReport): Promise<TimeReport>;
    /**
     * @model (optional) 
     * @return Success
     */
    getAllForWorkBetween(model?: TimeReportSearchModel): Promise<PagedResultsOfTimeReport>;
    /**
     * @workerid (optional) 
     * @return Success
     */
    getAllUnAttested(workerid?: string): Promise<TimeReport[]>;
    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllAttested(requestcontinuationtoken?: string): Promise<ContinuationResultOfIEnumerableOfTimeReport>;
    /**
     * @id (optional) 
     * @return Success
     */
    putAttestTimeReport(id?: string): Promise<TimeReport>;
    /**
     * @id (optional) 
     * @return Success
     */
    putUnAttestTimeReport(id?: string): Promise<TimeReport>;
    /**
     * @workitemid (optional) 
     * @return Success
     */
    getAllForWorkItem(workitemid?: string): Promise<TimeReport[]>;
    /**
     * @workitemid (optional) 
     * @return Success
     */
    getAllUnAttestedForWorkItem(workitemid?: string): Promise<TimeReport[]>;
    /**
     * @workitemid (optional) 
     * @return Success
     */
    getAllAttestedForWorkItem(workitemid?: string): Promise<TimeReport[]>;
    /**
     * @workshiftid (optional) 
     * @return Success
     */
    getForWorkShift(workshiftid?: string): Promise<TimeReport>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<TimeReport>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: TimeReport): Promise<TimeReport>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: TimeReport): Promise<TimeReport>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class TimeReportClient extends base.CoreApiBaseClient implements ITimeReportClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @model (optional) 
     * @return Success
     */
    createNewFromWorkShift(model?: WorkShift) {
        return new Promise<TimeReport>((resolve, reject) => {
            this.createNewFromWorkShiftWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private createNewFromWorkShiftWithCallbacks(model: WorkShift, onSuccess?: (result: TimeReport) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/CreateNewFromWorkShift";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCreateNewFromWorkShiftWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCreateNewFromWorkShiftWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCreateNewFromWorkShiftWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCreateNewFromWorkShift(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCreateNewFromWorkShift(xhr: any): TimeReport {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeReport.fromJS(resultData200) : new TimeReport();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    recalculate(model?: TimeReport) {
        return new Promise<TimeReport>((resolve, reject) => {
            this.recalculateWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private recalculateWithCallbacks(model: TimeReport, onSuccess?: (result: TimeReport) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/Recalculate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processRecalculateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processRecalculateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processRecalculateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processRecalculate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processRecalculate(xhr: any): TimeReport {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeReport.fromJS(resultData200) : new TimeReport();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    getAllForWorkBetween(model?: TimeReportSearchModel) {
        return new Promise<PagedResultsOfTimeReport>((resolve, reject) => {
            this.getAllForWorkBetweenWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForWorkBetweenWithCallbacks(model: TimeReportSearchModel, onSuccess?: (result: PagedResultsOfTimeReport) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/GetAllForWorkBetween";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForWorkBetweenWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForWorkBetweenWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForWorkBetweenWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForWorkBetween(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForWorkBetween(xhr: any): PagedResultsOfTimeReport {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PagedResultsOfTimeReport = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultsOfTimeReport.fromJS(resultData200) : new PagedResultsOfTimeReport();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workerid (optional) 
     * @return Success
     */
    getAllUnAttested(workerid?: string) {
        return new Promise<TimeReport[]>((resolve, reject) => {
            this.getAllUnAttestedWithCallbacks(workerid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllUnAttestedWithCallbacks(workerid: string, onSuccess?: (result: TimeReport[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/GetAllUnAttested?";
        if (workerid !== undefined)
            url_ += "workerid=" + encodeURIComponent("" + workerid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllUnAttestedWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllUnAttestedWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllUnAttestedWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllUnAttested(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllUnAttested(xhr: any): TimeReport[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimeReport.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getAllAttested(requestcontinuationtoken?: string) {
        return new Promise<ContinuationResultOfIEnumerableOfTimeReport>((resolve, reject) => {
            this.getAllAttestedWithCallbacks(requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllAttestedWithCallbacks(requestcontinuationtoken: string, onSuccess?: (result: ContinuationResultOfIEnumerableOfTimeReport) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/GetAllAttested?";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllAttestedWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllAttestedWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllAttestedWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllAttested(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllAttested(xhr: any): ContinuationResultOfIEnumerableOfTimeReport {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ContinuationResultOfIEnumerableOfTimeReport = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ContinuationResultOfIEnumerableOfTimeReport.fromJS(resultData200) : new ContinuationResultOfIEnumerableOfTimeReport();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    putAttestTimeReport(id?: string) {
        return new Promise<TimeReport>((resolve, reject) => {
            this.putAttestTimeReportWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putAttestTimeReportWithCallbacks(id: string, onSuccess?: (result: TimeReport) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/PutAttestTimeReport?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutAttestTimeReportWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutAttestTimeReportWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutAttestTimeReportWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutAttestTimeReport(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutAttestTimeReport(xhr: any): TimeReport {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeReport.fromJS(resultData200) : new TimeReport();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    putUnAttestTimeReport(id?: string) {
        return new Promise<TimeReport>((resolve, reject) => {
            this.putUnAttestTimeReportWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putUnAttestTimeReportWithCallbacks(id: string, onSuccess?: (result: TimeReport) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/PutUnAttestTimeReport?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutUnAttestTimeReportWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutUnAttestTimeReportWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutUnAttestTimeReportWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutUnAttestTimeReport(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutUnAttestTimeReport(xhr: any): TimeReport {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeReport.fromJS(resultData200) : new TimeReport();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workitemid (optional) 
     * @return Success
     */
    getAllForWorkItem(workitemid?: string) {
        return new Promise<TimeReport[]>((resolve, reject) => {
            this.getAllForWorkItemWithCallbacks(workitemid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllForWorkItemWithCallbacks(workitemid: string, onSuccess?: (result: TimeReport[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/GetAllForWorkItem?";
        if (workitemid !== undefined)
            url_ += "workitemid=" + encodeURIComponent("" + workitemid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllForWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllForWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllForWorkItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllForWorkItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllForWorkItem(xhr: any): TimeReport[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimeReport.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workitemid (optional) 
     * @return Success
     */
    getAllUnAttestedForWorkItem(workitemid?: string) {
        return new Promise<TimeReport[]>((resolve, reject) => {
            this.getAllUnAttestedForWorkItemWithCallbacks(workitemid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllUnAttestedForWorkItemWithCallbacks(workitemid: string, onSuccess?: (result: TimeReport[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/GetAllUnAttestedForWorkItem?";
        if (workitemid !== undefined)
            url_ += "workitemid=" + encodeURIComponent("" + workitemid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllUnAttestedForWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllUnAttestedForWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllUnAttestedForWorkItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllUnAttestedForWorkItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllUnAttestedForWorkItem(xhr: any): TimeReport[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimeReport.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workitemid (optional) 
     * @return Success
     */
    getAllAttestedForWorkItem(workitemid?: string) {
        return new Promise<TimeReport[]>((resolve, reject) => {
            this.getAllAttestedForWorkItemWithCallbacks(workitemid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllAttestedForWorkItemWithCallbacks(workitemid: string, onSuccess?: (result: TimeReport[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/GetAllAttestedForWorkItem?";
        if (workitemid !== undefined)
            url_ += "workitemid=" + encodeURIComponent("" + workitemid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllAttestedForWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllAttestedForWorkItemWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllAttestedForWorkItemWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllAttestedForWorkItem(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllAttestedForWorkItem(xhr: any): TimeReport[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimeReport.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workshiftid (optional) 
     * @return Success
     */
    getForWorkShift(workshiftid?: string) {
        return new Promise<TimeReport>((resolve, reject) => {
            this.getForWorkShiftWithCallbacks(workshiftid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getForWorkShiftWithCallbacks(workshiftid: string, onSuccess?: (result: TimeReport) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/GetForWorkShift?";
        if (workshiftid !== undefined)
            url_ += "workshiftid=" + encodeURIComponent("" + workshiftid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetForWorkShiftWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetForWorkShiftWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetForWorkShiftWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetForWorkShift(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetForWorkShift(xhr: any): TimeReport {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeReport.fromJS(resultData200) : new TimeReport();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<TimeReport>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: TimeReport) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): TimeReport {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeReport.fromJS(resultData200) : new TimeReport();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: TimeReport) {
        return new Promise<TimeReport>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: TimeReport, onSuccess?: (result: TimeReport) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): TimeReport {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeReport.fromJS(resultData200) : new TimeReport();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: TimeReport) {
        return new Promise<TimeReport>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: TimeReport, onSuccess?: (result: TimeReport) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): TimeReport {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TimeReport = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TimeReport.fromJS(resultData200) : new TimeReport();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/TimeReport/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IUserClient {
    /**
     * @return Success
     */
    getUsers(): Promise<Person[]>;
    /**
     * @return Success
     */
    getActiveUsers(): Promise<Person[]>;
    /**
     * @return Success
     */
    getLockedUsers(): Promise<Person[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getUserDetails(id?: number): Promise<PersonDetails>;
    /**
     * @contactFilters (optional) 
     * @contactPersons (optional) 
     * @customFields (optional) 
     * @personId (optional) 
     * @roleName (optional) 
     * @sellingPrice (optional) 
     * @defaultCompensation (optional) 
     * @defaultCompensationUom (optional) 
     * @countyCouncilName (optional) 
     * @preferedCountyCouncilNames (optional) 
     * @defaultVatSetting (optional) 
     * @itemType (optional) 
     * @availableWeeksAsJson (optional) 
     * @knowledgeOfMedicalRecord (optional) 
     * @isNew (optional) 
     * @createdDate (optional) 
     * @updatedDate (optional) 
     * @qualityResult (optional) 
     * @lastContactDate (optional) 
     * @areaOfExpertise (optional) 
     * @allAreaOfExpertises (optional) 
     * @bornDate (optional) 
     * @systemRoleName (optional) 
     * @roleAccess (optional) 
     * @accountId (optional) 
     * @forSystemRole (optional) 
     * @availableForWorkInCountries (optional) 
     * @belongToId (optional) 
     * @socialSecurityNo2 (optional) 
     * @orderCountry (optional) 
     * @costCenter (optional) 
     * @name (optional) 
     * @shippingName (optional) 
     * @fax (optional) 
     * @web (optional) 
     * @taxPercentage (optional) 
     * @taxTable (optional) 
     * @bank (optional) 
     * @clearingNumber (optional) 
     * @bankAccountNumber (optional) 
     * @employeeNumber (optional) 
     * @bankGiro (optional) 
     * @plusGiro (optional) 
     * @vatNr (optional) 
     * @sNICode (optional) 
     * @iBANBankGiro (optional) 
     * @bICPlusGiro (optional) 
     * @title (optional) 
     * @description (optional) 
     * @syncShippingAddress (optional) 
     * @deactivated (optional) 
     * @workCompensationMultiplierId (optional) 
     * @workCompensationMultiplierValue (optional) 
     * @vacationPayMultiplier (optional) 
     * @socialSecurityNo (optional) 
     * @imageUrl (optional) 
     * @firstName (optional) 
     * @lastName (optional) 
     * @streetName (optional) 
     * @postNo (optional) 
     * @city (optional) 
     * @shippingFirstName (optional) 
     * @shippingLastName (optional) 
     * @shippingStreetName (optional) 
     * @shippingPostNo (optional) 
     * @shippingCity (optional) 
     * @shippingCountry (optional) 
     * @businessSocialSecurityNo (optional) 
     * @businessName (optional) 
     * @businessStreetName (optional) 
     * @businessPostNo (optional) 
     * @businessCity (optional) 
     * @branchOffice (optional) 
     * @department (optional) 
     * @cellPhone (optional) 
     * @email (optional) 
     * @extraEmail (optional) 
     * @termsOfPaymentId (optional) 
     * @termsOfDeliveryId (optional) 
     * @wayOfDeliveryId (optional) 
     * @ourReference (optional) 
     * @yourReference (optional) 
     * @termsOfPaymentQtyDaysId (optional) 
     * @phone (optional) 
     * @doorcode (optional) 
     * @countryId (optional) 
     * @languageId (optional) 
     * @currencyId (optional) 
     * @legalPersonTypeId (optional) 
     * @reference (optional) 
     * @shippingReference (optional) 
     * @ourPersonId (optional) 
     * @shippingLongitude (optional) 
     * @shippingLatitude (optional) 
     * @externalSubscriptionId (optional) 
     * @externalAddressSelector (optional) 
     * @externalFortnoxCustomerNo (optional) 
     * @referredByPersonId (optional) 
     * @responsiblePersonId (optional) 
     * @responsibleName (optional) 
     * @qtyRelatedDocuments (optional) 
     * @pendingDelete (optional) 
     * @comment (optional) 
     * @shippingComment (optional) 
     * @return Success
     */
    post(contactFilters?: any[], contactPersons?: any[], customFields?: any[], personId?: number, roleName?: string, sellingPrice?: number, defaultCompensation?: number, defaultCompensationUom?: string, countyCouncilName?: string, preferedCountyCouncilNames?: string[], defaultVatSetting?: number, itemType?: string, availableWeeksAsJson?: string, knowledgeOfMedicalRecord?: string, isNew?: boolean, createdDate?: Date, updatedDate?: Date, qualityResult?: number, lastContactDate?: Date, areaOfExpertise?: string, allAreaOfExpertises?: string[], bornDate?: Date, systemRoleName?: string, roleAccess?: string, accountId?: number, forSystemRole?: string, availableForWorkInCountries?: string[], belongToId?: string, socialSecurityNo2?: string, orderCountry?: string, costCenter?: string, name?: string, shippingName?: string, fax?: string, web?: string, taxPercentage?: number, taxTable?: string, bank?: string, clearingNumber?: string, bankAccountNumber?: string, employeeNumber?: string, bankGiro?: string, plusGiro?: string, vatNr?: string, sNICode?: string, iBANBankGiro?: string, bICPlusGiro?: string, title?: string, description?: string, syncShippingAddress?: boolean, deactivated?: boolean, workCompensationMultiplierId?: number, workCompensationMultiplierValue?: number, vacationPayMultiplier?: number, socialSecurityNo?: string, imageUrl?: string, firstName?: string, lastName?: string, streetName?: string, postNo?: string, city?: string, shippingFirstName?: string, shippingLastName?: string, shippingStreetName?: string, shippingPostNo?: string, shippingCity?: string, shippingCountry?: string, businessSocialSecurityNo?: string, businessName?: string, businessStreetName?: string, businessPostNo?: string, businessCity?: string, branchOffice?: string, department?: string, cellPhone?: string, email?: string, extraEmail?: string, termsOfPaymentId?: string, termsOfDeliveryId?: string, wayOfDeliveryId?: string, ourReference?: string, yourReference?: string, termsOfPaymentQtyDaysId?: number, phone?: string, doorcode?: string, countryId?: string, languageId?: string, currencyId?: string, legalPersonTypeId?: number, reference?: string, shippingReference?: string, ourPersonId?: number, shippingLongitude?: string, shippingLatitude?: string, externalSubscriptionId?: string, externalAddressSelector?: string, externalFortnoxCustomerNo?: string, referredByPersonId?: number, responsiblePersonId?: number, responsibleName?: string, qtyRelatedDocuments?: number, pendingDelete?: boolean, comment?: string, shippingComment?: string): Promise<PersonDetails>;
    /**
     * @id (optional) 
     * @contactFilters (optional) 
     * @contactPersons (optional) 
     * @customFields (optional) 
     * @personId (optional) 
     * @roleName (optional) 
     * @sellingPrice (optional) 
     * @defaultCompensation (optional) 
     * @defaultCompensationUom (optional) 
     * @countyCouncilName (optional) 
     * @preferedCountyCouncilNames (optional) 
     * @defaultVatSetting (optional) 
     * @itemType (optional) 
     * @availableWeeksAsJson (optional) 
     * @knowledgeOfMedicalRecord (optional) 
     * @isNew (optional) 
     * @createdDate (optional) 
     * @updatedDate (optional) 
     * @qualityResult (optional) 
     * @lastContactDate (optional) 
     * @areaOfExpertise (optional) 
     * @allAreaOfExpertises (optional) 
     * @bornDate (optional) 
     * @systemRoleName (optional) 
     * @roleAccess (optional) 
     * @accountId (optional) 
     * @forSystemRole (optional) 
     * @availableForWorkInCountries (optional) 
     * @belongToId (optional) 
     * @socialSecurityNo2 (optional) 
     * @orderCountry (optional) 
     * @costCenter (optional) 
     * @name (optional) 
     * @shippingName (optional) 
     * @fax (optional) 
     * @web (optional) 
     * @taxPercentage (optional) 
     * @taxTable (optional) 
     * @bank (optional) 
     * @clearingNumber (optional) 
     * @bankAccountNumber (optional) 
     * @employeeNumber (optional) 
     * @bankGiro (optional) 
     * @plusGiro (optional) 
     * @vatNr (optional) 
     * @sNICode (optional) 
     * @iBANBankGiro (optional) 
     * @bICPlusGiro (optional) 
     * @title (optional) 
     * @description (optional) 
     * @syncShippingAddress (optional) 
     * @deactivated (optional) 
     * @workCompensationMultiplierId (optional) 
     * @workCompensationMultiplierValue (optional) 
     * @vacationPayMultiplier (optional) 
     * @socialSecurityNo (optional) 
     * @imageUrl (optional) 
     * @firstName (optional) 
     * @lastName (optional) 
     * @streetName (optional) 
     * @postNo (optional) 
     * @city (optional) 
     * @shippingFirstName (optional) 
     * @shippingLastName (optional) 
     * @shippingStreetName (optional) 
     * @shippingPostNo (optional) 
     * @shippingCity (optional) 
     * @shippingCountry (optional) 
     * @businessSocialSecurityNo (optional) 
     * @businessName (optional) 
     * @businessStreetName (optional) 
     * @businessPostNo (optional) 
     * @businessCity (optional) 
     * @branchOffice (optional) 
     * @department (optional) 
     * @cellPhone (optional) 
     * @email (optional) 
     * @extraEmail (optional) 
     * @termsOfPaymentId (optional) 
     * @termsOfDeliveryId (optional) 
     * @wayOfDeliveryId (optional) 
     * @ourReference (optional) 
     * @yourReference (optional) 
     * @termsOfPaymentQtyDaysId (optional) 
     * @phone (optional) 
     * @doorcode (optional) 
     * @countryId (optional) 
     * @languageId (optional) 
     * @currencyId (optional) 
     * @legalPersonTypeId (optional) 
     * @reference (optional) 
     * @shippingReference (optional) 
     * @ourPersonId (optional) 
     * @shippingLongitude (optional) 
     * @shippingLatitude (optional) 
     * @externalSubscriptionId (optional) 
     * @externalAddressSelector (optional) 
     * @externalFortnoxCustomerNo (optional) 
     * @referredByPersonId (optional) 
     * @responsiblePersonId (optional) 
     * @responsibleName (optional) 
     * @qtyRelatedDocuments (optional) 
     * @pendingDelete (optional) 
     * @comment (optional) 
     * @shippingComment (optional) 
     * @return Success
     */
    put(id?: number, contactFilters?: any[], contactPersons?: any[], customFields?: any[], personId?: number, roleName?: string, sellingPrice?: number, defaultCompensation?: number, defaultCompensationUom?: string, countyCouncilName?: string, preferedCountyCouncilNames?: string[], defaultVatSetting?: number, itemType?: string, availableWeeksAsJson?: string, knowledgeOfMedicalRecord?: string, isNew?: boolean, createdDate?: Date, updatedDate?: Date, qualityResult?: number, lastContactDate?: Date, areaOfExpertise?: string, allAreaOfExpertises?: string[], bornDate?: Date, systemRoleName?: string, roleAccess?: string, accountId?: number, forSystemRole?: string, availableForWorkInCountries?: string[], belongToId?: string, socialSecurityNo2?: string, orderCountry?: string, costCenter?: string, name?: string, shippingName?: string, fax?: string, web?: string, taxPercentage?: number, taxTable?: string, bank?: string, clearingNumber?: string, bankAccountNumber?: string, employeeNumber?: string, bankGiro?: string, plusGiro?: string, vatNr?: string, sNICode?: string, iBANBankGiro?: string, bICPlusGiro?: string, title?: string, description?: string, syncShippingAddress?: boolean, deactivated?: boolean, workCompensationMultiplierId?: number, workCompensationMultiplierValue?: number, vacationPayMultiplier?: number, socialSecurityNo?: string, imageUrl?: string, firstName?: string, lastName?: string, streetName?: string, postNo?: string, city?: string, shippingFirstName?: string, shippingLastName?: string, shippingStreetName?: string, shippingPostNo?: string, shippingCity?: string, shippingCountry?: string, businessSocialSecurityNo?: string, businessName?: string, businessStreetName?: string, businessPostNo?: string, businessCity?: string, branchOffice?: string, department?: string, cellPhone?: string, email?: string, extraEmail?: string, termsOfPaymentId?: string, termsOfDeliveryId?: string, wayOfDeliveryId?: string, ourReference?: string, yourReference?: string, termsOfPaymentQtyDaysId?: number, phone?: string, doorcode?: string, countryId?: string, languageId?: string, currencyId?: string, legalPersonTypeId?: number, reference?: string, shippingReference?: string, ourPersonId?: number, shippingLongitude?: string, shippingLatitude?: string, externalSubscriptionId?: string, externalAddressSelector?: string, externalFortnoxCustomerNo?: string, referredByPersonId?: number, responsiblePersonId?: number, responsibleName?: string, qtyRelatedDocuments?: number, pendingDelete?: boolean, comment?: string, shippingComment?: string): Promise<PersonDetails>;
    /**
     * @personid (optional) 
     * @return Success
     */
    lockFromAccountAccess(personid?: number): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
}

export class UserClient extends base.CoreApiBaseClient implements IUserClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUsers() {
        return new Promise<Person[]>((resolve, reject) => {
            this.getUsersWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getUsersWithCallbacks(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/User/GetUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetUsersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetUsersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetUsersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetUsers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetUsers(xhr: any): Person[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Person[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getActiveUsers() {
        return new Promise<Person[]>((resolve, reject) => {
            this.getActiveUsersWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getActiveUsersWithCallbacks(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/User/GetActiveUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetActiveUsersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetActiveUsersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetActiveUsersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetActiveUsers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetActiveUsers(xhr: any): Person[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Person[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getLockedUsers() {
        return new Promise<Person[]>((resolve, reject) => {
            this.getLockedUsersWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getLockedUsersWithCallbacks(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/User/GetLockedUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetLockedUsersWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetLockedUsersWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetLockedUsersWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetLockedUsers(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetLockedUsers(xhr: any): Person[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: Person[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getUserDetails(id?: number) {
        return new Promise<PersonDetails>((resolve, reject) => {
            this.getUserDetailsWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getUserDetailsWithCallbacks(id: number, onSuccess?: (result: PersonDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/User/GetUserDetails?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetUserDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetUserDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetUserDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetUserDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetUserDetails(xhr: any): PersonDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonDetails.fromJS(resultData200) : new PersonDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @contactFilters (optional) 
     * @contactPersons (optional) 
     * @customFields (optional) 
     * @personId (optional) 
     * @roleName (optional) 
     * @sellingPrice (optional) 
     * @defaultCompensation (optional) 
     * @defaultCompensationUom (optional) 
     * @countyCouncilName (optional) 
     * @preferedCountyCouncilNames (optional) 
     * @defaultVatSetting (optional) 
     * @itemType (optional) 
     * @availableWeeksAsJson (optional) 
     * @knowledgeOfMedicalRecord (optional) 
     * @isNew (optional) 
     * @createdDate (optional) 
     * @updatedDate (optional) 
     * @qualityResult (optional) 
     * @lastContactDate (optional) 
     * @areaOfExpertise (optional) 
     * @allAreaOfExpertises (optional) 
     * @bornDate (optional) 
     * @systemRoleName (optional) 
     * @roleAccess (optional) 
     * @accountId (optional) 
     * @forSystemRole (optional) 
     * @availableForWorkInCountries (optional) 
     * @belongToId (optional) 
     * @socialSecurityNo2 (optional) 
     * @orderCountry (optional) 
     * @costCenter (optional) 
     * @name (optional) 
     * @shippingName (optional) 
     * @fax (optional) 
     * @web (optional) 
     * @taxPercentage (optional) 
     * @taxTable (optional) 
     * @bank (optional) 
     * @clearingNumber (optional) 
     * @bankAccountNumber (optional) 
     * @employeeNumber (optional) 
     * @bankGiro (optional) 
     * @plusGiro (optional) 
     * @vatNr (optional) 
     * @sNICode (optional) 
     * @iBANBankGiro (optional) 
     * @bICPlusGiro (optional) 
     * @title (optional) 
     * @description (optional) 
     * @syncShippingAddress (optional) 
     * @deactivated (optional) 
     * @workCompensationMultiplierId (optional) 
     * @workCompensationMultiplierValue (optional) 
     * @vacationPayMultiplier (optional) 
     * @socialSecurityNo (optional) 
     * @imageUrl (optional) 
     * @firstName (optional) 
     * @lastName (optional) 
     * @streetName (optional) 
     * @postNo (optional) 
     * @city (optional) 
     * @shippingFirstName (optional) 
     * @shippingLastName (optional) 
     * @shippingStreetName (optional) 
     * @shippingPostNo (optional) 
     * @shippingCity (optional) 
     * @shippingCountry (optional) 
     * @businessSocialSecurityNo (optional) 
     * @businessName (optional) 
     * @businessStreetName (optional) 
     * @businessPostNo (optional) 
     * @businessCity (optional) 
     * @branchOffice (optional) 
     * @department (optional) 
     * @cellPhone (optional) 
     * @email (optional) 
     * @extraEmail (optional) 
     * @termsOfPaymentId (optional) 
     * @termsOfDeliveryId (optional) 
     * @wayOfDeliveryId (optional) 
     * @ourReference (optional) 
     * @yourReference (optional) 
     * @termsOfPaymentQtyDaysId (optional) 
     * @phone (optional) 
     * @doorcode (optional) 
     * @countryId (optional) 
     * @languageId (optional) 
     * @currencyId (optional) 
     * @legalPersonTypeId (optional) 
     * @reference (optional) 
     * @shippingReference (optional) 
     * @ourPersonId (optional) 
     * @shippingLongitude (optional) 
     * @shippingLatitude (optional) 
     * @externalSubscriptionId (optional) 
     * @externalAddressSelector (optional) 
     * @externalFortnoxCustomerNo (optional) 
     * @referredByPersonId (optional) 
     * @responsiblePersonId (optional) 
     * @responsibleName (optional) 
     * @qtyRelatedDocuments (optional) 
     * @pendingDelete (optional) 
     * @comment (optional) 
     * @shippingComment (optional) 
     * @return Success
     */
    post(contactFilters?: any[], contactPersons?: any[], customFields?: any[], personId?: number, roleName?: string, sellingPrice?: number, defaultCompensation?: number, defaultCompensationUom?: string, countyCouncilName?: string, preferedCountyCouncilNames?: string[], defaultVatSetting?: number, itemType?: string, availableWeeksAsJson?: string, knowledgeOfMedicalRecord?: string, isNew?: boolean, createdDate?: Date, updatedDate?: Date, qualityResult?: number, lastContactDate?: Date, areaOfExpertise?: string, allAreaOfExpertises?: string[], bornDate?: Date, systemRoleName?: string, roleAccess?: string, accountId?: number, forSystemRole?: string, availableForWorkInCountries?: string[], belongToId?: string, socialSecurityNo2?: string, orderCountry?: string, costCenter?: string, name?: string, shippingName?: string, fax?: string, web?: string, taxPercentage?: number, taxTable?: string, bank?: string, clearingNumber?: string, bankAccountNumber?: string, employeeNumber?: string, bankGiro?: string, plusGiro?: string, vatNr?: string, sNICode?: string, iBANBankGiro?: string, bICPlusGiro?: string, title?: string, description?: string, syncShippingAddress?: boolean, deactivated?: boolean, workCompensationMultiplierId?: number, workCompensationMultiplierValue?: number, vacationPayMultiplier?: number, socialSecurityNo?: string, imageUrl?: string, firstName?: string, lastName?: string, streetName?: string, postNo?: string, city?: string, shippingFirstName?: string, shippingLastName?: string, shippingStreetName?: string, shippingPostNo?: string, shippingCity?: string, shippingCountry?: string, businessSocialSecurityNo?: string, businessName?: string, businessStreetName?: string, businessPostNo?: string, businessCity?: string, branchOffice?: string, department?: string, cellPhone?: string, email?: string, extraEmail?: string, termsOfPaymentId?: string, termsOfDeliveryId?: string, wayOfDeliveryId?: string, ourReference?: string, yourReference?: string, termsOfPaymentQtyDaysId?: number, phone?: string, doorcode?: string, countryId?: string, languageId?: string, currencyId?: string, legalPersonTypeId?: number, reference?: string, shippingReference?: string, ourPersonId?: number, shippingLongitude?: string, shippingLatitude?: string, externalSubscriptionId?: string, externalAddressSelector?: string, externalFortnoxCustomerNo?: string, referredByPersonId?: number, responsiblePersonId?: number, responsibleName?: string, qtyRelatedDocuments?: number, pendingDelete?: boolean, comment?: string, shippingComment?: string) {
        return new Promise<PersonDetails>((resolve, reject) => {
            this.postWithCallbacks(contactFilters, contactPersons, customFields, personId, roleName, sellingPrice, defaultCompensation, defaultCompensationUom, countyCouncilName, preferedCountyCouncilNames, defaultVatSetting, itemType, availableWeeksAsJson, knowledgeOfMedicalRecord, isNew, createdDate, updatedDate, qualityResult, lastContactDate, areaOfExpertise, allAreaOfExpertises, bornDate, systemRoleName, roleAccess, accountId, forSystemRole, availableForWorkInCountries, belongToId, socialSecurityNo2, orderCountry, costCenter, name, shippingName, fax, web, taxPercentage, taxTable, bank, clearingNumber, bankAccountNumber, employeeNumber, bankGiro, plusGiro, vatNr, sNICode, iBANBankGiro, bICPlusGiro, title, description, syncShippingAddress, deactivated, workCompensationMultiplierId, workCompensationMultiplierValue, vacationPayMultiplier, socialSecurityNo, imageUrl, firstName, lastName, streetName, postNo, city, shippingFirstName, shippingLastName, shippingStreetName, shippingPostNo, shippingCity, shippingCountry, businessSocialSecurityNo, businessName, businessStreetName, businessPostNo, businessCity, branchOffice, department, cellPhone, email, extraEmail, termsOfPaymentId, termsOfDeliveryId, wayOfDeliveryId, ourReference, yourReference, termsOfPaymentQtyDaysId, phone, doorcode, countryId, languageId, currencyId, legalPersonTypeId, reference, shippingReference, ourPersonId, shippingLongitude, shippingLatitude, externalSubscriptionId, externalAddressSelector, externalFortnoxCustomerNo, referredByPersonId, responsiblePersonId, responsibleName, qtyRelatedDocuments, pendingDelete, comment, shippingComment, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(contactFilters: any[], contactPersons: any[], customFields: any[], personId: number, roleName: string, sellingPrice: number, defaultCompensation: number, defaultCompensationUom: string, countyCouncilName: string, preferedCountyCouncilNames: string[], defaultVatSetting: number, itemType: string, availableWeeksAsJson: string, knowledgeOfMedicalRecord: string, isNew: boolean, createdDate: Date, updatedDate: Date, qualityResult: number, lastContactDate: Date, areaOfExpertise: string, allAreaOfExpertises: string[], bornDate: Date, systemRoleName: string, roleAccess: string, accountId: number, forSystemRole: string, availableForWorkInCountries: string[], belongToId: string, socialSecurityNo2: string, orderCountry: string, costCenter: string, name: string, shippingName: string, fax: string, web: string, taxPercentage: number, taxTable: string, bank: string, clearingNumber: string, bankAccountNumber: string, employeeNumber: string, bankGiro: string, plusGiro: string, vatNr: string, sNICode: string, iBANBankGiro: string, bICPlusGiro: string, title: string, description: string, syncShippingAddress: boolean, deactivated: boolean, workCompensationMultiplierId: number, workCompensationMultiplierValue: number, vacationPayMultiplier: number, socialSecurityNo: string, imageUrl: string, firstName: string, lastName: string, streetName: string, postNo: string, city: string, shippingFirstName: string, shippingLastName: string, shippingStreetName: string, shippingPostNo: string, shippingCity: string, shippingCountry: string, businessSocialSecurityNo: string, businessName: string, businessStreetName: string, businessPostNo: string, businessCity: string, branchOffice: string, department: string, cellPhone: string, email: string, extraEmail: string, termsOfPaymentId: string, termsOfDeliveryId: string, wayOfDeliveryId: string, ourReference: string, yourReference: string, termsOfPaymentQtyDaysId: number, phone: string, doorcode: string, countryId: string, languageId: string, currencyId: string, legalPersonTypeId: number, reference: string, shippingReference: string, ourPersonId: number, shippingLongitude: string, shippingLatitude: string, externalSubscriptionId: string, externalAddressSelector: string, externalFortnoxCustomerNo: string, referredByPersonId: number, responsiblePersonId: number, responsibleName: string, qtyRelatedDocuments: number, pendingDelete: boolean, comment: string, shippingComment: string, onSuccess?: (result: PersonDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/User/Post?";
        if (contactFilters !== undefined)
            contactFilters.forEach((item, index) => {
                for (let attr in item)
                    url_ += "ContactFilters[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (contactPersons !== undefined)
            contactPersons.forEach((item, index) => {
                for (let attr in item)
                    url_ += "ContactPersons[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (customFields !== undefined)
            customFields.forEach((item, index) => {
                for (let attr in item)
                    url_ += "CustomFields[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (personId !== undefined)
            url_ += "PersonId=" + encodeURIComponent("" + personId) + "&";
        if (roleName !== undefined)
            url_ += "RoleName=" + encodeURIComponent("" + roleName) + "&";
        if (sellingPrice !== undefined)
            url_ += "SellingPrice=" + encodeURIComponent("" + sellingPrice) + "&";
        if (defaultCompensation !== undefined)
            url_ += "DefaultCompensation=" + encodeURIComponent("" + defaultCompensation) + "&";
        if (defaultCompensationUom !== undefined)
            url_ += "DefaultCompensationUom=" + encodeURIComponent("" + defaultCompensationUom) + "&";
        if (countyCouncilName !== undefined)
            url_ += "CountyCouncilName=" + encodeURIComponent("" + countyCouncilName) + "&";
        if (preferedCountyCouncilNames !== undefined)
            preferedCountyCouncilNames.forEach(item => { url_ += "PreferedCountyCouncilNames=" + encodeURIComponent("" + item) + "&"; });
        if (defaultVatSetting !== undefined)
            url_ += "DefaultVatSetting=" + encodeURIComponent("" + defaultVatSetting) + "&";
        if (itemType !== undefined)
            url_ += "ItemType=" + encodeURIComponent("" + itemType) + "&";
        if (availableWeeksAsJson !== undefined)
            url_ += "AvailableWeeksAsJson=" + encodeURIComponent("" + availableWeeksAsJson) + "&";
        if (knowledgeOfMedicalRecord !== undefined)
            url_ += "KnowledgeOfMedicalRecord=" + encodeURIComponent("" + knowledgeOfMedicalRecord) + "&";
        if (isNew !== undefined)
            url_ += "IsNew=" + encodeURIComponent("" + isNew) + "&";
        if (createdDate !== undefined)
            url_ += "CreatedDate=" + encodeURIComponent("" + createdDate.toJSON()) + "&";
        if (updatedDate !== undefined)
            url_ += "UpdatedDate=" + encodeURIComponent("" + updatedDate.toJSON()) + "&";
        if (qualityResult !== undefined)
            url_ += "QualityResult=" + encodeURIComponent("" + qualityResult) + "&";
        if (lastContactDate !== undefined)
            url_ += "LastContactDate=" + encodeURIComponent("" + lastContactDate.toJSON()) + "&";
        if (areaOfExpertise !== undefined)
            url_ += "AreaOfExpertise=" + encodeURIComponent("" + areaOfExpertise) + "&";
        if (allAreaOfExpertises !== undefined)
            allAreaOfExpertises.forEach(item => { url_ += "AllAreaOfExpertises=" + encodeURIComponent("" + item) + "&"; });
        if (bornDate !== undefined)
            url_ += "BornDate=" + encodeURIComponent("" + bornDate.toJSON()) + "&";
        if (systemRoleName !== undefined)
            url_ += "SystemRoleName=" + encodeURIComponent("" + systemRoleName) + "&";
        if (roleAccess !== undefined)
            url_ += "RoleAccess=" + encodeURIComponent("" + roleAccess) + "&";
        if (accountId !== undefined)
            url_ += "AccountId=" + encodeURIComponent("" + accountId) + "&";
        if (forSystemRole !== undefined)
            url_ += "ForSystemRole=" + encodeURIComponent("" + forSystemRole) + "&";
        if (availableForWorkInCountries !== undefined)
            availableForWorkInCountries.forEach(item => { url_ += "AvailableForWorkInCountries=" + encodeURIComponent("" + item) + "&"; });
        if (belongToId !== undefined)
            url_ += "BelongToId=" + encodeURIComponent("" + belongToId) + "&";
        if (socialSecurityNo2 !== undefined)
            url_ += "SocialSecurityNo2=" + encodeURIComponent("" + socialSecurityNo2) + "&";
        if (orderCountry !== undefined)
            url_ += "OrderCountry=" + encodeURIComponent("" + orderCountry) + "&";
        if (costCenter !== undefined)
            url_ += "CostCenter=" + encodeURIComponent("" + costCenter) + "&";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (shippingName !== undefined)
            url_ += "ShippingName=" + encodeURIComponent("" + shippingName) + "&";
        if (fax !== undefined)
            url_ += "Fax=" + encodeURIComponent("" + fax) + "&";
        if (web !== undefined)
            url_ += "Web=" + encodeURIComponent("" + web) + "&";
        if (taxPercentage !== undefined)
            url_ += "TaxPercentage=" + encodeURIComponent("" + taxPercentage) + "&";
        if (taxTable !== undefined)
            url_ += "TaxTable=" + encodeURIComponent("" + taxTable) + "&";
        if (bank !== undefined)
            url_ += "Bank=" + encodeURIComponent("" + bank) + "&";
        if (clearingNumber !== undefined)
            url_ += "ClearingNumber=" + encodeURIComponent("" + clearingNumber) + "&";
        if (bankAccountNumber !== undefined)
            url_ += "BankAccountNumber=" + encodeURIComponent("" + bankAccountNumber) + "&";
        if (employeeNumber !== undefined)
            url_ += "EmployeeNumber=" + encodeURIComponent("" + employeeNumber) + "&";
        if (bankGiro !== undefined)
            url_ += "BankGiro=" + encodeURIComponent("" + bankGiro) + "&";
        if (plusGiro !== undefined)
            url_ += "PlusGiro=" + encodeURIComponent("" + plusGiro) + "&";
        if (vatNr !== undefined)
            url_ += "VatNr=" + encodeURIComponent("" + vatNr) + "&";
        if (sNICode !== undefined)
            url_ += "SNICode=" + encodeURIComponent("" + sNICode) + "&";
        if (iBANBankGiro !== undefined)
            url_ += "IBANBankGiro=" + encodeURIComponent("" + iBANBankGiro) + "&";
        if (bICPlusGiro !== undefined)
            url_ += "BICPlusGiro=" + encodeURIComponent("" + bICPlusGiro) + "&";
        if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (description !== undefined)
            url_ += "Description=" + encodeURIComponent("" + description) + "&";
        if (syncShippingAddress !== undefined)
            url_ += "SyncShippingAddress=" + encodeURIComponent("" + syncShippingAddress) + "&";
        if (deactivated !== undefined)
            url_ += "Deactivated=" + encodeURIComponent("" + deactivated) + "&";
        if (workCompensationMultiplierId !== undefined)
            url_ += "WorkCompensationMultiplierId=" + encodeURIComponent("" + workCompensationMultiplierId) + "&";
        if (workCompensationMultiplierValue !== undefined)
            url_ += "WorkCompensationMultiplierValue=" + encodeURIComponent("" + workCompensationMultiplierValue) + "&";
        if (vacationPayMultiplier !== undefined)
            url_ += "VacationPayMultiplier=" + encodeURIComponent("" + vacationPayMultiplier) + "&";
        if (socialSecurityNo !== undefined)
            url_ += "SocialSecurityNo=" + encodeURIComponent("" + socialSecurityNo) + "&";
        if (imageUrl !== undefined)
            url_ += "ImageUrl=" + encodeURIComponent("" + imageUrl) + "&";
        if (firstName !== undefined)
            url_ += "FirstName=" + encodeURIComponent("" + firstName) + "&";
        if (lastName !== undefined)
            url_ += "LastName=" + encodeURIComponent("" + lastName) + "&";
        if (streetName !== undefined)
            url_ += "StreetName=" + encodeURIComponent("" + streetName) + "&";
        if (postNo !== undefined)
            url_ += "PostNo=" + encodeURIComponent("" + postNo) + "&";
        if (city !== undefined)
            url_ += "City=" + encodeURIComponent("" + city) + "&";
        if (shippingFirstName !== undefined)
            url_ += "ShippingFirstName=" + encodeURIComponent("" + shippingFirstName) + "&";
        if (shippingLastName !== undefined)
            url_ += "ShippingLastName=" + encodeURIComponent("" + shippingLastName) + "&";
        if (shippingStreetName !== undefined)
            url_ += "ShippingStreetName=" + encodeURIComponent("" + shippingStreetName) + "&";
        if (shippingPostNo !== undefined)
            url_ += "ShippingPostNo=" + encodeURIComponent("" + shippingPostNo) + "&";
        if (shippingCity !== undefined)
            url_ += "ShippingCity=" + encodeURIComponent("" + shippingCity) + "&";
        if (shippingCountry !== undefined)
            url_ += "ShippingCountry=" + encodeURIComponent("" + shippingCountry) + "&";
        if (businessSocialSecurityNo !== undefined)
            url_ += "BusinessSocialSecurityNo=" + encodeURIComponent("" + businessSocialSecurityNo) + "&";
        if (businessName !== undefined)
            url_ += "BusinessName=" + encodeURIComponent("" + businessName) + "&";
        if (businessStreetName !== undefined)
            url_ += "BusinessStreetName=" + encodeURIComponent("" + businessStreetName) + "&";
        if (businessPostNo !== undefined)
            url_ += "BusinessPostNo=" + encodeURIComponent("" + businessPostNo) + "&";
        if (businessCity !== undefined)
            url_ += "BusinessCity=" + encodeURIComponent("" + businessCity) + "&";
        if (branchOffice !== undefined)
            url_ += "BranchOffice=" + encodeURIComponent("" + branchOffice) + "&";
        if (department !== undefined)
            url_ += "Department=" + encodeURIComponent("" + department) + "&";
        if (cellPhone !== undefined)
            url_ += "CellPhone=" + encodeURIComponent("" + cellPhone) + "&";
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (extraEmail !== undefined)
            url_ += "ExtraEmail=" + encodeURIComponent("" + extraEmail) + "&";
        if (termsOfPaymentId !== undefined)
            url_ += "TermsOfPaymentId=" + encodeURIComponent("" + termsOfPaymentId) + "&";
        if (termsOfDeliveryId !== undefined)
            url_ += "TermsOfDeliveryId=" + encodeURIComponent("" + termsOfDeliveryId) + "&";
        if (wayOfDeliveryId !== undefined)
            url_ += "WayOfDeliveryId=" + encodeURIComponent("" + wayOfDeliveryId) + "&";
        if (ourReference !== undefined)
            url_ += "OurReference=" + encodeURIComponent("" + ourReference) + "&";
        if (yourReference !== undefined)
            url_ += "YourReference=" + encodeURIComponent("" + yourReference) + "&";
        if (termsOfPaymentQtyDaysId !== undefined)
            url_ += "TermsOfPaymentQtyDaysId=" + encodeURIComponent("" + termsOfPaymentQtyDaysId) + "&";
        if (phone !== undefined)
            url_ += "Phone=" + encodeURIComponent("" + phone) + "&";
        if (doorcode !== undefined)
            url_ += "Doorcode=" + encodeURIComponent("" + doorcode) + "&";
        if (countryId !== undefined)
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&";
        if (languageId !== undefined)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (currencyId !== undefined)
            url_ += "CurrencyId=" + encodeURIComponent("" + currencyId) + "&";
        if (legalPersonTypeId !== undefined)
            url_ += "LegalPersonTypeId=" + encodeURIComponent("" + legalPersonTypeId) + "&";
        if (reference !== undefined)
            url_ += "Reference=" + encodeURIComponent("" + reference) + "&";
        if (shippingReference !== undefined)
            url_ += "ShippingReference=" + encodeURIComponent("" + shippingReference) + "&";
        if (ourPersonId !== undefined)
            url_ += "OurPersonId=" + encodeURIComponent("" + ourPersonId) + "&";
        if (shippingLongitude !== undefined)
            url_ += "ShippingLongitude=" + encodeURIComponent("" + shippingLongitude) + "&";
        if (shippingLatitude !== undefined)
            url_ += "ShippingLatitude=" + encodeURIComponent("" + shippingLatitude) + "&";
        if (externalSubscriptionId !== undefined)
            url_ += "ExternalSubscriptionId=" + encodeURIComponent("" + externalSubscriptionId) + "&";
        if (externalAddressSelector !== undefined)
            url_ += "ExternalAddressSelector=" + encodeURIComponent("" + externalAddressSelector) + "&";
        if (externalFortnoxCustomerNo !== undefined)
            url_ += "ExternalFortnoxCustomerNo=" + encodeURIComponent("" + externalFortnoxCustomerNo) + "&";
        if (referredByPersonId !== undefined)
            url_ += "ReferredByPersonId=" + encodeURIComponent("" + referredByPersonId) + "&";
        if (responsiblePersonId !== undefined)
            url_ += "ResponsiblePersonId=" + encodeURIComponent("" + responsiblePersonId) + "&";
        if (responsibleName !== undefined)
            url_ += "ResponsibleName=" + encodeURIComponent("" + responsibleName) + "&";
        if (qtyRelatedDocuments !== undefined)
            url_ += "QtyRelatedDocuments=" + encodeURIComponent("" + qtyRelatedDocuments) + "&";
        if (pendingDelete !== undefined)
            url_ += "PendingDelete=" + encodeURIComponent("" + pendingDelete) + "&";
        if (comment !== undefined)
            url_ += "Comment=" + encodeURIComponent("" + comment) + "&";
        if (shippingComment !== undefined)
            url_ += "ShippingComment=" + encodeURIComponent("" + shippingComment) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): PersonDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonDetails.fromJS(resultData200) : new PersonDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @contactFilters (optional) 
     * @contactPersons (optional) 
     * @customFields (optional) 
     * @personId (optional) 
     * @roleName (optional) 
     * @sellingPrice (optional) 
     * @defaultCompensation (optional) 
     * @defaultCompensationUom (optional) 
     * @countyCouncilName (optional) 
     * @preferedCountyCouncilNames (optional) 
     * @defaultVatSetting (optional) 
     * @itemType (optional) 
     * @availableWeeksAsJson (optional) 
     * @knowledgeOfMedicalRecord (optional) 
     * @isNew (optional) 
     * @createdDate (optional) 
     * @updatedDate (optional) 
     * @qualityResult (optional) 
     * @lastContactDate (optional) 
     * @areaOfExpertise (optional) 
     * @allAreaOfExpertises (optional) 
     * @bornDate (optional) 
     * @systemRoleName (optional) 
     * @roleAccess (optional) 
     * @accountId (optional) 
     * @forSystemRole (optional) 
     * @availableForWorkInCountries (optional) 
     * @belongToId (optional) 
     * @socialSecurityNo2 (optional) 
     * @orderCountry (optional) 
     * @costCenter (optional) 
     * @name (optional) 
     * @shippingName (optional) 
     * @fax (optional) 
     * @web (optional) 
     * @taxPercentage (optional) 
     * @taxTable (optional) 
     * @bank (optional) 
     * @clearingNumber (optional) 
     * @bankAccountNumber (optional) 
     * @employeeNumber (optional) 
     * @bankGiro (optional) 
     * @plusGiro (optional) 
     * @vatNr (optional) 
     * @sNICode (optional) 
     * @iBANBankGiro (optional) 
     * @bICPlusGiro (optional) 
     * @title (optional) 
     * @description (optional) 
     * @syncShippingAddress (optional) 
     * @deactivated (optional) 
     * @workCompensationMultiplierId (optional) 
     * @workCompensationMultiplierValue (optional) 
     * @vacationPayMultiplier (optional) 
     * @socialSecurityNo (optional) 
     * @imageUrl (optional) 
     * @firstName (optional) 
     * @lastName (optional) 
     * @streetName (optional) 
     * @postNo (optional) 
     * @city (optional) 
     * @shippingFirstName (optional) 
     * @shippingLastName (optional) 
     * @shippingStreetName (optional) 
     * @shippingPostNo (optional) 
     * @shippingCity (optional) 
     * @shippingCountry (optional) 
     * @businessSocialSecurityNo (optional) 
     * @businessName (optional) 
     * @businessStreetName (optional) 
     * @businessPostNo (optional) 
     * @businessCity (optional) 
     * @branchOffice (optional) 
     * @department (optional) 
     * @cellPhone (optional) 
     * @email (optional) 
     * @extraEmail (optional) 
     * @termsOfPaymentId (optional) 
     * @termsOfDeliveryId (optional) 
     * @wayOfDeliveryId (optional) 
     * @ourReference (optional) 
     * @yourReference (optional) 
     * @termsOfPaymentQtyDaysId (optional) 
     * @phone (optional) 
     * @doorcode (optional) 
     * @countryId (optional) 
     * @languageId (optional) 
     * @currencyId (optional) 
     * @legalPersonTypeId (optional) 
     * @reference (optional) 
     * @shippingReference (optional) 
     * @ourPersonId (optional) 
     * @shippingLongitude (optional) 
     * @shippingLatitude (optional) 
     * @externalSubscriptionId (optional) 
     * @externalAddressSelector (optional) 
     * @externalFortnoxCustomerNo (optional) 
     * @referredByPersonId (optional) 
     * @responsiblePersonId (optional) 
     * @responsibleName (optional) 
     * @qtyRelatedDocuments (optional) 
     * @pendingDelete (optional) 
     * @comment (optional) 
     * @shippingComment (optional) 
     * @return Success
     */
    put(id?: number, contactFilters?: any[], contactPersons?: any[], customFields?: any[], personId?: number, roleName?: string, sellingPrice?: number, defaultCompensation?: number, defaultCompensationUom?: string, countyCouncilName?: string, preferedCountyCouncilNames?: string[], defaultVatSetting?: number, itemType?: string, availableWeeksAsJson?: string, knowledgeOfMedicalRecord?: string, isNew?: boolean, createdDate?: Date, updatedDate?: Date, qualityResult?: number, lastContactDate?: Date, areaOfExpertise?: string, allAreaOfExpertises?: string[], bornDate?: Date, systemRoleName?: string, roleAccess?: string, accountId?: number, forSystemRole?: string, availableForWorkInCountries?: string[], belongToId?: string, socialSecurityNo2?: string, orderCountry?: string, costCenter?: string, name?: string, shippingName?: string, fax?: string, web?: string, taxPercentage?: number, taxTable?: string, bank?: string, clearingNumber?: string, bankAccountNumber?: string, employeeNumber?: string, bankGiro?: string, plusGiro?: string, vatNr?: string, sNICode?: string, iBANBankGiro?: string, bICPlusGiro?: string, title?: string, description?: string, syncShippingAddress?: boolean, deactivated?: boolean, workCompensationMultiplierId?: number, workCompensationMultiplierValue?: number, vacationPayMultiplier?: number, socialSecurityNo?: string, imageUrl?: string, firstName?: string, lastName?: string, streetName?: string, postNo?: string, city?: string, shippingFirstName?: string, shippingLastName?: string, shippingStreetName?: string, shippingPostNo?: string, shippingCity?: string, shippingCountry?: string, businessSocialSecurityNo?: string, businessName?: string, businessStreetName?: string, businessPostNo?: string, businessCity?: string, branchOffice?: string, department?: string, cellPhone?: string, email?: string, extraEmail?: string, termsOfPaymentId?: string, termsOfDeliveryId?: string, wayOfDeliveryId?: string, ourReference?: string, yourReference?: string, termsOfPaymentQtyDaysId?: number, phone?: string, doorcode?: string, countryId?: string, languageId?: string, currencyId?: string, legalPersonTypeId?: number, reference?: string, shippingReference?: string, ourPersonId?: number, shippingLongitude?: string, shippingLatitude?: string, externalSubscriptionId?: string, externalAddressSelector?: string, externalFortnoxCustomerNo?: string, referredByPersonId?: number, responsiblePersonId?: number, responsibleName?: string, qtyRelatedDocuments?: number, pendingDelete?: boolean, comment?: string, shippingComment?: string) {
        return new Promise<PersonDetails>((resolve, reject) => {
            this.putWithCallbacks(id, contactFilters, contactPersons, customFields, personId, roleName, sellingPrice, defaultCompensation, defaultCompensationUom, countyCouncilName, preferedCountyCouncilNames, defaultVatSetting, itemType, availableWeeksAsJson, knowledgeOfMedicalRecord, isNew, createdDate, updatedDate, qualityResult, lastContactDate, areaOfExpertise, allAreaOfExpertises, bornDate, systemRoleName, roleAccess, accountId, forSystemRole, availableForWorkInCountries, belongToId, socialSecurityNo2, orderCountry, costCenter, name, shippingName, fax, web, taxPercentage, taxTable, bank, clearingNumber, bankAccountNumber, employeeNumber, bankGiro, plusGiro, vatNr, sNICode, iBANBankGiro, bICPlusGiro, title, description, syncShippingAddress, deactivated, workCompensationMultiplierId, workCompensationMultiplierValue, vacationPayMultiplier, socialSecurityNo, imageUrl, firstName, lastName, streetName, postNo, city, shippingFirstName, shippingLastName, shippingStreetName, shippingPostNo, shippingCity, shippingCountry, businessSocialSecurityNo, businessName, businessStreetName, businessPostNo, businessCity, branchOffice, department, cellPhone, email, extraEmail, termsOfPaymentId, termsOfDeliveryId, wayOfDeliveryId, ourReference, yourReference, termsOfPaymentQtyDaysId, phone, doorcode, countryId, languageId, currencyId, legalPersonTypeId, reference, shippingReference, ourPersonId, shippingLongitude, shippingLatitude, externalSubscriptionId, externalAddressSelector, externalFortnoxCustomerNo, referredByPersonId, responsiblePersonId, responsibleName, qtyRelatedDocuments, pendingDelete, comment, shippingComment, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, contactFilters: any[], contactPersons: any[], customFields: any[], personId: number, roleName: string, sellingPrice: number, defaultCompensation: number, defaultCompensationUom: string, countyCouncilName: string, preferedCountyCouncilNames: string[], defaultVatSetting: number, itemType: string, availableWeeksAsJson: string, knowledgeOfMedicalRecord: string, isNew: boolean, createdDate: Date, updatedDate: Date, qualityResult: number, lastContactDate: Date, areaOfExpertise: string, allAreaOfExpertises: string[], bornDate: Date, systemRoleName: string, roleAccess: string, accountId: number, forSystemRole: string, availableForWorkInCountries: string[], belongToId: string, socialSecurityNo2: string, orderCountry: string, costCenter: string, name: string, shippingName: string, fax: string, web: string, taxPercentage: number, taxTable: string, bank: string, clearingNumber: string, bankAccountNumber: string, employeeNumber: string, bankGiro: string, plusGiro: string, vatNr: string, sNICode: string, iBANBankGiro: string, bICPlusGiro: string, title: string, description: string, syncShippingAddress: boolean, deactivated: boolean, workCompensationMultiplierId: number, workCompensationMultiplierValue: number, vacationPayMultiplier: number, socialSecurityNo: string, imageUrl: string, firstName: string, lastName: string, streetName: string, postNo: string, city: string, shippingFirstName: string, shippingLastName: string, shippingStreetName: string, shippingPostNo: string, shippingCity: string, shippingCountry: string, businessSocialSecurityNo: string, businessName: string, businessStreetName: string, businessPostNo: string, businessCity: string, branchOffice: string, department: string, cellPhone: string, email: string, extraEmail: string, termsOfPaymentId: string, termsOfDeliveryId: string, wayOfDeliveryId: string, ourReference: string, yourReference: string, termsOfPaymentQtyDaysId: number, phone: string, doorcode: string, countryId: string, languageId: string, currencyId: string, legalPersonTypeId: number, reference: string, shippingReference: string, ourPersonId: number, shippingLongitude: string, shippingLatitude: string, externalSubscriptionId: string, externalAddressSelector: string, externalFortnoxCustomerNo: string, referredByPersonId: number, responsiblePersonId: number, responsibleName: string, qtyRelatedDocuments: number, pendingDelete: boolean, comment: string, shippingComment: string, onSuccess?: (result: PersonDetails) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/User/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (contactFilters !== undefined)
            contactFilters.forEach((item, index) => {
                for (let attr in item)
                    url_ += "ContactFilters[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (contactPersons !== undefined)
            contactPersons.forEach((item, index) => {
                for (let attr in item)
                    url_ += "ContactPersons[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (customFields !== undefined)
            customFields.forEach((item, index) => {
                for (let attr in item)
                    url_ += "CustomFields[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (personId !== undefined)
            url_ += "PersonId=" + encodeURIComponent("" + personId) + "&";
        if (roleName !== undefined)
            url_ += "RoleName=" + encodeURIComponent("" + roleName) + "&";
        if (sellingPrice !== undefined)
            url_ += "SellingPrice=" + encodeURIComponent("" + sellingPrice) + "&";
        if (defaultCompensation !== undefined)
            url_ += "DefaultCompensation=" + encodeURIComponent("" + defaultCompensation) + "&";
        if (defaultCompensationUom !== undefined)
            url_ += "DefaultCompensationUom=" + encodeURIComponent("" + defaultCompensationUom) + "&";
        if (countyCouncilName !== undefined)
            url_ += "CountyCouncilName=" + encodeURIComponent("" + countyCouncilName) + "&";
        if (preferedCountyCouncilNames !== undefined)
            preferedCountyCouncilNames.forEach(item => { url_ += "PreferedCountyCouncilNames=" + encodeURIComponent("" + item) + "&"; });
        if (defaultVatSetting !== undefined)
            url_ += "DefaultVatSetting=" + encodeURIComponent("" + defaultVatSetting) + "&";
        if (itemType !== undefined)
            url_ += "ItemType=" + encodeURIComponent("" + itemType) + "&";
        if (availableWeeksAsJson !== undefined)
            url_ += "AvailableWeeksAsJson=" + encodeURIComponent("" + availableWeeksAsJson) + "&";
        if (knowledgeOfMedicalRecord !== undefined)
            url_ += "KnowledgeOfMedicalRecord=" + encodeURIComponent("" + knowledgeOfMedicalRecord) + "&";
        if (isNew !== undefined)
            url_ += "IsNew=" + encodeURIComponent("" + isNew) + "&";
        if (createdDate !== undefined)
            url_ += "CreatedDate=" + encodeURIComponent("" + createdDate.toJSON()) + "&";
        if (updatedDate !== undefined)
            url_ += "UpdatedDate=" + encodeURIComponent("" + updatedDate.toJSON()) + "&";
        if (qualityResult !== undefined)
            url_ += "QualityResult=" + encodeURIComponent("" + qualityResult) + "&";
        if (lastContactDate !== undefined)
            url_ += "LastContactDate=" + encodeURIComponent("" + lastContactDate.toJSON()) + "&";
        if (areaOfExpertise !== undefined)
            url_ += "AreaOfExpertise=" + encodeURIComponent("" + areaOfExpertise) + "&";
        if (allAreaOfExpertises !== undefined)
            allAreaOfExpertises.forEach(item => { url_ += "AllAreaOfExpertises=" + encodeURIComponent("" + item) + "&"; });
        if (bornDate !== undefined)
            url_ += "BornDate=" + encodeURIComponent("" + bornDate.toJSON()) + "&";
        if (systemRoleName !== undefined)
            url_ += "SystemRoleName=" + encodeURIComponent("" + systemRoleName) + "&";
        if (roleAccess !== undefined)
            url_ += "RoleAccess=" + encodeURIComponent("" + roleAccess) + "&";
        if (accountId !== undefined)
            url_ += "AccountId=" + encodeURIComponent("" + accountId) + "&";
        if (forSystemRole !== undefined)
            url_ += "ForSystemRole=" + encodeURIComponent("" + forSystemRole) + "&";
        if (availableForWorkInCountries !== undefined)
            availableForWorkInCountries.forEach(item => { url_ += "AvailableForWorkInCountries=" + encodeURIComponent("" + item) + "&"; });
        if (belongToId !== undefined)
            url_ += "BelongToId=" + encodeURIComponent("" + belongToId) + "&";
        if (socialSecurityNo2 !== undefined)
            url_ += "SocialSecurityNo2=" + encodeURIComponent("" + socialSecurityNo2) + "&";
        if (orderCountry !== undefined)
            url_ += "OrderCountry=" + encodeURIComponent("" + orderCountry) + "&";
        if (costCenter !== undefined)
            url_ += "CostCenter=" + encodeURIComponent("" + costCenter) + "&";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (shippingName !== undefined)
            url_ += "ShippingName=" + encodeURIComponent("" + shippingName) + "&";
        if (fax !== undefined)
            url_ += "Fax=" + encodeURIComponent("" + fax) + "&";
        if (web !== undefined)
            url_ += "Web=" + encodeURIComponent("" + web) + "&";
        if (taxPercentage !== undefined)
            url_ += "TaxPercentage=" + encodeURIComponent("" + taxPercentage) + "&";
        if (taxTable !== undefined)
            url_ += "TaxTable=" + encodeURIComponent("" + taxTable) + "&";
        if (bank !== undefined)
            url_ += "Bank=" + encodeURIComponent("" + bank) + "&";
        if (clearingNumber !== undefined)
            url_ += "ClearingNumber=" + encodeURIComponent("" + clearingNumber) + "&";
        if (bankAccountNumber !== undefined)
            url_ += "BankAccountNumber=" + encodeURIComponent("" + bankAccountNumber) + "&";
        if (employeeNumber !== undefined)
            url_ += "EmployeeNumber=" + encodeURIComponent("" + employeeNumber) + "&";
        if (bankGiro !== undefined)
            url_ += "BankGiro=" + encodeURIComponent("" + bankGiro) + "&";
        if (plusGiro !== undefined)
            url_ += "PlusGiro=" + encodeURIComponent("" + plusGiro) + "&";
        if (vatNr !== undefined)
            url_ += "VatNr=" + encodeURIComponent("" + vatNr) + "&";
        if (sNICode !== undefined)
            url_ += "SNICode=" + encodeURIComponent("" + sNICode) + "&";
        if (iBANBankGiro !== undefined)
            url_ += "IBANBankGiro=" + encodeURIComponent("" + iBANBankGiro) + "&";
        if (bICPlusGiro !== undefined)
            url_ += "BICPlusGiro=" + encodeURIComponent("" + bICPlusGiro) + "&";
        if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (description !== undefined)
            url_ += "Description=" + encodeURIComponent("" + description) + "&";
        if (syncShippingAddress !== undefined)
            url_ += "SyncShippingAddress=" + encodeURIComponent("" + syncShippingAddress) + "&";
        if (deactivated !== undefined)
            url_ += "Deactivated=" + encodeURIComponent("" + deactivated) + "&";
        if (workCompensationMultiplierId !== undefined)
            url_ += "WorkCompensationMultiplierId=" + encodeURIComponent("" + workCompensationMultiplierId) + "&";
        if (workCompensationMultiplierValue !== undefined)
            url_ += "WorkCompensationMultiplierValue=" + encodeURIComponent("" + workCompensationMultiplierValue) + "&";
        if (vacationPayMultiplier !== undefined)
            url_ += "VacationPayMultiplier=" + encodeURIComponent("" + vacationPayMultiplier) + "&";
        if (socialSecurityNo !== undefined)
            url_ += "SocialSecurityNo=" + encodeURIComponent("" + socialSecurityNo) + "&";
        if (imageUrl !== undefined)
            url_ += "ImageUrl=" + encodeURIComponent("" + imageUrl) + "&";
        if (firstName !== undefined)
            url_ += "FirstName=" + encodeURIComponent("" + firstName) + "&";
        if (lastName !== undefined)
            url_ += "LastName=" + encodeURIComponent("" + lastName) + "&";
        if (streetName !== undefined)
            url_ += "StreetName=" + encodeURIComponent("" + streetName) + "&";
        if (postNo !== undefined)
            url_ += "PostNo=" + encodeURIComponent("" + postNo) + "&";
        if (city !== undefined)
            url_ += "City=" + encodeURIComponent("" + city) + "&";
        if (shippingFirstName !== undefined)
            url_ += "ShippingFirstName=" + encodeURIComponent("" + shippingFirstName) + "&";
        if (shippingLastName !== undefined)
            url_ += "ShippingLastName=" + encodeURIComponent("" + shippingLastName) + "&";
        if (shippingStreetName !== undefined)
            url_ += "ShippingStreetName=" + encodeURIComponent("" + shippingStreetName) + "&";
        if (shippingPostNo !== undefined)
            url_ += "ShippingPostNo=" + encodeURIComponent("" + shippingPostNo) + "&";
        if (shippingCity !== undefined)
            url_ += "ShippingCity=" + encodeURIComponent("" + shippingCity) + "&";
        if (shippingCountry !== undefined)
            url_ += "ShippingCountry=" + encodeURIComponent("" + shippingCountry) + "&";
        if (businessSocialSecurityNo !== undefined)
            url_ += "BusinessSocialSecurityNo=" + encodeURIComponent("" + businessSocialSecurityNo) + "&";
        if (businessName !== undefined)
            url_ += "BusinessName=" + encodeURIComponent("" + businessName) + "&";
        if (businessStreetName !== undefined)
            url_ += "BusinessStreetName=" + encodeURIComponent("" + businessStreetName) + "&";
        if (businessPostNo !== undefined)
            url_ += "BusinessPostNo=" + encodeURIComponent("" + businessPostNo) + "&";
        if (businessCity !== undefined)
            url_ += "BusinessCity=" + encodeURIComponent("" + businessCity) + "&";
        if (branchOffice !== undefined)
            url_ += "BranchOffice=" + encodeURIComponent("" + branchOffice) + "&";
        if (department !== undefined)
            url_ += "Department=" + encodeURIComponent("" + department) + "&";
        if (cellPhone !== undefined)
            url_ += "CellPhone=" + encodeURIComponent("" + cellPhone) + "&";
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (extraEmail !== undefined)
            url_ += "ExtraEmail=" + encodeURIComponent("" + extraEmail) + "&";
        if (termsOfPaymentId !== undefined)
            url_ += "TermsOfPaymentId=" + encodeURIComponent("" + termsOfPaymentId) + "&";
        if (termsOfDeliveryId !== undefined)
            url_ += "TermsOfDeliveryId=" + encodeURIComponent("" + termsOfDeliveryId) + "&";
        if (wayOfDeliveryId !== undefined)
            url_ += "WayOfDeliveryId=" + encodeURIComponent("" + wayOfDeliveryId) + "&";
        if (ourReference !== undefined)
            url_ += "OurReference=" + encodeURIComponent("" + ourReference) + "&";
        if (yourReference !== undefined)
            url_ += "YourReference=" + encodeURIComponent("" + yourReference) + "&";
        if (termsOfPaymentQtyDaysId !== undefined)
            url_ += "TermsOfPaymentQtyDaysId=" + encodeURIComponent("" + termsOfPaymentQtyDaysId) + "&";
        if (phone !== undefined)
            url_ += "Phone=" + encodeURIComponent("" + phone) + "&";
        if (doorcode !== undefined)
            url_ += "Doorcode=" + encodeURIComponent("" + doorcode) + "&";
        if (countryId !== undefined)
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&";
        if (languageId !== undefined)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (currencyId !== undefined)
            url_ += "CurrencyId=" + encodeURIComponent("" + currencyId) + "&";
        if (legalPersonTypeId !== undefined)
            url_ += "LegalPersonTypeId=" + encodeURIComponent("" + legalPersonTypeId) + "&";
        if (reference !== undefined)
            url_ += "Reference=" + encodeURIComponent("" + reference) + "&";
        if (shippingReference !== undefined)
            url_ += "ShippingReference=" + encodeURIComponent("" + shippingReference) + "&";
        if (ourPersonId !== undefined)
            url_ += "OurPersonId=" + encodeURIComponent("" + ourPersonId) + "&";
        if (shippingLongitude !== undefined)
            url_ += "ShippingLongitude=" + encodeURIComponent("" + shippingLongitude) + "&";
        if (shippingLatitude !== undefined)
            url_ += "ShippingLatitude=" + encodeURIComponent("" + shippingLatitude) + "&";
        if (externalSubscriptionId !== undefined)
            url_ += "ExternalSubscriptionId=" + encodeURIComponent("" + externalSubscriptionId) + "&";
        if (externalAddressSelector !== undefined)
            url_ += "ExternalAddressSelector=" + encodeURIComponent("" + externalAddressSelector) + "&";
        if (externalFortnoxCustomerNo !== undefined)
            url_ += "ExternalFortnoxCustomerNo=" + encodeURIComponent("" + externalFortnoxCustomerNo) + "&";
        if (referredByPersonId !== undefined)
            url_ += "ReferredByPersonId=" + encodeURIComponent("" + referredByPersonId) + "&";
        if (responsiblePersonId !== undefined)
            url_ += "ResponsiblePersonId=" + encodeURIComponent("" + responsiblePersonId) + "&";
        if (responsibleName !== undefined)
            url_ += "ResponsibleName=" + encodeURIComponent("" + responsibleName) + "&";
        if (qtyRelatedDocuments !== undefined)
            url_ += "QtyRelatedDocuments=" + encodeURIComponent("" + qtyRelatedDocuments) + "&";
        if (pendingDelete !== undefined)
            url_ += "PendingDelete=" + encodeURIComponent("" + pendingDelete) + "&";
        if (comment !== undefined)
            url_ += "Comment=" + encodeURIComponent("" + comment) + "&";
        if (shippingComment !== undefined)
            url_ += "ShippingComment=" + encodeURIComponent("" + shippingComment) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): PersonDetails {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: PersonDetails = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonDetails.fromJS(resultData200) : new PersonDetails();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @return Success
     */
    lockFromAccountAccess(personid?: number) {
        return new Promise<void>((resolve, reject) => {
            this.lockFromAccountAccessWithCallbacks(personid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private lockFromAccountAccessWithCallbacks(personid: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/User/LockFromAccountAccess?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processLockFromAccountAccessWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processLockFromAccountAccessWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processLockFromAccountAccessWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processLockFromAccountAccess(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processLockFromAccountAccess(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/User/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IWageTypeClient {
    /**
     * @return Success
     */
    getAll(): Promise<WageType[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<WageType>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: WageType): Promise<WageType>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: WageType): Promise<WageType>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class WageTypeClient extends base.CoreApiBaseClient implements IWageTypeClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll() {
        return new Promise<WageType[]>((resolve, reject) => {
            this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(onSuccess?: (result: WageType[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WageType/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): WageType[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WageType[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WageType.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<WageType>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: WageType) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WageType/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): WageType {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WageType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WageType.fromJS(resultData200) : new WageType();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: WageType) {
        return new Promise<WageType>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: WageType, onSuccess?: (result: WageType) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WageType/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): WageType {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WageType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WageType.fromJS(resultData200) : new WageType();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: WageType) {
        return new Promise<WageType>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: WageType, onSuccess?: (result: WageType) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WageType/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): WageType {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WageType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WageType.fromJS(resultData200) : new WageType();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WageType/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IWorkClient {
    /**
     * @workitemids (optional) 
     * @return Success
     */
    getQtyHoursForTimeReportsInWorkItems(workitemids?: number[]): Promise<number>;
}

export class WorkClient extends base.CoreApiBaseClient implements IWorkClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @workitemids (optional) 
     * @return Success
     */
    getQtyHoursForTimeReportsInWorkItems(workitemids?: number[]) {
        return new Promise<number>((resolve, reject) => {
            this.getQtyHoursForTimeReportsInWorkItemsWithCallbacks(workitemids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getQtyHoursForTimeReportsInWorkItemsWithCallbacks(workitemids: number[], onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/Work/GetQtyHoursForTimeReportsInWorkItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(workitemids);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetQtyHoursForTimeReportsInWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetQtyHoursForTimeReportsInWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetQtyHoursForTimeReportsInWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetQtyHoursForTimeReportsInWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetQtyHoursForTimeReportsInWorkItems(xhr: any): number {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IWorkAdClient {
    /**
     * @return Success
     */
    getWorkAdSearchModel(): Promise<WorkAdSearchModel>;
    /**
     * @responsiblepersonid (optional) 
     * @return Success
     */
    getAll(responsiblepersonid?: string): Promise<WorkAd[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    searchWorkAds(model?: WorkAdSearchModel): Promise<WorkAd[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<WorkAd>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: WorkAd): Promise<WorkAd>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: WorkAd): Promise<WorkAd>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
    /**
     * @return Success
     */
    getDefaultWorkAdViewContent(): Promise<ViewContent>;
    /**
     * @return Success
     */
    getDefaultWorkAdsViewContent(): Promise<ViewContent>;
    /**
     * @return Success
     */
    getDefaultLoginViewContent(): Promise<ViewContent>;
}

export class WorkAdClient extends base.CoreApiBaseClient implements IWorkAdClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getWorkAdSearchModel() {
        return new Promise<WorkAdSearchModel>((resolve, reject) => {
            this.getWorkAdSearchModelWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkAdSearchModelWithCallbacks(onSuccess?: (result: WorkAdSearchModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAd/GetWorkAdSearchModel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkAdSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkAdSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkAdSearchModelWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkAdSearchModel(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkAdSearchModel(xhr: any): WorkAdSearchModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAdSearchModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkAdSearchModel.fromJS(resultData200) : new WorkAdSearchModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @responsiblepersonid (optional) 
     * @return Success
     */
    getAll(responsiblepersonid?: string) {
        return new Promise<WorkAd[]>((resolve, reject) => {
            this.getAllWithCallbacks(responsiblepersonid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWithCallbacks(responsiblepersonid: string, onSuccess?: (result: WorkAd[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAd/GetAll?";
        if (responsiblepersonid !== undefined)
            url_ += "responsiblepersonid=" + encodeURIComponent("" + responsiblepersonid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAll(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAll(xhr: any): WorkAd[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAd[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkAd.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    searchWorkAds(model?: WorkAdSearchModel) {
        return new Promise<WorkAd[]>((resolve, reject) => {
            this.searchWorkAdsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private searchWorkAdsWithCallbacks(model: WorkAdSearchModel, onSuccess?: (result: WorkAd[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAd/SearchWorkAds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSearchWorkAdsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSearchWorkAdsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSearchWorkAdsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSearchWorkAds(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSearchWorkAds(xhr: any): WorkAd[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAd[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkAd.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<WorkAd>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: WorkAd) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAd/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): WorkAd {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAd = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkAd.fromJS(resultData200) : new WorkAd();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: WorkAd) {
        return new Promise<WorkAd>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: WorkAd, onSuccess?: (result: WorkAd) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAd/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): WorkAd {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAd = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkAd.fromJS(resultData200) : new WorkAd();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: WorkAd) {
        return new Promise<WorkAd>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: WorkAd, onSuccess?: (result: WorkAd) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAd/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): WorkAd {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAd = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkAd.fromJS(resultData200) : new WorkAd();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAd/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    getDefaultWorkAdViewContent() {
        return new Promise<ViewContent>((resolve, reject) => {
            this.getDefaultWorkAdViewContentWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDefaultWorkAdViewContentWithCallbacks(onSuccess?: (result: ViewContent) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAd/GetDefaultWorkAdViewContent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDefaultWorkAdViewContentWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDefaultWorkAdViewContentWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDefaultWorkAdViewContentWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDefaultWorkAdViewContent(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDefaultWorkAdViewContent(xhr: any): ViewContent {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ViewContent = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ViewContent.fromJS(resultData200) : new ViewContent();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getDefaultWorkAdsViewContent() {
        return new Promise<ViewContent>((resolve, reject) => {
            this.getDefaultWorkAdsViewContentWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDefaultWorkAdsViewContentWithCallbacks(onSuccess?: (result: ViewContent) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAd/GetDefaultWorkAdsViewContent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDefaultWorkAdsViewContentWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDefaultWorkAdsViewContentWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDefaultWorkAdsViewContentWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDefaultWorkAdsViewContent(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDefaultWorkAdsViewContent(xhr: any): ViewContent {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ViewContent = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ViewContent.fromJS(resultData200) : new ViewContent();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getDefaultLoginViewContent() {
        return new Promise<ViewContent>((resolve, reject) => {
            this.getDefaultLoginViewContentWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getDefaultLoginViewContentWithCallbacks(onSuccess?: (result: ViewContent) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAd/GetDefaultLoginViewContent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetDefaultLoginViewContentWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetDefaultLoginViewContentWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetDefaultLoginViewContentWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetDefaultLoginViewContent(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetDefaultLoginViewContent(xhr: any): ViewContent {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ViewContent = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ViewContent.fromJS(resultData200) : new ViewContent();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export interface IWorkAdApplicantClient {
    /**
     * @model (optional) 
     * @return Success
     */
    searchApplicants(model?: ApplicantSearchModel): Promise<ApplicantSearchResult>;
    /**
     * @workadid (optional) 
     * @return Success
     */
    getAllByWorkAd(workadid?: string): Promise<WorkAdApplicant[]>;
    /**
     * @pipeid (optional) 
     * @return Success
     */
    getAllByPipeId(pipeid?: string): Promise<WorkAdApplicant[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<WorkAdApplicant>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: WorkAdApplicant): Promise<WorkAdApplicant>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: WorkAdApplicant): Promise<WorkAdApplicant>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class WorkAdApplicantClient extends base.CoreApiBaseClient implements IWorkAdApplicantClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @model (optional) 
     * @return Success
     */
    searchApplicants(model?: ApplicantSearchModel) {
        return new Promise<ApplicantSearchResult>((resolve, reject) => {
            this.searchApplicantsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private searchApplicantsWithCallbacks(model: ApplicantSearchModel, onSuccess?: (result: ApplicantSearchResult) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAdApplicant/SearchApplicants";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSearchApplicantsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSearchApplicantsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSearchApplicantsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSearchApplicants(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSearchApplicants(xhr: any): ApplicantSearchResult {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: ApplicantSearchResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApplicantSearchResult.fromJS(resultData200) : new ApplicantSearchResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workadid (optional) 
     * @return Success
     */
    getAllByWorkAd(workadid?: string) {
        return new Promise<WorkAdApplicant[]>((resolve, reject) => {
            this.getAllByWorkAdWithCallbacks(workadid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByWorkAdWithCallbacks(workadid: string, onSuccess?: (result: WorkAdApplicant[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAdApplicant/GetAllByWorkAd?";
        if (workadid !== undefined)
            url_ += "workadid=" + encodeURIComponent("" + workadid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByWorkAdWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByWorkAdWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByWorkAdWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByWorkAd(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByWorkAd(xhr: any): WorkAdApplicant[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAdApplicant[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkAdApplicant.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @pipeid (optional) 
     * @return Success
     */
    getAllByPipeId(pipeid?: string) {
        return new Promise<WorkAdApplicant[]>((resolve, reject) => {
            this.getAllByPipeIdWithCallbacks(pipeid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByPipeIdWithCallbacks(pipeid: string, onSuccess?: (result: WorkAdApplicant[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAdApplicant/GetAllByPipeId?";
        if (pipeid !== undefined)
            url_ += "pipeid=" + encodeURIComponent("" + pipeid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByPipeIdWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByPipeIdWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByPipeIdWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByPipeId(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByPipeId(xhr: any): WorkAdApplicant[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAdApplicant[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkAdApplicant.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<WorkAdApplicant>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: WorkAdApplicant) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAdApplicant/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): WorkAdApplicant {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAdApplicant = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkAdApplicant.fromJS(resultData200) : new WorkAdApplicant();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: WorkAdApplicant) {
        return new Promise<WorkAdApplicant>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: WorkAdApplicant, onSuccess?: (result: WorkAdApplicant) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAdApplicant/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): WorkAdApplicant {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAdApplicant = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkAdApplicant.fromJS(resultData200) : new WorkAdApplicant();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: WorkAdApplicant) {
        return new Promise<WorkAdApplicant>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: WorkAdApplicant, onSuccess?: (result: WorkAdApplicant) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAdApplicant/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): WorkAdApplicant {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkAdApplicant = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkAdApplicant.fromJS(resultData200) : new WorkAdApplicant();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkAdApplicant/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IWorkItemClient {
    /**
     * @return Success
     */
    getWorkItemsSearchModel(): Promise<SearchWorkItemsModel>;
    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getAllBookedWorkItemsSearchModel(from?: Date, to?: Date): Promise<SearchWorkItemsModel>;
    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getWorkedWorkItemsSearchModel(from?: Date, to?: Date): Promise<SearchWorkItemsModel>;
    /**
     * @return Success
     */
    getOpenUpcomingWorkItemsBySerie(): Promise<WorkItemSerieModel[]>;
    /**
     * @workserieid (optional) 
     * @return Success
     */
    getWorkItemsSerie(workserieid?: string): Promise<WorkItem[]>;
    /**
     * @personid (optional) 
     * @fromdate (optional) 
     * @todate (optional) 
     * @return Success
     */
    getWorkItemsForConsultant(personid?: number, fromdate?: Date, todate?: Date): Promise<WorkItem[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    getWorkItems(model?: SearchWorkItemsModel): Promise<WorkItem[]>;
    /**
     * @workerpersonid (optional) 
     * @return Success
     */
    getConsultantNotAttestedWorkItems(workerpersonid?: number): Promise<WorkItem[]>;
    /**
     * @ids (optional) 
     * @return Success
     */
    getWorkItemsByIds(ids?: number[]): Promise<WorkItem[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getWorkItemDetails(id?: number): Promise<WorkItemDetailsModel>;
    /**
     * @model (optional) 
     * @return Success
     */
    createWorkItems(model?: CreateWorkModel): Promise<string>;
    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: WorkItemDetailsModel): Promise<WorkItemDetailsModel>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: WorkItemDetailsModel): Promise<WorkItemDetailsModel>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number): Promise<void>;
    /**
     * @businessunitid (optional) 
     * @workitemids (optional) 
     * @return Success
     */
    putBusinessUnitOnWorkItems(businessunitid?: string, workitemids?: number[]): Promise<void>;
    /**
     * @teamid (optional) 
     * @workitemids (optional) 
     * @return Success
     */
    putTeamOnWorkItems(teamid?: string, workitemids?: number[]): Promise<void>;
    /**
     * @itemsselectionid (optional) 
     * @return Success
     */
    getWorkItemsDetailsForItemsSelection(itemsselectionid?: string): Promise<WorkItemDetailsModel[]>;
    /**
     * @itemsselectionid (optional) 
     * @return Success
     */
    getWorkItemsForItemsSelection(itemsselectionid?: string): Promise<WorkItem[]>;
    /**
     * @itemsselectionid (optional) 
     * @return Success
     */
    getWorkItemsDetailsIncludingCustomersAndConsultantsForItemsSelection(itemsselectionid?: string): Promise<WorkItemsDetailsInclCustomersAndEmployers>;
    /**
     * @workitemid (optional) 
     * @return Success
     */
    getWorkItemCandidates(workitemid?: number): Promise<WorkItemCandidate[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    postWorkItemCandidate(model?: WorkItemCandidate): Promise<WorkItemCandidate>;
    /**
     * @id (optional) 
     * @workItemCandidateId (optional) 
     * @workItemId (optional) 
     * @personId (optional) 
     * @candidateStatusId (optional) 
     * @comment (optional) 
     * @candidate_PersonId (optional) 
     * @candidate_RoleName (optional) 
     * @candidate_SellingPrice (optional) 
     * @candidate_DefaultCompensation (optional) 
     * @candidate_DefaultCompensationUom (optional) 
     * @candidate_CountyCouncilName (optional) 
     * @candidate_PreferedCountyCouncilNames (optional) 
     * @candidate_DefaultVatSetting (optional) 
     * @candidate_ItemType (optional) 
     * @candidate_AvailableWeeksAsJson (optional) 
     * @candidate_KnowledgeOfMedicalRecord (optional) 
     * @candidate_IsNew (optional) 
     * @candidate_CreatedDate (optional) 
     * @candidate_UpdatedDate (optional) 
     * @candidate_QualityResult (optional) 
     * @candidate_LastContactDate (optional) 
     * @candidate_AreaOfExpertise (optional) 
     * @candidate_AllAreaOfExpertises (optional) 
     * @candidate_BornDate (optional) 
     * @candidate_SystemRoleName (optional) 
     * @candidate_RoleAccess (optional) 
     * @candidate_AccountId (optional) 
     * @candidate_ForSystemRole (optional) 
     * @candidate_AvailableForWorkInCountries (optional) 
     * @candidate_BelongToId (optional) 
     * @candidate_SocialSecurityNo2 (optional) 
     * @candidate_OrderCountry (optional) 
     * @candidate_CostCenter (optional) 
     * @candidate_Name (optional) 
     * @candidate_ShippingName (optional) 
     * @candidate_Fax (optional) 
     * @candidate_Web (optional) 
     * @candidate_TaxPercentage (optional) 
     * @candidate_TaxTable (optional) 
     * @candidate_Bank (optional) 
     * @candidate_ClearingNumber (optional) 
     * @candidate_BankAccountNumber (optional) 
     * @candidate_EmployeeNumber (optional) 
     * @candidate_BankGiro (optional) 
     * @candidate_PlusGiro (optional) 
     * @candidate_VatNr (optional) 
     * @candidate_SNICode (optional) 
     * @candidate_IBANBankGiro (optional) 
     * @candidate_BICPlusGiro (optional) 
     * @candidate_Title (optional) 
     * @candidate_Description (optional) 
     * @candidate_SyncShippingAddress (optional) 
     * @candidate_Deactivated (optional) 
     * @candidate_WorkCompensationMultiplierId (optional) 
     * @candidate_WorkCompensationMultiplierValue (optional) 
     * @candidate_VacationPayMultiplier (optional) 
     * @candidate_SocialSecurityNo (optional) 
     * @candidate_ImageUrl (optional) 
     * @candidate_FirstName (optional) 
     * @candidate_LastName (optional) 
     * @candidate_StreetName (optional) 
     * @candidate_PostNo (optional) 
     * @candidate_City (optional) 
     * @candidate_ShippingFirstName (optional) 
     * @candidate_ShippingLastName (optional) 
     * @candidate_ShippingStreetName (optional) 
     * @candidate_ShippingPostNo (optional) 
     * @candidate_ShippingCity (optional) 
     * @candidate_ShippingCountry (optional) 
     * @candidate_BusinessSocialSecurityNo (optional) 
     * @candidate_BusinessName (optional) 
     * @candidate_BusinessStreetName (optional) 
     * @candidate_BusinessPostNo (optional) 
     * @candidate_BusinessCity (optional) 
     * @candidate_BranchOffice (optional) 
     * @candidate_Department (optional) 
     * @candidate_CellPhone (optional) 
     * @candidate_Email (optional) 
     * @candidate_ExtraEmail (optional) 
     * @candidate_TermsOfPaymentId (optional) 
     * @candidate_TermsOfDeliveryId (optional) 
     * @candidate_WayOfDeliveryId (optional) 
     * @candidate_OurReference (optional) 
     * @candidate_YourReference (optional) 
     * @candidate_TermsOfPaymentQtyDaysId (optional) 
     * @candidate_Phone (optional) 
     * @candidate_Doorcode (optional) 
     * @candidate_CountryId (optional) 
     * @candidate_LanguageId (optional) 
     * @candidate_CurrencyId (optional) 
     * @candidate_LegalPersonTypeId (optional) 
     * @candidate_Reference (optional) 
     * @candidate_ShippingReference (optional) 
     * @candidate_OurPersonId (optional) 
     * @candidate_ShippingLongitude (optional) 
     * @candidate_ShippingLatitude (optional) 
     * @candidate_ExternalSubscriptionId (optional) 
     * @candidate_ExternalAddressSelector (optional) 
     * @candidate_ExternalFortnoxCustomerNo (optional) 
     * @candidate_ReferredByPersonId (optional) 
     * @candidate_ResponsiblePersonId (optional) 
     * @candidate_ResponsibleName (optional) 
     * @candidate_QtyRelatedDocuments (optional) 
     * @candidate_PendingDelete (optional) 
     * @candidate_Comment (optional) 
     * @candidate_ShippingComment (optional) 
     * @return Success
     */
    putWorkItemCandidate(id?: number, workItemCandidateId?: number, workItemId?: number, personId?: number, candidateStatusId?: number, comment?: string, candidate_PersonId?: number, candidate_RoleName?: string, candidate_SellingPrice?: number, candidate_DefaultCompensation?: number, candidate_DefaultCompensationUom?: string, candidate_CountyCouncilName?: string, candidate_PreferedCountyCouncilNames?: string[], candidate_DefaultVatSetting?: number, candidate_ItemType?: string, candidate_AvailableWeeksAsJson?: string, candidate_KnowledgeOfMedicalRecord?: string, candidate_IsNew?: boolean, candidate_CreatedDate?: Date, candidate_UpdatedDate?: Date, candidate_QualityResult?: number, candidate_LastContactDate?: Date, candidate_AreaOfExpertise?: string, candidate_AllAreaOfExpertises?: string[], candidate_BornDate?: Date, candidate_SystemRoleName?: string, candidate_RoleAccess?: string, candidate_AccountId?: number, candidate_ForSystemRole?: string, candidate_AvailableForWorkInCountries?: string[], candidate_BelongToId?: string, candidate_SocialSecurityNo2?: string, candidate_OrderCountry?: string, candidate_CostCenter?: string, candidate_Name?: string, candidate_ShippingName?: string, candidate_Fax?: string, candidate_Web?: string, candidate_TaxPercentage?: number, candidate_TaxTable?: string, candidate_Bank?: string, candidate_ClearingNumber?: string, candidate_BankAccountNumber?: string, candidate_EmployeeNumber?: string, candidate_BankGiro?: string, candidate_PlusGiro?: string, candidate_VatNr?: string, candidate_SNICode?: string, candidate_IBANBankGiro?: string, candidate_BICPlusGiro?: string, candidate_Title?: string, candidate_Description?: string, candidate_SyncShippingAddress?: boolean, candidate_Deactivated?: boolean, candidate_WorkCompensationMultiplierId?: number, candidate_WorkCompensationMultiplierValue?: number, candidate_VacationPayMultiplier?: number, candidate_SocialSecurityNo?: string, candidate_ImageUrl?: string, candidate_FirstName?: string, candidate_LastName?: string, candidate_StreetName?: string, candidate_PostNo?: string, candidate_City?: string, candidate_ShippingFirstName?: string, candidate_ShippingLastName?: string, candidate_ShippingStreetName?: string, candidate_ShippingPostNo?: string, candidate_ShippingCity?: string, candidate_ShippingCountry?: string, candidate_BusinessSocialSecurityNo?: string, candidate_BusinessName?: string, candidate_BusinessStreetName?: string, candidate_BusinessPostNo?: string, candidate_BusinessCity?: string, candidate_BranchOffice?: string, candidate_Department?: string, candidate_CellPhone?: string, candidate_Email?: string, candidate_ExtraEmail?: string, candidate_TermsOfPaymentId?: string, candidate_TermsOfDeliveryId?: string, candidate_WayOfDeliveryId?: string, candidate_OurReference?: string, candidate_YourReference?: string, candidate_TermsOfPaymentQtyDaysId?: number, candidate_Phone?: string, candidate_Doorcode?: string, candidate_CountryId?: string, candidate_LanguageId?: string, candidate_CurrencyId?: string, candidate_LegalPersonTypeId?: number, candidate_Reference?: string, candidate_ShippingReference?: string, candidate_OurPersonId?: number, candidate_ShippingLongitude?: string, candidate_ShippingLatitude?: string, candidate_ExternalSubscriptionId?: string, candidate_ExternalAddressSelector?: string, candidate_ExternalFortnoxCustomerNo?: string, candidate_ReferredByPersonId?: number, candidate_ResponsiblePersonId?: number, candidate_ResponsibleName?: string, candidate_QtyRelatedDocuments?: number, candidate_PendingDelete?: boolean, candidate_Comment?: string, candidate_ShippingComment?: string): Promise<void>;
    /**
     * @workitemcandidateid (optional) 
     * @return Success
     */
    deleteWorkItemCandidate(workitemcandidateid?: number): Promise<void>;
}

export class WorkItemClient extends base.CoreApiBaseClient implements IWorkItemClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getWorkItemsSearchModel() {
        return new Promise<SearchWorkItemsModel>((resolve, reject) => {
            this.getWorkItemsSearchModelWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemsSearchModelWithCallbacks(onSuccess?: (result: SearchWorkItemsModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkItemsSearchModel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemsSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemsSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemsSearchModelWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemsSearchModel(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemsSearchModel(xhr: any): SearchWorkItemsModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SearchWorkItemsModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SearchWorkItemsModel.fromJS(resultData200) : new SearchWorkItemsModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getAllBookedWorkItemsSearchModel(from?: Date, to?: Date) {
        return new Promise<SearchWorkItemsModel>((resolve, reject) => {
            this.getAllBookedWorkItemsSearchModelWithCallbacks(from, to, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllBookedWorkItemsSearchModelWithCallbacks(from: Date, to: Date, onSuccess?: (result: SearchWorkItemsModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetAllBookedWorkItemsSearchModel?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent("" + from.toJSON()) + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllBookedWorkItemsSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllBookedWorkItemsSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllBookedWorkItemsSearchModelWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllBookedWorkItemsSearchModel(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllBookedWorkItemsSearchModel(xhr: any): SearchWorkItemsModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SearchWorkItemsModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SearchWorkItemsModel.fromJS(resultData200) : new SearchWorkItemsModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @from (optional) 
     * @to (optional) 
     * @return Success
     */
    getWorkedWorkItemsSearchModel(from?: Date, to?: Date) {
        return new Promise<SearchWorkItemsModel>((resolve, reject) => {
            this.getWorkedWorkItemsSearchModelWithCallbacks(from, to, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkedWorkItemsSearchModelWithCallbacks(from: Date, to: Date, onSuccess?: (result: SearchWorkItemsModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkedWorkItemsSearchModel?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent("" + from.toJSON()) + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkedWorkItemsSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkedWorkItemsSearchModelWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkedWorkItemsSearchModelWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkedWorkItemsSearchModel(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkedWorkItemsSearchModel(xhr: any): SearchWorkItemsModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: SearchWorkItemsModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SearchWorkItemsModel.fromJS(resultData200) : new SearchWorkItemsModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getOpenUpcomingWorkItemsBySerie() {
        return new Promise<WorkItemSerieModel[]>((resolve, reject) => {
            this.getOpenUpcomingWorkItemsBySerieWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getOpenUpcomingWorkItemsBySerieWithCallbacks(onSuccess?: (result: WorkItemSerieModel[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetOpenUpcomingWorkItemsBySerie";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetOpenUpcomingWorkItemsBySerieWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetOpenUpcomingWorkItemsBySerieWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetOpenUpcomingWorkItemsBySerieWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetOpenUpcomingWorkItemsBySerie(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetOpenUpcomingWorkItemsBySerie(xhr: any): WorkItemSerieModel[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemSerieModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItemSerieModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workserieid (optional) 
     * @return Success
     */
    getWorkItemsSerie(workserieid?: string) {
        return new Promise<WorkItem[]>((resolve, reject) => {
            this.getWorkItemsSerieWithCallbacks(workserieid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemsSerieWithCallbacks(workserieid: string, onSuccess?: (result: WorkItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkItemsSerie?";
        if (workserieid !== undefined)
            url_ += "workserieid=" + encodeURIComponent("" + workserieid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemsSerieWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemsSerieWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemsSerieWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemsSerie(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemsSerie(xhr: any): WorkItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @fromdate (optional) 
     * @todate (optional) 
     * @return Success
     */
    getWorkItemsForConsultant(personid?: number, fromdate?: Date, todate?: Date) {
        return new Promise<WorkItem[]>((resolve, reject) => {
            this.getWorkItemsForConsultantWithCallbacks(personid, fromdate, todate, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemsForConsultantWithCallbacks(personid: number, fromdate: Date, todate: Date, onSuccess?: (result: WorkItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkItemsForConsultant?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (fromdate !== undefined)
            url_ += "fromdate=" + encodeURIComponent("" + fromdate.toJSON()) + "&";
        if (todate !== undefined)
            url_ += "todate=" + encodeURIComponent("" + todate.toJSON()) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemsForConsultantWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemsForConsultantWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemsForConsultantWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemsForConsultant(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemsForConsultant(xhr: any): WorkItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    getWorkItems(model?: SearchWorkItemsModel) {
        return new Promise<WorkItem[]>((resolve, reject) => {
            this.getWorkItemsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemsWithCallbacks(model: SearchWorkItemsModel, onSuccess?: (result: WorkItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItems(xhr: any): WorkItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workerpersonid (optional) 
     * @return Success
     */
    getConsultantNotAttestedWorkItems(workerpersonid?: number) {
        return new Promise<WorkItem[]>((resolve, reject) => {
            this.getConsultantNotAttestedWorkItemsWithCallbacks(workerpersonid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getConsultantNotAttestedWorkItemsWithCallbacks(workerpersonid: number, onSuccess?: (result: WorkItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetConsultantNotAttestedWorkItems?";
        if (workerpersonid !== undefined)
            url_ += "workerpersonid=" + encodeURIComponent("" + workerpersonid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetConsultantNotAttestedWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetConsultantNotAttestedWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetConsultantNotAttestedWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetConsultantNotAttestedWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetConsultantNotAttestedWorkItems(xhr: any): WorkItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @ids (optional) 
     * @return Success
     */
    getWorkItemsByIds(ids?: number[]) {
        return new Promise<WorkItem[]>((resolve, reject) => {
            this.getWorkItemsByIdsWithCallbacks(ids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemsByIdsWithCallbacks(ids: number[], onSuccess?: (result: WorkItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkItemsByIds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemsByIdsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemsByIdsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemsByIdsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemsByIds(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemsByIds(xhr: any): WorkItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getWorkItemDetails(id?: number) {
        return new Promise<WorkItemDetailsModel>((resolve, reject) => {
            this.getWorkItemDetailsWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemDetailsWithCallbacks(id: number, onSuccess?: (result: WorkItemDetailsModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkItemDetails?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemDetailsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemDetailsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemDetails(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemDetails(xhr: any): WorkItemDetailsModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemDetailsModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkItemDetailsModel.fromJS(resultData200) : new WorkItemDetailsModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    createWorkItems(model?: CreateWorkModel) {
        return new Promise<string>((resolve, reject) => {
            this.createWorkItemsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private createWorkItemsWithCallbacks(model: CreateWorkModel, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/CreateWorkItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCreateWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCreateWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCreateWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCreateWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCreateWorkItems(xhr: any): string {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    post(model?: WorkItemDetailsModel) {
        return new Promise<WorkItemDetailsModel>((resolve, reject) => {
            this.postWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWithCallbacks(model: WorkItemDetailsModel, onSuccess?: (result: WorkItemDetailsModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPost(xhr: any): WorkItemDetailsModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemDetailsModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkItemDetailsModel.fromJS(resultData200) : new WorkItemDetailsModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: number, model?: WorkItemDetailsModel) {
        return new Promise<WorkItemDetailsModel>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: number, model: WorkItemDetailsModel, onSuccess?: (result: WorkItemDetailsModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): WorkItemDetailsModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemDetailsModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkItemDetailsModel.fromJS(resultData200) : new WorkItemDetailsModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @businessunitid (optional) 
     * @workitemids (optional) 
     * @return Success
     */
    putBusinessUnitOnWorkItems(businessunitid?: string, workitemids?: number[]) {
        return new Promise<void>((resolve, reject) => {
            this.putBusinessUnitOnWorkItemsWithCallbacks(businessunitid, workitemids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putBusinessUnitOnWorkItemsWithCallbacks(businessunitid: string, workitemids: number[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/PutBusinessUnitOnWorkItems?";
        if (businessunitid !== undefined)
            url_ += "businessunitid=" + encodeURIComponent("" + businessunitid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(workitemids);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutBusinessUnitOnWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutBusinessUnitOnWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutBusinessUnitOnWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutBusinessUnitOnWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutBusinessUnitOnWorkItems(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @teamid (optional) 
     * @workitemids (optional) 
     * @return Success
     */
    putTeamOnWorkItems(teamid?: string, workitemids?: number[]) {
        return new Promise<void>((resolve, reject) => {
            this.putTeamOnWorkItemsWithCallbacks(teamid, workitemids, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putTeamOnWorkItemsWithCallbacks(teamid: string, workitemids: number[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/PutTeamOnWorkItems?";
        if (teamid !== undefined)
            url_ += "teamid=" + encodeURIComponent("" + teamid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(workitemids);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutTeamOnWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutTeamOnWorkItemsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutTeamOnWorkItemsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutTeamOnWorkItems(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutTeamOnWorkItems(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @itemsselectionid (optional) 
     * @return Success
     */
    getWorkItemsDetailsForItemsSelection(itemsselectionid?: string) {
        return new Promise<WorkItemDetailsModel[]>((resolve, reject) => {
            this.getWorkItemsDetailsForItemsSelectionWithCallbacks(itemsselectionid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemsDetailsForItemsSelectionWithCallbacks(itemsselectionid: string, onSuccess?: (result: WorkItemDetailsModel[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkItemsDetailsForItemsSelection?";
        if (itemsselectionid !== undefined)
            url_ += "itemsselectionid=" + encodeURIComponent("" + itemsselectionid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemsDetailsForItemsSelectionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemsDetailsForItemsSelectionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemsDetailsForItemsSelectionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemsDetailsForItemsSelection(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemsDetailsForItemsSelection(xhr: any): WorkItemDetailsModel[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemDetailsModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItemDetailsModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @itemsselectionid (optional) 
     * @return Success
     */
    getWorkItemsForItemsSelection(itemsselectionid?: string) {
        return new Promise<WorkItem[]>((resolve, reject) => {
            this.getWorkItemsForItemsSelectionWithCallbacks(itemsselectionid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemsForItemsSelectionWithCallbacks(itemsselectionid: string, onSuccess?: (result: WorkItem[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkItemsForItemsSelection?";
        if (itemsselectionid !== undefined)
            url_ += "itemsselectionid=" + encodeURIComponent("" + itemsselectionid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemsForItemsSelectionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemsForItemsSelectionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemsForItemsSelectionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemsForItemsSelection(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemsForItemsSelection(xhr: any): WorkItem[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItem[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItem.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @itemsselectionid (optional) 
     * @return Success
     */
    getWorkItemsDetailsIncludingCustomersAndConsultantsForItemsSelection(itemsselectionid?: string) {
        return new Promise<WorkItemsDetailsInclCustomersAndEmployers>((resolve, reject) => {
            this.getWorkItemsDetailsIncludingCustomersAndConsultantsForItemsSelectionWithCallbacks(itemsselectionid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemsDetailsIncludingCustomersAndConsultantsForItemsSelectionWithCallbacks(itemsselectionid: string, onSuccess?: (result: WorkItemsDetailsInclCustomersAndEmployers) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkItemsDetailsIncludingCustomersAndConsultantsForItemsSelection?";
        if (itemsselectionid !== undefined)
            url_ += "itemsselectionid=" + encodeURIComponent("" + itemsselectionid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemsDetailsIncludingCustomersAndConsultantsForItemsSelectionWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemsDetailsIncludingCustomersAndConsultantsForItemsSelectionWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemsDetailsIncludingCustomersAndConsultantsForItemsSelectionWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemsDetailsIncludingCustomersAndConsultantsForItemsSelection(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemsDetailsIncludingCustomersAndConsultantsForItemsSelection(xhr: any): WorkItemsDetailsInclCustomersAndEmployers {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemsDetailsInclCustomersAndEmployers = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkItemsDetailsInclCustomersAndEmployers.fromJS(resultData200) : new WorkItemsDetailsInclCustomersAndEmployers();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workitemid (optional) 
     * @return Success
     */
    getWorkItemCandidates(workitemid?: number) {
        return new Promise<WorkItemCandidate[]>((resolve, reject) => {
            this.getWorkItemCandidatesWithCallbacks(workitemid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemCandidatesWithCallbacks(workitemid: number, onSuccess?: (result: WorkItemCandidate[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/GetWorkItemCandidates?";
        if (workitemid !== undefined)
            url_ += "workitemid=" + encodeURIComponent("" + workitemid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemCandidatesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemCandidatesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemCandidatesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemCandidates(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemCandidates(xhr: any): WorkItemCandidate[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemCandidate[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItemCandidate.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    postWorkItemCandidate(model?: WorkItemCandidate) {
        return new Promise<WorkItemCandidate>((resolve, reject) => {
            this.postWorkItemCandidateWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private postWorkItemCandidateWithCallbacks(model: WorkItemCandidate, onSuccess?: (result: WorkItemCandidate) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/PostWorkItemCandidate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPostWorkItemCandidateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostWorkItemCandidateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPostWorkItemCandidateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostWorkItemCandidate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostWorkItemCandidate(xhr: any): WorkItemCandidate {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemCandidate = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkItemCandidate.fromJS(resultData200) : new WorkItemCandidate();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @workItemCandidateId (optional) 
     * @workItemId (optional) 
     * @personId (optional) 
     * @candidateStatusId (optional) 
     * @comment (optional) 
     * @candidate_PersonId (optional) 
     * @candidate_RoleName (optional) 
     * @candidate_SellingPrice (optional) 
     * @candidate_DefaultCompensation (optional) 
     * @candidate_DefaultCompensationUom (optional) 
     * @candidate_CountyCouncilName (optional) 
     * @candidate_PreferedCountyCouncilNames (optional) 
     * @candidate_DefaultVatSetting (optional) 
     * @candidate_ItemType (optional) 
     * @candidate_AvailableWeeksAsJson (optional) 
     * @candidate_KnowledgeOfMedicalRecord (optional) 
     * @candidate_IsNew (optional) 
     * @candidate_CreatedDate (optional) 
     * @candidate_UpdatedDate (optional) 
     * @candidate_QualityResult (optional) 
     * @candidate_LastContactDate (optional) 
     * @candidate_AreaOfExpertise (optional) 
     * @candidate_AllAreaOfExpertises (optional) 
     * @candidate_BornDate (optional) 
     * @candidate_SystemRoleName (optional) 
     * @candidate_RoleAccess (optional) 
     * @candidate_AccountId (optional) 
     * @candidate_ForSystemRole (optional) 
     * @candidate_AvailableForWorkInCountries (optional) 
     * @candidate_BelongToId (optional) 
     * @candidate_SocialSecurityNo2 (optional) 
     * @candidate_OrderCountry (optional) 
     * @candidate_CostCenter (optional) 
     * @candidate_Name (optional) 
     * @candidate_ShippingName (optional) 
     * @candidate_Fax (optional) 
     * @candidate_Web (optional) 
     * @candidate_TaxPercentage (optional) 
     * @candidate_TaxTable (optional) 
     * @candidate_Bank (optional) 
     * @candidate_ClearingNumber (optional) 
     * @candidate_BankAccountNumber (optional) 
     * @candidate_EmployeeNumber (optional) 
     * @candidate_BankGiro (optional) 
     * @candidate_PlusGiro (optional) 
     * @candidate_VatNr (optional) 
     * @candidate_SNICode (optional) 
     * @candidate_IBANBankGiro (optional) 
     * @candidate_BICPlusGiro (optional) 
     * @candidate_Title (optional) 
     * @candidate_Description (optional) 
     * @candidate_SyncShippingAddress (optional) 
     * @candidate_Deactivated (optional) 
     * @candidate_WorkCompensationMultiplierId (optional) 
     * @candidate_WorkCompensationMultiplierValue (optional) 
     * @candidate_VacationPayMultiplier (optional) 
     * @candidate_SocialSecurityNo (optional) 
     * @candidate_ImageUrl (optional) 
     * @candidate_FirstName (optional) 
     * @candidate_LastName (optional) 
     * @candidate_StreetName (optional) 
     * @candidate_PostNo (optional) 
     * @candidate_City (optional) 
     * @candidate_ShippingFirstName (optional) 
     * @candidate_ShippingLastName (optional) 
     * @candidate_ShippingStreetName (optional) 
     * @candidate_ShippingPostNo (optional) 
     * @candidate_ShippingCity (optional) 
     * @candidate_ShippingCountry (optional) 
     * @candidate_BusinessSocialSecurityNo (optional) 
     * @candidate_BusinessName (optional) 
     * @candidate_BusinessStreetName (optional) 
     * @candidate_BusinessPostNo (optional) 
     * @candidate_BusinessCity (optional) 
     * @candidate_BranchOffice (optional) 
     * @candidate_Department (optional) 
     * @candidate_CellPhone (optional) 
     * @candidate_Email (optional) 
     * @candidate_ExtraEmail (optional) 
     * @candidate_TermsOfPaymentId (optional) 
     * @candidate_TermsOfDeliveryId (optional) 
     * @candidate_WayOfDeliveryId (optional) 
     * @candidate_OurReference (optional) 
     * @candidate_YourReference (optional) 
     * @candidate_TermsOfPaymentQtyDaysId (optional) 
     * @candidate_Phone (optional) 
     * @candidate_Doorcode (optional) 
     * @candidate_CountryId (optional) 
     * @candidate_LanguageId (optional) 
     * @candidate_CurrencyId (optional) 
     * @candidate_LegalPersonTypeId (optional) 
     * @candidate_Reference (optional) 
     * @candidate_ShippingReference (optional) 
     * @candidate_OurPersonId (optional) 
     * @candidate_ShippingLongitude (optional) 
     * @candidate_ShippingLatitude (optional) 
     * @candidate_ExternalSubscriptionId (optional) 
     * @candidate_ExternalAddressSelector (optional) 
     * @candidate_ExternalFortnoxCustomerNo (optional) 
     * @candidate_ReferredByPersonId (optional) 
     * @candidate_ResponsiblePersonId (optional) 
     * @candidate_ResponsibleName (optional) 
     * @candidate_QtyRelatedDocuments (optional) 
     * @candidate_PendingDelete (optional) 
     * @candidate_Comment (optional) 
     * @candidate_ShippingComment (optional) 
     * @return Success
     */
    putWorkItemCandidate(id?: number, workItemCandidateId?: number, workItemId?: number, personId?: number, candidateStatusId?: number, comment?: string, candidate_PersonId?: number, candidate_RoleName?: string, candidate_SellingPrice?: number, candidate_DefaultCompensation?: number, candidate_DefaultCompensationUom?: string, candidate_CountyCouncilName?: string, candidate_PreferedCountyCouncilNames?: string[], candidate_DefaultVatSetting?: number, candidate_ItemType?: string, candidate_AvailableWeeksAsJson?: string, candidate_KnowledgeOfMedicalRecord?: string, candidate_IsNew?: boolean, candidate_CreatedDate?: Date, candidate_UpdatedDate?: Date, candidate_QualityResult?: number, candidate_LastContactDate?: Date, candidate_AreaOfExpertise?: string, candidate_AllAreaOfExpertises?: string[], candidate_BornDate?: Date, candidate_SystemRoleName?: string, candidate_RoleAccess?: string, candidate_AccountId?: number, candidate_ForSystemRole?: string, candidate_AvailableForWorkInCountries?: string[], candidate_BelongToId?: string, candidate_SocialSecurityNo2?: string, candidate_OrderCountry?: string, candidate_CostCenter?: string, candidate_Name?: string, candidate_ShippingName?: string, candidate_Fax?: string, candidate_Web?: string, candidate_TaxPercentage?: number, candidate_TaxTable?: string, candidate_Bank?: string, candidate_ClearingNumber?: string, candidate_BankAccountNumber?: string, candidate_EmployeeNumber?: string, candidate_BankGiro?: string, candidate_PlusGiro?: string, candidate_VatNr?: string, candidate_SNICode?: string, candidate_IBANBankGiro?: string, candidate_BICPlusGiro?: string, candidate_Title?: string, candidate_Description?: string, candidate_SyncShippingAddress?: boolean, candidate_Deactivated?: boolean, candidate_WorkCompensationMultiplierId?: number, candidate_WorkCompensationMultiplierValue?: number, candidate_VacationPayMultiplier?: number, candidate_SocialSecurityNo?: string, candidate_ImageUrl?: string, candidate_FirstName?: string, candidate_LastName?: string, candidate_StreetName?: string, candidate_PostNo?: string, candidate_City?: string, candidate_ShippingFirstName?: string, candidate_ShippingLastName?: string, candidate_ShippingStreetName?: string, candidate_ShippingPostNo?: string, candidate_ShippingCity?: string, candidate_ShippingCountry?: string, candidate_BusinessSocialSecurityNo?: string, candidate_BusinessName?: string, candidate_BusinessStreetName?: string, candidate_BusinessPostNo?: string, candidate_BusinessCity?: string, candidate_BranchOffice?: string, candidate_Department?: string, candidate_CellPhone?: string, candidate_Email?: string, candidate_ExtraEmail?: string, candidate_TermsOfPaymentId?: string, candidate_TermsOfDeliveryId?: string, candidate_WayOfDeliveryId?: string, candidate_OurReference?: string, candidate_YourReference?: string, candidate_TermsOfPaymentQtyDaysId?: number, candidate_Phone?: string, candidate_Doorcode?: string, candidate_CountryId?: string, candidate_LanguageId?: string, candidate_CurrencyId?: string, candidate_LegalPersonTypeId?: number, candidate_Reference?: string, candidate_ShippingReference?: string, candidate_OurPersonId?: number, candidate_ShippingLongitude?: string, candidate_ShippingLatitude?: string, candidate_ExternalSubscriptionId?: string, candidate_ExternalAddressSelector?: string, candidate_ExternalFortnoxCustomerNo?: string, candidate_ReferredByPersonId?: number, candidate_ResponsiblePersonId?: number, candidate_ResponsibleName?: string, candidate_QtyRelatedDocuments?: number, candidate_PendingDelete?: boolean, candidate_Comment?: string, candidate_ShippingComment?: string) {
        return new Promise<void>((resolve, reject) => {
            this.putWorkItemCandidateWithCallbacks(id, workItemCandidateId, workItemId, personId, candidateStatusId, comment, candidate_PersonId, candidate_RoleName, candidate_SellingPrice, candidate_DefaultCompensation, candidate_DefaultCompensationUom, candidate_CountyCouncilName, candidate_PreferedCountyCouncilNames, candidate_DefaultVatSetting, candidate_ItemType, candidate_AvailableWeeksAsJson, candidate_KnowledgeOfMedicalRecord, candidate_IsNew, candidate_CreatedDate, candidate_UpdatedDate, candidate_QualityResult, candidate_LastContactDate, candidate_AreaOfExpertise, candidate_AllAreaOfExpertises, candidate_BornDate, candidate_SystemRoleName, candidate_RoleAccess, candidate_AccountId, candidate_ForSystemRole, candidate_AvailableForWorkInCountries, candidate_BelongToId, candidate_SocialSecurityNo2, candidate_OrderCountry, candidate_CostCenter, candidate_Name, candidate_ShippingName, candidate_Fax, candidate_Web, candidate_TaxPercentage, candidate_TaxTable, candidate_Bank, candidate_ClearingNumber, candidate_BankAccountNumber, candidate_EmployeeNumber, candidate_BankGiro, candidate_PlusGiro, candidate_VatNr, candidate_SNICode, candidate_IBANBankGiro, candidate_BICPlusGiro, candidate_Title, candidate_Description, candidate_SyncShippingAddress, candidate_Deactivated, candidate_WorkCompensationMultiplierId, candidate_WorkCompensationMultiplierValue, candidate_VacationPayMultiplier, candidate_SocialSecurityNo, candidate_ImageUrl, candidate_FirstName, candidate_LastName, candidate_StreetName, candidate_PostNo, candidate_City, candidate_ShippingFirstName, candidate_ShippingLastName, candidate_ShippingStreetName, candidate_ShippingPostNo, candidate_ShippingCity, candidate_ShippingCountry, candidate_BusinessSocialSecurityNo, candidate_BusinessName, candidate_BusinessStreetName, candidate_BusinessPostNo, candidate_BusinessCity, candidate_BranchOffice, candidate_Department, candidate_CellPhone, candidate_Email, candidate_ExtraEmail, candidate_TermsOfPaymentId, candidate_TermsOfDeliveryId, candidate_WayOfDeliveryId, candidate_OurReference, candidate_YourReference, candidate_TermsOfPaymentQtyDaysId, candidate_Phone, candidate_Doorcode, candidate_CountryId, candidate_LanguageId, candidate_CurrencyId, candidate_LegalPersonTypeId, candidate_Reference, candidate_ShippingReference, candidate_OurPersonId, candidate_ShippingLongitude, candidate_ShippingLatitude, candidate_ExternalSubscriptionId, candidate_ExternalAddressSelector, candidate_ExternalFortnoxCustomerNo, candidate_ReferredByPersonId, candidate_ResponsiblePersonId, candidate_ResponsibleName, candidate_QtyRelatedDocuments, candidate_PendingDelete, candidate_Comment, candidate_ShippingComment, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWorkItemCandidateWithCallbacks(id: number, workItemCandidateId: number, workItemId: number, personId: number, candidateStatusId: number, comment: string, candidate_PersonId: number, candidate_RoleName: string, candidate_SellingPrice: number, candidate_DefaultCompensation: number, candidate_DefaultCompensationUom: string, candidate_CountyCouncilName: string, candidate_PreferedCountyCouncilNames: string[], candidate_DefaultVatSetting: number, candidate_ItemType: string, candidate_AvailableWeeksAsJson: string, candidate_KnowledgeOfMedicalRecord: string, candidate_IsNew: boolean, candidate_CreatedDate: Date, candidate_UpdatedDate: Date, candidate_QualityResult: number, candidate_LastContactDate: Date, candidate_AreaOfExpertise: string, candidate_AllAreaOfExpertises: string[], candidate_BornDate: Date, candidate_SystemRoleName: string, candidate_RoleAccess: string, candidate_AccountId: number, candidate_ForSystemRole: string, candidate_AvailableForWorkInCountries: string[], candidate_BelongToId: string, candidate_SocialSecurityNo2: string, candidate_OrderCountry: string, candidate_CostCenter: string, candidate_Name: string, candidate_ShippingName: string, candidate_Fax: string, candidate_Web: string, candidate_TaxPercentage: number, candidate_TaxTable: string, candidate_Bank: string, candidate_ClearingNumber: string, candidate_BankAccountNumber: string, candidate_EmployeeNumber: string, candidate_BankGiro: string, candidate_PlusGiro: string, candidate_VatNr: string, candidate_SNICode: string, candidate_IBANBankGiro: string, candidate_BICPlusGiro: string, candidate_Title: string, candidate_Description: string, candidate_SyncShippingAddress: boolean, candidate_Deactivated: boolean, candidate_WorkCompensationMultiplierId: number, candidate_WorkCompensationMultiplierValue: number, candidate_VacationPayMultiplier: number, candidate_SocialSecurityNo: string, candidate_ImageUrl: string, candidate_FirstName: string, candidate_LastName: string, candidate_StreetName: string, candidate_PostNo: string, candidate_City: string, candidate_ShippingFirstName: string, candidate_ShippingLastName: string, candidate_ShippingStreetName: string, candidate_ShippingPostNo: string, candidate_ShippingCity: string, candidate_ShippingCountry: string, candidate_BusinessSocialSecurityNo: string, candidate_BusinessName: string, candidate_BusinessStreetName: string, candidate_BusinessPostNo: string, candidate_BusinessCity: string, candidate_BranchOffice: string, candidate_Department: string, candidate_CellPhone: string, candidate_Email: string, candidate_ExtraEmail: string, candidate_TermsOfPaymentId: string, candidate_TermsOfDeliveryId: string, candidate_WayOfDeliveryId: string, candidate_OurReference: string, candidate_YourReference: string, candidate_TermsOfPaymentQtyDaysId: number, candidate_Phone: string, candidate_Doorcode: string, candidate_CountryId: string, candidate_LanguageId: string, candidate_CurrencyId: string, candidate_LegalPersonTypeId: number, candidate_Reference: string, candidate_ShippingReference: string, candidate_OurPersonId: number, candidate_ShippingLongitude: string, candidate_ShippingLatitude: string, candidate_ExternalSubscriptionId: string, candidate_ExternalAddressSelector: string, candidate_ExternalFortnoxCustomerNo: string, candidate_ReferredByPersonId: number, candidate_ResponsiblePersonId: number, candidate_ResponsibleName: string, candidate_QtyRelatedDocuments: number, candidate_PendingDelete: boolean, candidate_Comment: string, candidate_ShippingComment: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/PutWorkItemCandidate?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (workItemCandidateId !== undefined)
            url_ += "WorkItemCandidateId=" + encodeURIComponent("" + workItemCandidateId) + "&";
        if (workItemId !== undefined)
            url_ += "WorkItemId=" + encodeURIComponent("" + workItemId) + "&";
        if (personId !== undefined)
            url_ += "PersonId=" + encodeURIComponent("" + personId) + "&";
        if (candidateStatusId !== undefined)
            url_ += "CandidateStatusId=" + encodeURIComponent("" + candidateStatusId) + "&";
        if (comment !== undefined)
            url_ += "Comment=" + encodeURIComponent("" + comment) + "&";
        if (candidate_PersonId !== undefined)
            url_ += "Candidate.PersonId=" + encodeURIComponent("" + candidate_PersonId) + "&";
        if (candidate_RoleName !== undefined)
            url_ += "Candidate.RoleName=" + encodeURIComponent("" + candidate_RoleName) + "&";
        if (candidate_SellingPrice !== undefined)
            url_ += "Candidate.SellingPrice=" + encodeURIComponent("" + candidate_SellingPrice) + "&";
        if (candidate_DefaultCompensation !== undefined)
            url_ += "Candidate.DefaultCompensation=" + encodeURIComponent("" + candidate_DefaultCompensation) + "&";
        if (candidate_DefaultCompensationUom !== undefined)
            url_ += "Candidate.DefaultCompensationUom=" + encodeURIComponent("" + candidate_DefaultCompensationUom) + "&";
        if (candidate_CountyCouncilName !== undefined)
            url_ += "Candidate.CountyCouncilName=" + encodeURIComponent("" + candidate_CountyCouncilName) + "&";
        if (candidate_PreferedCountyCouncilNames !== undefined)
            candidate_PreferedCountyCouncilNames.forEach(item => { url_ += "Candidate.PreferedCountyCouncilNames=" + encodeURIComponent("" + item) + "&"; });
        if (candidate_DefaultVatSetting !== undefined)
            url_ += "Candidate.DefaultVatSetting=" + encodeURIComponent("" + candidate_DefaultVatSetting) + "&";
        if (candidate_ItemType !== undefined)
            url_ += "Candidate.ItemType=" + encodeURIComponent("" + candidate_ItemType) + "&";
        if (candidate_AvailableWeeksAsJson !== undefined)
            url_ += "Candidate.AvailableWeeksAsJson=" + encodeURIComponent("" + candidate_AvailableWeeksAsJson) + "&";
        if (candidate_KnowledgeOfMedicalRecord !== undefined)
            url_ += "Candidate.KnowledgeOfMedicalRecord=" + encodeURIComponent("" + candidate_KnowledgeOfMedicalRecord) + "&";
        if (candidate_IsNew !== undefined)
            url_ += "Candidate.IsNew=" + encodeURIComponent("" + candidate_IsNew) + "&";
        if (candidate_CreatedDate !== undefined)
            url_ += "Candidate.CreatedDate=" + encodeURIComponent("" + candidate_CreatedDate.toJSON()) + "&";
        if (candidate_UpdatedDate !== undefined)
            url_ += "Candidate.UpdatedDate=" + encodeURIComponent("" + candidate_UpdatedDate.toJSON()) + "&";
        if (candidate_QualityResult !== undefined)
            url_ += "Candidate.QualityResult=" + encodeURIComponent("" + candidate_QualityResult) + "&";
        if (candidate_LastContactDate !== undefined)
            url_ += "Candidate.LastContactDate=" + encodeURIComponent("" + candidate_LastContactDate.toJSON()) + "&";
        if (candidate_AreaOfExpertise !== undefined)
            url_ += "Candidate.AreaOfExpertise=" + encodeURIComponent("" + candidate_AreaOfExpertise) + "&";
        if (candidate_AllAreaOfExpertises !== undefined)
            candidate_AllAreaOfExpertises.forEach(item => { url_ += "Candidate.AllAreaOfExpertises=" + encodeURIComponent("" + item) + "&"; });
        if (candidate_BornDate !== undefined)
            url_ += "Candidate.BornDate=" + encodeURIComponent("" + candidate_BornDate.toJSON()) + "&";
        if (candidate_SystemRoleName !== undefined)
            url_ += "Candidate.SystemRoleName=" + encodeURIComponent("" + candidate_SystemRoleName) + "&";
        if (candidate_RoleAccess !== undefined)
            url_ += "Candidate.RoleAccess=" + encodeURIComponent("" + candidate_RoleAccess) + "&";
        if (candidate_AccountId !== undefined)
            url_ += "Candidate.AccountId=" + encodeURIComponent("" + candidate_AccountId) + "&";
        if (candidate_ForSystemRole !== undefined)
            url_ += "Candidate.ForSystemRole=" + encodeURIComponent("" + candidate_ForSystemRole) + "&";
        if (candidate_AvailableForWorkInCountries !== undefined)
            candidate_AvailableForWorkInCountries.forEach(item => { url_ += "Candidate.AvailableForWorkInCountries=" + encodeURIComponent("" + item) + "&"; });
        if (candidate_BelongToId !== undefined)
            url_ += "Candidate.BelongToId=" + encodeURIComponent("" + candidate_BelongToId) + "&";
        if (candidate_SocialSecurityNo2 !== undefined)
            url_ += "Candidate.SocialSecurityNo2=" + encodeURIComponent("" + candidate_SocialSecurityNo2) + "&";
        if (candidate_OrderCountry !== undefined)
            url_ += "Candidate.OrderCountry=" + encodeURIComponent("" + candidate_OrderCountry) + "&";
        if (candidate_CostCenter !== undefined)
            url_ += "Candidate.CostCenter=" + encodeURIComponent("" + candidate_CostCenter) + "&";
        if (candidate_Name !== undefined)
            url_ += "Candidate.Name=" + encodeURIComponent("" + candidate_Name) + "&";
        if (candidate_ShippingName !== undefined)
            url_ += "Candidate.ShippingName=" + encodeURIComponent("" + candidate_ShippingName) + "&";
        if (candidate_Fax !== undefined)
            url_ += "Candidate.Fax=" + encodeURIComponent("" + candidate_Fax) + "&";
        if (candidate_Web !== undefined)
            url_ += "Candidate.Web=" + encodeURIComponent("" + candidate_Web) + "&";
        if (candidate_TaxPercentage !== undefined)
            url_ += "Candidate.TaxPercentage=" + encodeURIComponent("" + candidate_TaxPercentage) + "&";
        if (candidate_TaxTable !== undefined)
            url_ += "Candidate.TaxTable=" + encodeURIComponent("" + candidate_TaxTable) + "&";
        if (candidate_Bank !== undefined)
            url_ += "Candidate.Bank=" + encodeURIComponent("" + candidate_Bank) + "&";
        if (candidate_ClearingNumber !== undefined)
            url_ += "Candidate.ClearingNumber=" + encodeURIComponent("" + candidate_ClearingNumber) + "&";
        if (candidate_BankAccountNumber !== undefined)
            url_ += "Candidate.BankAccountNumber=" + encodeURIComponent("" + candidate_BankAccountNumber) + "&";
        if (candidate_EmployeeNumber !== undefined)
            url_ += "Candidate.EmployeeNumber=" + encodeURIComponent("" + candidate_EmployeeNumber) + "&";
        if (candidate_BankGiro !== undefined)
            url_ += "Candidate.BankGiro=" + encodeURIComponent("" + candidate_BankGiro) + "&";
        if (candidate_PlusGiro !== undefined)
            url_ += "Candidate.PlusGiro=" + encodeURIComponent("" + candidate_PlusGiro) + "&";
        if (candidate_VatNr !== undefined)
            url_ += "Candidate.VatNr=" + encodeURIComponent("" + candidate_VatNr) + "&";
        if (candidate_SNICode !== undefined)
            url_ += "Candidate.SNICode=" + encodeURIComponent("" + candidate_SNICode) + "&";
        if (candidate_IBANBankGiro !== undefined)
            url_ += "Candidate.IBANBankGiro=" + encodeURIComponent("" + candidate_IBANBankGiro) + "&";
        if (candidate_BICPlusGiro !== undefined)
            url_ += "Candidate.BICPlusGiro=" + encodeURIComponent("" + candidate_BICPlusGiro) + "&";
        if (candidate_Title !== undefined)
            url_ += "Candidate.Title=" + encodeURIComponent("" + candidate_Title) + "&";
        if (candidate_Description !== undefined)
            url_ += "Candidate.Description=" + encodeURIComponent("" + candidate_Description) + "&";
        if (candidate_SyncShippingAddress !== undefined)
            url_ += "Candidate.SyncShippingAddress=" + encodeURIComponent("" + candidate_SyncShippingAddress) + "&";
        if (candidate_Deactivated !== undefined)
            url_ += "Candidate.Deactivated=" + encodeURIComponent("" + candidate_Deactivated) + "&";
        if (candidate_WorkCompensationMultiplierId !== undefined)
            url_ += "Candidate.WorkCompensationMultiplierId=" + encodeURIComponent("" + candidate_WorkCompensationMultiplierId) + "&";
        if (candidate_WorkCompensationMultiplierValue !== undefined)
            url_ += "Candidate.WorkCompensationMultiplierValue=" + encodeURIComponent("" + candidate_WorkCompensationMultiplierValue) + "&";
        if (candidate_VacationPayMultiplier !== undefined)
            url_ += "Candidate.VacationPayMultiplier=" + encodeURIComponent("" + candidate_VacationPayMultiplier) + "&";
        if (candidate_SocialSecurityNo !== undefined)
            url_ += "Candidate.SocialSecurityNo=" + encodeURIComponent("" + candidate_SocialSecurityNo) + "&";
        if (candidate_ImageUrl !== undefined)
            url_ += "Candidate.ImageUrl=" + encodeURIComponent("" + candidate_ImageUrl) + "&";
        if (candidate_FirstName !== undefined)
            url_ += "Candidate.FirstName=" + encodeURIComponent("" + candidate_FirstName) + "&";
        if (candidate_LastName !== undefined)
            url_ += "Candidate.LastName=" + encodeURIComponent("" + candidate_LastName) + "&";
        if (candidate_StreetName !== undefined)
            url_ += "Candidate.StreetName=" + encodeURIComponent("" + candidate_StreetName) + "&";
        if (candidate_PostNo !== undefined)
            url_ += "Candidate.PostNo=" + encodeURIComponent("" + candidate_PostNo) + "&";
        if (candidate_City !== undefined)
            url_ += "Candidate.City=" + encodeURIComponent("" + candidate_City) + "&";
        if (candidate_ShippingFirstName !== undefined)
            url_ += "Candidate.ShippingFirstName=" + encodeURIComponent("" + candidate_ShippingFirstName) + "&";
        if (candidate_ShippingLastName !== undefined)
            url_ += "Candidate.ShippingLastName=" + encodeURIComponent("" + candidate_ShippingLastName) + "&";
        if (candidate_ShippingStreetName !== undefined)
            url_ += "Candidate.ShippingStreetName=" + encodeURIComponent("" + candidate_ShippingStreetName) + "&";
        if (candidate_ShippingPostNo !== undefined)
            url_ += "Candidate.ShippingPostNo=" + encodeURIComponent("" + candidate_ShippingPostNo) + "&";
        if (candidate_ShippingCity !== undefined)
            url_ += "Candidate.ShippingCity=" + encodeURIComponent("" + candidate_ShippingCity) + "&";
        if (candidate_ShippingCountry !== undefined)
            url_ += "Candidate.ShippingCountry=" + encodeURIComponent("" + candidate_ShippingCountry) + "&";
        if (candidate_BusinessSocialSecurityNo !== undefined)
            url_ += "Candidate.BusinessSocialSecurityNo=" + encodeURIComponent("" + candidate_BusinessSocialSecurityNo) + "&";
        if (candidate_BusinessName !== undefined)
            url_ += "Candidate.BusinessName=" + encodeURIComponent("" + candidate_BusinessName) + "&";
        if (candidate_BusinessStreetName !== undefined)
            url_ += "Candidate.BusinessStreetName=" + encodeURIComponent("" + candidate_BusinessStreetName) + "&";
        if (candidate_BusinessPostNo !== undefined)
            url_ += "Candidate.BusinessPostNo=" + encodeURIComponent("" + candidate_BusinessPostNo) + "&";
        if (candidate_BusinessCity !== undefined)
            url_ += "Candidate.BusinessCity=" + encodeURIComponent("" + candidate_BusinessCity) + "&";
        if (candidate_BranchOffice !== undefined)
            url_ += "Candidate.BranchOffice=" + encodeURIComponent("" + candidate_BranchOffice) + "&";
        if (candidate_Department !== undefined)
            url_ += "Candidate.Department=" + encodeURIComponent("" + candidate_Department) + "&";
        if (candidate_CellPhone !== undefined)
            url_ += "Candidate.CellPhone=" + encodeURIComponent("" + candidate_CellPhone) + "&";
        if (candidate_Email !== undefined)
            url_ += "Candidate.Email=" + encodeURIComponent("" + candidate_Email) + "&";
        if (candidate_ExtraEmail !== undefined)
            url_ += "Candidate.ExtraEmail=" + encodeURIComponent("" + candidate_ExtraEmail) + "&";
        if (candidate_TermsOfPaymentId !== undefined)
            url_ += "Candidate.TermsOfPaymentId=" + encodeURIComponent("" + candidate_TermsOfPaymentId) + "&";
        if (candidate_TermsOfDeliveryId !== undefined)
            url_ += "Candidate.TermsOfDeliveryId=" + encodeURIComponent("" + candidate_TermsOfDeliveryId) + "&";
        if (candidate_WayOfDeliveryId !== undefined)
            url_ += "Candidate.WayOfDeliveryId=" + encodeURIComponent("" + candidate_WayOfDeliveryId) + "&";
        if (candidate_OurReference !== undefined)
            url_ += "Candidate.OurReference=" + encodeURIComponent("" + candidate_OurReference) + "&";
        if (candidate_YourReference !== undefined)
            url_ += "Candidate.YourReference=" + encodeURIComponent("" + candidate_YourReference) + "&";
        if (candidate_TermsOfPaymentQtyDaysId !== undefined)
            url_ += "Candidate.TermsOfPaymentQtyDaysId=" + encodeURIComponent("" + candidate_TermsOfPaymentQtyDaysId) + "&";
        if (candidate_Phone !== undefined)
            url_ += "Candidate.Phone=" + encodeURIComponent("" + candidate_Phone) + "&";
        if (candidate_Doorcode !== undefined)
            url_ += "Candidate.Doorcode=" + encodeURIComponent("" + candidate_Doorcode) + "&";
        if (candidate_CountryId !== undefined)
            url_ += "Candidate.CountryId=" + encodeURIComponent("" + candidate_CountryId) + "&";
        if (candidate_LanguageId !== undefined)
            url_ += "Candidate.LanguageId=" + encodeURIComponent("" + candidate_LanguageId) + "&";
        if (candidate_CurrencyId !== undefined)
            url_ += "Candidate.CurrencyId=" + encodeURIComponent("" + candidate_CurrencyId) + "&";
        if (candidate_LegalPersonTypeId !== undefined)
            url_ += "Candidate.LegalPersonTypeId=" + encodeURIComponent("" + candidate_LegalPersonTypeId) + "&";
        if (candidate_Reference !== undefined)
            url_ += "Candidate.Reference=" + encodeURIComponent("" + candidate_Reference) + "&";
        if (candidate_ShippingReference !== undefined)
            url_ += "Candidate.ShippingReference=" + encodeURIComponent("" + candidate_ShippingReference) + "&";
        if (candidate_OurPersonId !== undefined)
            url_ += "Candidate.OurPersonId=" + encodeURIComponent("" + candidate_OurPersonId) + "&";
        if (candidate_ShippingLongitude !== undefined)
            url_ += "Candidate.ShippingLongitude=" + encodeURIComponent("" + candidate_ShippingLongitude) + "&";
        if (candidate_ShippingLatitude !== undefined)
            url_ += "Candidate.ShippingLatitude=" + encodeURIComponent("" + candidate_ShippingLatitude) + "&";
        if (candidate_ExternalSubscriptionId !== undefined)
            url_ += "Candidate.ExternalSubscriptionId=" + encodeURIComponent("" + candidate_ExternalSubscriptionId) + "&";
        if (candidate_ExternalAddressSelector !== undefined)
            url_ += "Candidate.ExternalAddressSelector=" + encodeURIComponent("" + candidate_ExternalAddressSelector) + "&";
        if (candidate_ExternalFortnoxCustomerNo !== undefined)
            url_ += "Candidate.ExternalFortnoxCustomerNo=" + encodeURIComponent("" + candidate_ExternalFortnoxCustomerNo) + "&";
        if (candidate_ReferredByPersonId !== undefined)
            url_ += "Candidate.ReferredByPersonId=" + encodeURIComponent("" + candidate_ReferredByPersonId) + "&";
        if (candidate_ResponsiblePersonId !== undefined)
            url_ += "Candidate.ResponsiblePersonId=" + encodeURIComponent("" + candidate_ResponsiblePersonId) + "&";
        if (candidate_ResponsibleName !== undefined)
            url_ += "Candidate.ResponsibleName=" + encodeURIComponent("" + candidate_ResponsibleName) + "&";
        if (candidate_QtyRelatedDocuments !== undefined)
            url_ += "Candidate.QtyRelatedDocuments=" + encodeURIComponent("" + candidate_QtyRelatedDocuments) + "&";
        if (candidate_PendingDelete !== undefined)
            url_ += "Candidate.PendingDelete=" + encodeURIComponent("" + candidate_PendingDelete) + "&";
        if (candidate_Comment !== undefined)
            url_ += "Candidate.Comment=" + encodeURIComponent("" + candidate_Comment) + "&";
        if (candidate_ShippingComment !== undefined)
            url_ += "Candidate.ShippingComment=" + encodeURIComponent("" + candidate_ShippingComment) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWorkItemCandidateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWorkItemCandidateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWorkItemCandidateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutWorkItemCandidate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutWorkItemCandidate(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @workitemcandidateid (optional) 
     * @return Success
     */
    deleteWorkItemCandidate(workitemcandidateid?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWorkItemCandidateWithCallbacks(workitemcandidateid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWorkItemCandidateWithCallbacks(workitemcandidateid: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItem/DeleteWorkItemCandidate?";
        if (workitemcandidateid !== undefined)
            url_ += "workitemcandidateid=" + encodeURIComponent("" + workitemcandidateid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWorkItemCandidateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWorkItemCandidateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWorkItemCandidateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteWorkItemCandidate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteWorkItemCandidate(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IWorkItemSerieConsultantAgreementClient {
    /**
     * @model (optional) 
     * @return Success
     */
    implementWorkItemSerieConsultantAgreementFromAgreementTemplate(model?: ImplementWorkItemSerieConsultantAgreementModel): Promise<WorkItemSerieConsultantAgreement>;
    /**
     * @return Success
     */
    getAllWorkItemSerieConsultantAgreements(): Promise<WorkItemSerieConsultantAgreement[]>;
    /**
     * @workitemserieconsultantagreementid (optional) 
     * @return Success
     */
    getWorkItemSerieConsultantAgreement(workitemserieconsultantagreementid?: number): Promise<WorkItemSerieConsultantAgreement>;
    /**
     * @consultantPersonId (optional) 
     * @workSerieId (optional) 
     * @return Success
     */
    getWorkItemSerieConsultantAgreements(consultantPersonId?: number, workSerieId?: string): Promise<WorkItemSerieConsultantAgreement[]>;
    /**
     * @consultantPersonId (optional) 
     * @workitemid (optional) 
     * @return Success
     */
    getWorkItemConsultantAgreements(consultantPersonId?: number, workitemid?: number): Promise<WorkItemSerieConsultantAgreement[]>;
    /**
     * @model (optional) 
     * @return Success
     */
    saveWorkItemSerieConsultantAgreement(model?: WorkItemSerieConsultantAgreement): Promise<WorkItemSerieConsultantAgreement>;
    /**
     * @workitemserieconsultantagreementid (optional) 
     * @return Success
     */
    deleteWorkItemSerieConsultantAgreement(workitemserieconsultantagreementid?: number): Promise<void>;
}

export class WorkItemSerieConsultantAgreementClient extends base.CoreApiBaseClient implements IWorkItemSerieConsultantAgreementClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @model (optional) 
     * @return Success
     */
    implementWorkItemSerieConsultantAgreementFromAgreementTemplate(model?: ImplementWorkItemSerieConsultantAgreementModel) {
        return new Promise<WorkItemSerieConsultantAgreement>((resolve, reject) => {
            this.implementWorkItemSerieConsultantAgreementFromAgreementTemplateWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private implementWorkItemSerieConsultantAgreementFromAgreementTemplateWithCallbacks(model: ImplementWorkItemSerieConsultantAgreementModel, onSuccess?: (result: WorkItemSerieConsultantAgreement) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItemSerieConsultantAgreement/ImplementWorkItemSerieConsultantAgreementFromAgreementTemplate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processImplementWorkItemSerieConsultantAgreementFromAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processImplementWorkItemSerieConsultantAgreementFromAgreementTemplateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processImplementWorkItemSerieConsultantAgreementFromAgreementTemplateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processImplementWorkItemSerieConsultantAgreementFromAgreementTemplate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processImplementWorkItemSerieConsultantAgreementFromAgreementTemplate(xhr: any): WorkItemSerieConsultantAgreement {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemSerieConsultantAgreement = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkItemSerieConsultantAgreement.fromJS(resultData200) : new WorkItemSerieConsultantAgreement();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllWorkItemSerieConsultantAgreements() {
        return new Promise<WorkItemSerieConsultantAgreement[]>((resolve, reject) => {
            this.getAllWorkItemSerieConsultantAgreementsWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllWorkItemSerieConsultantAgreementsWithCallbacks(onSuccess?: (result: WorkItemSerieConsultantAgreement[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItemSerieConsultantAgreement/GetAllWorkItemSerieConsultantAgreements";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllWorkItemSerieConsultantAgreementsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllWorkItemSerieConsultantAgreementsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllWorkItemSerieConsultantAgreementsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllWorkItemSerieConsultantAgreements(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllWorkItemSerieConsultantAgreements(xhr: any): WorkItemSerieConsultantAgreement[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemSerieConsultantAgreement[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItemSerieConsultantAgreement.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workitemserieconsultantagreementid (optional) 
     * @return Success
     */
    getWorkItemSerieConsultantAgreement(workitemserieconsultantagreementid?: number) {
        return new Promise<WorkItemSerieConsultantAgreement>((resolve, reject) => {
            this.getWorkItemSerieConsultantAgreementWithCallbacks(workitemserieconsultantagreementid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemSerieConsultantAgreementWithCallbacks(workitemserieconsultantagreementid: number, onSuccess?: (result: WorkItemSerieConsultantAgreement) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItemSerieConsultantAgreement/GetWorkItemSerieConsultantAgreement?";
        if (workitemserieconsultantagreementid !== undefined)
            url_ += "workitemserieconsultantagreementid=" + encodeURIComponent("" + workitemserieconsultantagreementid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemSerieConsultantAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemSerieConsultantAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemSerieConsultantAgreementWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemSerieConsultantAgreement(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemSerieConsultantAgreement(xhr: any): WorkItemSerieConsultantAgreement {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemSerieConsultantAgreement = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkItemSerieConsultantAgreement.fromJS(resultData200) : new WorkItemSerieConsultantAgreement();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @consultantPersonId (optional) 
     * @workSerieId (optional) 
     * @return Success
     */
    getWorkItemSerieConsultantAgreements(consultantPersonId?: number, workSerieId?: string) {
        return new Promise<WorkItemSerieConsultantAgreement[]>((resolve, reject) => {
            this.getWorkItemSerieConsultantAgreementsWithCallbacks(consultantPersonId, workSerieId, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemSerieConsultantAgreementsWithCallbacks(consultantPersonId: number, workSerieId: string, onSuccess?: (result: WorkItemSerieConsultantAgreement[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItemSerieConsultantAgreement/GetWorkItemSerieConsultantAgreements?";
        if (consultantPersonId !== undefined)
            url_ += "consultantPersonId=" + encodeURIComponent("" + consultantPersonId) + "&";
        if (workSerieId !== undefined)
            url_ += "workSerieId=" + encodeURIComponent("" + workSerieId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemSerieConsultantAgreementsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemSerieConsultantAgreementsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemSerieConsultantAgreementsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemSerieConsultantAgreements(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemSerieConsultantAgreements(xhr: any): WorkItemSerieConsultantAgreement[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemSerieConsultantAgreement[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItemSerieConsultantAgreement.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @consultantPersonId (optional) 
     * @workitemid (optional) 
     * @return Success
     */
    getWorkItemConsultantAgreements(consultantPersonId?: number, workitemid?: number) {
        return new Promise<WorkItemSerieConsultantAgreement[]>((resolve, reject) => {
            this.getWorkItemConsultantAgreementsWithCallbacks(consultantPersonId, workitemid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWorkItemConsultantAgreementsWithCallbacks(consultantPersonId: number, workitemid: number, onSuccess?: (result: WorkItemSerieConsultantAgreement[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItemSerieConsultantAgreement/GetWorkItemConsultantAgreements?";
        if (consultantPersonId !== undefined)
            url_ += "consultantPersonId=" + encodeURIComponent("" + consultantPersonId) + "&";
        if (workitemid !== undefined)
            url_ += "workitemid=" + encodeURIComponent("" + workitemid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWorkItemConsultantAgreementsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWorkItemConsultantAgreementsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWorkItemConsultantAgreementsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetWorkItemConsultantAgreements(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetWorkItemConsultantAgreements(xhr: any): WorkItemSerieConsultantAgreement[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemSerieConsultantAgreement[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkItemSerieConsultantAgreement.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    saveWorkItemSerieConsultantAgreement(model?: WorkItemSerieConsultantAgreement) {
        return new Promise<WorkItemSerieConsultantAgreement>((resolve, reject) => {
            this.saveWorkItemSerieConsultantAgreementWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private saveWorkItemSerieConsultantAgreementWithCallbacks(model: WorkItemSerieConsultantAgreement, onSuccess?: (result: WorkItemSerieConsultantAgreement) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItemSerieConsultantAgreement/SaveWorkItemSerieConsultantAgreement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSaveWorkItemSerieConsultantAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSaveWorkItemSerieConsultantAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSaveWorkItemSerieConsultantAgreementWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSaveWorkItemSerieConsultantAgreement(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSaveWorkItemSerieConsultantAgreement(xhr: any): WorkItemSerieConsultantAgreement {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkItemSerieConsultantAgreement = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkItemSerieConsultantAgreement.fromJS(resultData200) : new WorkItemSerieConsultantAgreement();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workitemserieconsultantagreementid (optional) 
     * @return Success
     */
    deleteWorkItemSerieConsultantAgreement(workitemserieconsultantagreementid?: number) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWorkItemSerieConsultantAgreementWithCallbacks(workitemserieconsultantagreementid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWorkItemSerieConsultantAgreementWithCallbacks(workitemserieconsultantagreementid: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkItemSerieConsultantAgreement/DeleteWorkItemSerieConsultantAgreement?";
        if (workitemserieconsultantagreementid !== undefined)
            url_ += "workitemserieconsultantagreementid=" + encodeURIComponent("" + workitemserieconsultantagreementid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWorkItemSerieConsultantAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWorkItemSerieConsultantAgreementWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWorkItemSerieConsultantAgreementWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDeleteWorkItemSerieConsultantAgreement(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDeleteWorkItemSerieConsultantAgreement(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export interface IWorkShiftClient {
    /**
     * @return Success
     */
    getCreateWorkModel(): Promise<CreateWorkModel>;
    /**
     * @model (optional) 
     * @return Success
     */
    createWorkShifts(model?: CreateWorkModel): Promise<string>;
    /**
     * @year (optional) 
     * @month (optional) 
     * @return Success
     */
    getAllByMonth(year?: number, month?: number): Promise<WorkShift[]>;
    /**
     * @year (optional) 
     * @week (optional) 
     * @return Success
     */
    getAllByWeek(year?: number, week?: number): Promise<WorkShift[]>;
    /**
     * @date (optional) 
     * @return Success
     */
    getAllByDate(date?: string): Promise<WorkShift[]>;
    /**
     * @personid (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    gePersonNotTimeReportedWorkShifts(personid?: number, requestcontinuationtoken?: string): Promise<TupleOfIEnumerableOfWorkShiftAndString>;
    /**
     * @areaofexpertises (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getLatestByExpertises(areaofexpertises?: string[], requestcontinuationtoken?: string): Promise<TupleOfIEnumerableOfWorkShiftAndString>;
    /**
     * @workserieid (optional) 
     * @return Success
     */
    getAllInSerie(workserieid?: string): Promise<WorkShift[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    getAllInSameSerieAsWorkShiftId(id?: string): Promise<WorkShift[]>;
    /**
     * @searchmodel (optional) 
     * @return Success
     */
    search(searchmodel?: WorkShiftSearchModel): Promise<WorkShift[]>;
    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string): Promise<WorkShift>;
    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: WorkShift): Promise<WorkShift>;
    /**
     * @model (optional) 
     * @return Success
     */
    putMultiple(model?: WorkShift[]): Promise<void>;
    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string): Promise<void>;
}

export class WorkShiftClient extends base.CoreApiBaseClient implements IWorkShiftClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string) {
        super();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCreateWorkModel() {
        return new Promise<CreateWorkModel>((resolve, reject) => {
            this.getCreateWorkModelWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getCreateWorkModelWithCallbacks(onSuccess?: (result: CreateWorkModel) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/GetCreateWorkModel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetCreateWorkModelWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetCreateWorkModelWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetCreateWorkModelWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetCreateWorkModel(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetCreateWorkModel(xhr: any): CreateWorkModel {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: CreateWorkModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CreateWorkModel.fromJS(resultData200) : new CreateWorkModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    createWorkShifts(model?: CreateWorkModel) {
        return new Promise<string>((resolve, reject) => {
            this.createWorkShiftsWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private createWorkShiftsWithCallbacks(model: CreateWorkModel, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/CreateWorkShifts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processCreateWorkShiftsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCreateWorkShiftsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processCreateWorkShiftsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCreateWorkShifts(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCreateWorkShifts(xhr: any): string {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: string = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @year (optional) 
     * @month (optional) 
     * @return Success
     */
    getAllByMonth(year?: number, month?: number) {
        return new Promise<WorkShift[]>((resolve, reject) => {
            this.getAllByMonthWithCallbacks(year, month, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByMonthWithCallbacks(year: number, month: number, onSuccess?: (result: WorkShift[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/GetAllByMonth?";
        if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (month !== undefined)
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByMonthWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByMonthWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByMonthWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByMonth(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByMonth(xhr: any): WorkShift[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkShift[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkShift.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @year (optional) 
     * @week (optional) 
     * @return Success
     */
    getAllByWeek(year?: number, week?: number) {
        return new Promise<WorkShift[]>((resolve, reject) => {
            this.getAllByWeekWithCallbacks(year, week, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByWeekWithCallbacks(year: number, week: number, onSuccess?: (result: WorkShift[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/GetAllByWeek?";
        if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (week !== undefined)
            url_ += "week=" + encodeURIComponent("" + week) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByWeekWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByWeekWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByWeek(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByWeek(xhr: any): WorkShift[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkShift[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkShift.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @date (optional) 
     * @return Success
     */
    getAllByDate(date?: string) {
        return new Promise<WorkShift[]>((resolve, reject) => {
            this.getAllByDateWithCallbacks(date, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllByDateWithCallbacks(date: string, onSuccess?: (result: WorkShift[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/GetAllByDate?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllByDateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllByDateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllByDateWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllByDate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllByDate(xhr: any): WorkShift[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkShift[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkShift.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @personid (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    gePersonNotTimeReportedWorkShifts(personid?: number, requestcontinuationtoken?: string) {
        return new Promise<TupleOfIEnumerableOfWorkShiftAndString>((resolve, reject) => {
            this.gePersonNotTimeReportedWorkShiftsWithCallbacks(personid, requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private gePersonNotTimeReportedWorkShiftsWithCallbacks(personid: number, requestcontinuationtoken: string, onSuccess?: (result: TupleOfIEnumerableOfWorkShiftAndString) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/GePersonNotTimeReportedWorkShifts?";
        if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGePersonNotTimeReportedWorkShiftsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGePersonNotTimeReportedWorkShiftsWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGePersonNotTimeReportedWorkShiftsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGePersonNotTimeReportedWorkShifts(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGePersonNotTimeReportedWorkShifts(xhr: any): TupleOfIEnumerableOfWorkShiftAndString {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TupleOfIEnumerableOfWorkShiftAndString = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TupleOfIEnumerableOfWorkShiftAndString.fromJS(resultData200) : new TupleOfIEnumerableOfWorkShiftAndString();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @areaofexpertises (optional) 
     * @requestcontinuationtoken (optional) 
     * @return Success
     */
    getLatestByExpertises(areaofexpertises?: string[], requestcontinuationtoken?: string) {
        return new Promise<TupleOfIEnumerableOfWorkShiftAndString>((resolve, reject) => {
            this.getLatestByExpertisesWithCallbacks(areaofexpertises, requestcontinuationtoken, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getLatestByExpertisesWithCallbacks(areaofexpertises: string[], requestcontinuationtoken: string, onSuccess?: (result: TupleOfIEnumerableOfWorkShiftAndString) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/GetLatestByExpertises?";
        if (areaofexpertises !== undefined)
            areaofexpertises.forEach(item => { url_ += "areaofexpertises=" + encodeURIComponent("" + item) + "&"; });
        if (requestcontinuationtoken !== undefined)
            url_ += "requestcontinuationtoken=" + encodeURIComponent("" + requestcontinuationtoken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetLatestByExpertisesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetLatestByExpertisesWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetLatestByExpertisesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetLatestByExpertises(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetLatestByExpertises(xhr: any): TupleOfIEnumerableOfWorkShiftAndString {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: TupleOfIEnumerableOfWorkShiftAndString = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TupleOfIEnumerableOfWorkShiftAndString.fromJS(resultData200) : new TupleOfIEnumerableOfWorkShiftAndString();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @workserieid (optional) 
     * @return Success
     */
    getAllInSerie(workserieid?: string) {
        return new Promise<WorkShift[]>((resolve, reject) => {
            this.getAllInSerieWithCallbacks(workserieid, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllInSerieWithCallbacks(workserieid: string, onSuccess?: (result: WorkShift[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/GetAllInSerie?";
        if (workserieid !== undefined)
            url_ += "workserieid=" + encodeURIComponent("" + workserieid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllInSerieWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllInSerieWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllInSerieWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllInSerie(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllInSerie(xhr: any): WorkShift[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkShift[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkShift.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getAllInSameSerieAsWorkShiftId(id?: string) {
        return new Promise<WorkShift[]>((resolve, reject) => {
            this.getAllInSameSerieAsWorkShiftIdWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getAllInSameSerieAsWorkShiftIdWithCallbacks(id: string, onSuccess?: (result: WorkShift[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/GetAllInSameSerieAsWorkShiftId?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetAllInSameSerieAsWorkShiftIdWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetAllInSameSerieAsWorkShiftIdWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetAllInSameSerieAsWorkShiftIdWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetAllInSameSerieAsWorkShiftId(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetAllInSameSerieAsWorkShiftId(xhr: any): WorkShift[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkShift[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkShift.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @searchmodel (optional) 
     * @return Success
     */
    search(searchmodel?: WorkShiftSearchModel) {
        return new Promise<WorkShift[]>((resolve, reject) => {
            this.searchWithCallbacks(searchmodel, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private searchWithCallbacks(searchmodel: WorkShiftSearchModel, onSuccess?: (result: WorkShift[]) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchmodel ? searchmodel.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processSearchWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSearchWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processSearchWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSearch(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSearch(xhr: any): WorkShift[] {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkShift[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WorkShift.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    get(id?: string) {
        return new Promise<WorkShift>((resolve, reject) => {
            this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private getWithCallbacks(id: string, onSuccess?: (result: WorkShift) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/Get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGet(xhr: any): WorkShift {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkShift = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkShift.fromJS(resultData200) : new WorkShift();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @id (optional) 
     * @model (optional) 
     * @return Success
     */
    put(id?: string, model?: WorkShift) {
        return new Promise<WorkShift>((resolve, reject) => {
            this.putWithCallbacks(id, model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putWithCallbacks(id: string, model: WorkShift, onSuccess?: (result: WorkShift) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/Put?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPut(xhr: any): WorkShift {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            let result200: WorkShift = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkShift.fromJS(resultData200) : new WorkShift();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @model (optional) 
     * @return Success
     */
    putMultiple(model?: WorkShift[]) {
        return new Promise<void>((resolve, reject) => {
            this.putMultipleWithCallbacks(model, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private putMultipleWithCallbacks(model: WorkShift[], onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/PutMultiple";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (model) {
            for (let item of model)
                contentData_.push(item.toJSON());
        }
        const content_ = JSON.stringify(model ? contentData_ : null);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processPutMultipleWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPutMultipleWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processPutMultipleWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPutMultiple(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPutMultiple(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }

    /**
     * @id (optional) 
     * @return Success
     */
    delete(id?: string) {
        return new Promise<void>((resolve, reject) => {
            this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private deleteWithCallbacks(id: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/WorkShift/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            }
        })).done((_data, _textStatus, xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDelete(xhr: any): void {
        const status = xhr.status;

        if (status === 200) {
            const responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return;
    }
}

export class Company implements ICompany {
    CompanyId?: number;
    Name?: string;
    PostAddress?: string;
    PostAddress2?: string;
    VisitAddress?: string;
    PostNo?: string;
    City?: string;
    Phone?: string;
    Phone2?: string;
    Fax?: string;
    Email?: string;
    Web?: string;
    BankGiro?: string;
    PlusGiro?: string;
    OrgNr?: string;
    VatNr?: string;
    SNICode?: string;
    IBANBankGiro?: string;
    BICPlusGiro?: string;
    Ftax?: string;
    Description?: string;
    SecretTooken?: string;
    CountryCountryId?: string;
    LogoUrl?: string;
    DedicatedCellPhoneNo?: string;
    SubscriptionsLastUpdate?: Date;
    AccountDisabled?: boolean;

    constructor(data?: ICompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CompanyId = data["CompanyId"];
            this.Name = data["Name"];
            this.PostAddress = data["PostAddress"];
            this.PostAddress2 = data["PostAddress2"];
            this.VisitAddress = data["VisitAddress"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.Phone = data["Phone"];
            this.Phone2 = data["Phone2"];
            this.Fax = data["Fax"];
            this.Email = data["Email"];
            this.Web = data["Web"];
            this.BankGiro = data["BankGiro"];
            this.PlusGiro = data["PlusGiro"];
            this.OrgNr = data["OrgNr"];
            this.VatNr = data["VatNr"];
            this.SNICode = data["SNICode"];
            this.IBANBankGiro = data["IBANBankGiro"];
            this.BICPlusGiro = data["BICPlusGiro"];
            this.Ftax = data["Ftax"];
            this.Description = data["Description"];
            this.SecretTooken = data["SecretTooken"];
            this.CountryCountryId = data["CountryCountryId"];
            this.LogoUrl = data["LogoUrl"];
            this.DedicatedCellPhoneNo = data["DedicatedCellPhoneNo"];
            this.SubscriptionsLastUpdate = data["SubscriptionsLastUpdate"] ? new Date(data["SubscriptionsLastUpdate"].toString()) : <any>undefined;
            this.AccountDisabled = data["AccountDisabled"];
        }
    }

    static fromJS(data: any): Company {
        let result = new Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CompanyId"] = this.CompanyId;
        data["Name"] = this.Name;
        data["PostAddress"] = this.PostAddress;
        data["PostAddress2"] = this.PostAddress2;
        data["VisitAddress"] = this.VisitAddress;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["Phone"] = this.Phone;
        data["Phone2"] = this.Phone2;
        data["Fax"] = this.Fax;
        data["Email"] = this.Email;
        data["Web"] = this.Web;
        data["BankGiro"] = this.BankGiro;
        data["PlusGiro"] = this.PlusGiro;
        data["OrgNr"] = this.OrgNr;
        data["VatNr"] = this.VatNr;
        data["SNICode"] = this.SNICode;
        data["IBANBankGiro"] = this.IBANBankGiro;
        data["BICPlusGiro"] = this.BICPlusGiro;
        data["Ftax"] = this.Ftax;
        data["Description"] = this.Description;
        data["SecretTooken"] = this.SecretTooken;
        data["CountryCountryId"] = this.CountryCountryId;
        data["LogoUrl"] = this.LogoUrl;
        data["DedicatedCellPhoneNo"] = this.DedicatedCellPhoneNo;
        data["SubscriptionsLastUpdate"] = this.SubscriptionsLastUpdate ? this.SubscriptionsLastUpdate.toISOString() : <any>undefined;
        data["AccountDisabled"] = this.AccountDisabled;
        return data;
    }
}

export interface ICompany {
    CompanyId?: number;
    Name?: string;
    PostAddress?: string;
    PostAddress2?: string;
    VisitAddress?: string;
    PostNo?: string;
    City?: string;
    Phone?: string;
    Phone2?: string;
    Fax?: string;
    Email?: string;
    Web?: string;
    BankGiro?: string;
    PlusGiro?: string;
    OrgNr?: string;
    VatNr?: string;
    SNICode?: string;
    IBANBankGiro?: string;
    BICPlusGiro?: string;
    Ftax?: string;
    Description?: string;
    SecretTooken?: string;
    CountryCountryId?: string;
    LogoUrl?: string;
    DedicatedCellPhoneNo?: string;
    SubscriptionsLastUpdate?: Date;
    AccountDisabled?: boolean;
}

export class AccountRegisteredCard implements IAccountRegisteredCard {
    id?: string;
    Name?: string;
    Token?: string;
    CustomerOrSubscriptionId?: string;
    PaymentType?: string;
    IsDefault?: boolean;

    constructor(data?: IAccountRegisteredCard) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.Token = data["Token"];
            this.CustomerOrSubscriptionId = data["CustomerOrSubscriptionId"];
            this.PaymentType = data["PaymentType"];
            this.IsDefault = data["IsDefault"];
        }
    }

    static fromJS(data: any): AccountRegisteredCard {
        let result = new AccountRegisteredCard();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["Token"] = this.Token;
        data["CustomerOrSubscriptionId"] = this.CustomerOrSubscriptionId;
        data["PaymentType"] = this.PaymentType;
        data["IsDefault"] = this.IsDefault;
        return data;
    }
}

export interface IAccountRegisteredCard {
    id?: string;
    Name?: string;
    Token?: string;
    CustomerOrSubscriptionId?: string;
    PaymentType?: string;
    IsDefault?: boolean;
}

export class StripePayModel implements IStripePayModel {
    Amount: number;
    CurrencyId?: string;

    constructor(data?: IStripePayModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Amount = data["Amount"];
            this.CurrencyId = data["CurrencyId"];
        }
    }

    static fromJS(data: any): StripePayModel {
        let result = new StripePayModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Amount"] = this.Amount;
        data["CurrencyId"] = this.CurrencyId;
        return data;
    }
}

export interface IStripePayModel {
    Amount: number;
    CurrencyId?: string;
}

export class BillingTransaction implements IBillingTransaction {
    BillingTransactionId?: number;
    Description?: string;
    Value?: number;
    CurrencyId?: string;
    TransactionDate?: Date;
    Balance?: number;
    PersonId?: number;
    PersonName?: string;
    FromTypeName?: string;
    FromTypeId?: string;
    Context?: Context;

    constructor(data?: IBillingTransaction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.BillingTransactionId = data["BillingTransactionId"];
            this.Description = data["Description"];
            this.Value = data["Value"];
            this.CurrencyId = data["CurrencyId"];
            this.TransactionDate = data["TransactionDate"] ? new Date(data["TransactionDate"].toString()) : <any>undefined;
            this.Balance = data["Balance"];
            this.PersonId = data["PersonId"];
            this.PersonName = data["PersonName"];
            this.FromTypeName = data["FromTypeName"];
            this.FromTypeId = data["FromTypeId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BillingTransaction {
        let result = new BillingTransaction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["BillingTransactionId"] = this.BillingTransactionId;
        data["Description"] = this.Description;
        data["Value"] = this.Value;
        data["CurrencyId"] = this.CurrencyId;
        data["TransactionDate"] = this.TransactionDate ? this.TransactionDate.toISOString() : <any>undefined;
        data["Balance"] = this.Balance;
        data["PersonId"] = this.PersonId;
        data["PersonName"] = this.PersonName;
        data["FromTypeName"] = this.FromTypeName;
        data["FromTypeId"] = this.FromTypeId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBillingTransaction {
    BillingTransactionId?: number;
    Description?: string;
    Value?: number;
    CurrencyId?: string;
    TransactionDate?: Date;
    Balance?: number;
    PersonId?: number;
    PersonName?: string;
    FromTypeName?: string;
    FromTypeId?: string;
    Context?: Context;
}

export class Context implements IContext {
    Environments?: { [key: string]: any; }[];
    Scopes?: { [key: string]: any; }[];
    Registers?: { [key: string]: any; };
    Errors?: any[];
    Strainer?: Strainer;

    constructor(data?: IContext) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Environments"] && data["Environments"].constructor === Array) {
                this.Environments = [];
                for (let item of data["Environments"])
                    this.Environments.push(item);
            }
            if (data["Scopes"] && data["Scopes"].constructor === Array) {
                this.Scopes = [];
                for (let item of data["Scopes"])
                    this.Scopes.push(item);
            }
            if (data["Registers"]) {
                this.Registers = {};
                for (let key in data["Registers"]) {
                    if (data["Registers"].hasOwnProperty(key))
                        this.Registers[key] = data["Registers"][key];
                }
            }
            if (data["Errors"] && data["Errors"].constructor === Array) {
                this.Errors = [];
                for (let item of data["Errors"])
                    this.Errors.push(item);
            }
            this.Strainer = data["Strainer"] ? Strainer.fromJS(data["Strainer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Context {
        let result = new Context();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Environments && this.Environments.constructor === Array) {
            data["Environments"] = [];
            for (let item of this.Environments)
                data["Environments"].push(item);
        }
        if (this.Scopes && this.Scopes.constructor === Array) {
            data["Scopes"] = [];
            for (let item of this.Scopes)
                data["Scopes"].push(item);
        }
        if (this.Registers) {
            data["Registers"] = {};
            for (let key in this.Registers) {
                if (this.Registers.hasOwnProperty(key))
                    data["Registers"][key] = this.Registers[key];
            }
        }
        if (this.Errors && this.Errors.constructor === Array) {
            data["Errors"] = [];
            for (let item of this.Errors)
                data["Errors"].push(item);
        }
        data["Strainer"] = this.Strainer ? this.Strainer.toJSON() : <any>undefined;
        return data;
    }
}

export interface IContext {
    Environments?: { [key: string]: any; }[];
    Scopes?: { [key: string]: any; }[];
    Registers?: { [key: string]: any; };
    Errors?: any[];
    Strainer?: Strainer;
}

export class Strainer implements IStrainer {
    Methods?: MethodInfo[];

    constructor(data?: IStrainer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Methods"] && data["Methods"].constructor === Array) {
                this.Methods = [];
                for (let item of data["Methods"])
                    this.Methods.push(MethodInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Strainer {
        let result = new Strainer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Methods && this.Methods.constructor === Array) {
            data["Methods"] = [];
            for (let item of this.Methods)
                data["Methods"].push(item.toJSON());
        }
        return data;
    }
}

export interface IStrainer {
    Methods?: MethodInfo[];
}

export class MethodInfo implements IMethodInfo {
    MemberType?: MethodInfoMemberType;
    ReturnType?: string;
    ReturnParameter?: ParameterInfo;
    ReturnTypeCustomAttributes?: any;
    MethodImplementationFlags?: MethodInfoMethodImplementationFlags;
    MethodHandle?: any;
    Attributes?: MethodInfoAttributes;
    CallingConvention?: MethodInfoCallingConvention;
    IsGenericMethodDefinition?: boolean;
    ContainsGenericParameters?: boolean;
    IsGenericMethod?: boolean;
    IsSecurityCritical?: boolean;
    IsSecuritySafeCritical?: boolean;
    IsSecurityTransparent?: boolean;
    IsPublic?: boolean;
    IsPrivate?: boolean;
    IsFamily?: boolean;
    IsAssembly?: boolean;
    IsFamilyAndAssembly?: boolean;
    IsFamilyOrAssembly?: boolean;
    IsStatic?: boolean;
    IsFinal?: boolean;
    IsVirtual?: boolean;
    IsHideBySig?: boolean;
    IsAbstract?: boolean;
    IsSpecialName?: boolean;
    IsConstructor?: boolean;
    Name?: string;
    DeclaringType?: string;
    ReflectedType?: string;
    CustomAttributes?: CustomAttributeData[];
    MetadataToken?: number;
    Module?: any;

    constructor(data?: IMethodInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.MemberType = data["MemberType"];
            this.ReturnType = data["ReturnType"];
            this.ReturnParameter = data["ReturnParameter"] ? ParameterInfo.fromJS(data["ReturnParameter"]) : <any>undefined;
            if (data["ReturnTypeCustomAttributes"]) {
                this.ReturnTypeCustomAttributes = {};
                for (let key in data["ReturnTypeCustomAttributes"]) {
                    if (data["ReturnTypeCustomAttributes"].hasOwnProperty(key))
                        this.ReturnTypeCustomAttributes[key] = data["ReturnTypeCustomAttributes"][key];
                }
            }
            this.MethodImplementationFlags = data["MethodImplementationFlags"];
            if (data["MethodHandle"]) {
                this.MethodHandle = {};
                for (let key in data["MethodHandle"]) {
                    if (data["MethodHandle"].hasOwnProperty(key))
                        this.MethodHandle[key] = data["MethodHandle"][key];
                }
            }
            this.Attributes = data["Attributes"];
            this.CallingConvention = data["CallingConvention"];
            this.IsGenericMethodDefinition = data["IsGenericMethodDefinition"];
            this.ContainsGenericParameters = data["ContainsGenericParameters"];
            this.IsGenericMethod = data["IsGenericMethod"];
            this.IsSecurityCritical = data["IsSecurityCritical"];
            this.IsSecuritySafeCritical = data["IsSecuritySafeCritical"];
            this.IsSecurityTransparent = data["IsSecurityTransparent"];
            this.IsPublic = data["IsPublic"];
            this.IsPrivate = data["IsPrivate"];
            this.IsFamily = data["IsFamily"];
            this.IsAssembly = data["IsAssembly"];
            this.IsFamilyAndAssembly = data["IsFamilyAndAssembly"];
            this.IsFamilyOrAssembly = data["IsFamilyOrAssembly"];
            this.IsStatic = data["IsStatic"];
            this.IsFinal = data["IsFinal"];
            this.IsVirtual = data["IsVirtual"];
            this.IsHideBySig = data["IsHideBySig"];
            this.IsAbstract = data["IsAbstract"];
            this.IsSpecialName = data["IsSpecialName"];
            this.IsConstructor = data["IsConstructor"];
            this.Name = data["Name"];
            this.DeclaringType = data["DeclaringType"];
            this.ReflectedType = data["ReflectedType"];
            if (data["CustomAttributes"] && data["CustomAttributes"].constructor === Array) {
                this.CustomAttributes = [];
                for (let item of data["CustomAttributes"])
                    this.CustomAttributes.push(CustomAttributeData.fromJS(item));
            }
            this.MetadataToken = data["MetadataToken"];
            if (data["Module"]) {
                this.Module = {};
                for (let key in data["Module"]) {
                    if (data["Module"].hasOwnProperty(key))
                        this.Module[key] = data["Module"][key];
                }
            }
        }
    }

    static fromJS(data: any): MethodInfo {
        let result = new MethodInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberType"] = this.MemberType;
        data["ReturnType"] = this.ReturnType;
        data["ReturnParameter"] = this.ReturnParameter ? this.ReturnParameter.toJSON() : <any>undefined;
        if (this.ReturnTypeCustomAttributes) {
            data["ReturnTypeCustomAttributes"] = {};
            for (let key in this.ReturnTypeCustomAttributes) {
                if (this.ReturnTypeCustomAttributes.hasOwnProperty(key))
                    data["ReturnTypeCustomAttributes"][key] = this.ReturnTypeCustomAttributes[key];
            }
        }
        data["MethodImplementationFlags"] = this.MethodImplementationFlags;
        if (this.MethodHandle) {
            data["MethodHandle"] = {};
            for (let key in this.MethodHandle) {
                if (this.MethodHandle.hasOwnProperty(key))
                    data["MethodHandle"][key] = this.MethodHandle[key];
            }
        }
        data["Attributes"] = this.Attributes;
        data["CallingConvention"] = this.CallingConvention;
        data["IsGenericMethodDefinition"] = this.IsGenericMethodDefinition;
        data["ContainsGenericParameters"] = this.ContainsGenericParameters;
        data["IsGenericMethod"] = this.IsGenericMethod;
        data["IsSecurityCritical"] = this.IsSecurityCritical;
        data["IsSecuritySafeCritical"] = this.IsSecuritySafeCritical;
        data["IsSecurityTransparent"] = this.IsSecurityTransparent;
        data["IsPublic"] = this.IsPublic;
        data["IsPrivate"] = this.IsPrivate;
        data["IsFamily"] = this.IsFamily;
        data["IsAssembly"] = this.IsAssembly;
        data["IsFamilyAndAssembly"] = this.IsFamilyAndAssembly;
        data["IsFamilyOrAssembly"] = this.IsFamilyOrAssembly;
        data["IsStatic"] = this.IsStatic;
        data["IsFinal"] = this.IsFinal;
        data["IsVirtual"] = this.IsVirtual;
        data["IsHideBySig"] = this.IsHideBySig;
        data["IsAbstract"] = this.IsAbstract;
        data["IsSpecialName"] = this.IsSpecialName;
        data["IsConstructor"] = this.IsConstructor;
        data["Name"] = this.Name;
        data["DeclaringType"] = this.DeclaringType;
        data["ReflectedType"] = this.ReflectedType;
        if (this.CustomAttributes && this.CustomAttributes.constructor === Array) {
            data["CustomAttributes"] = [];
            for (let item of this.CustomAttributes)
                data["CustomAttributes"].push(item.toJSON());
        }
        data["MetadataToken"] = this.MetadataToken;
        if (this.Module) {
            data["Module"] = {};
            for (let key in this.Module) {
                if (this.Module.hasOwnProperty(key))
                    data["Module"][key] = this.Module[key];
            }
        }
        return data;
    }
}

export interface IMethodInfo {
    MemberType?: MethodInfoMemberType;
    ReturnType?: string;
    ReturnParameter?: ParameterInfo;
    ReturnTypeCustomAttributes?: any;
    MethodImplementationFlags?: MethodInfoMethodImplementationFlags;
    MethodHandle?: any;
    Attributes?: MethodInfoAttributes;
    CallingConvention?: MethodInfoCallingConvention;
    IsGenericMethodDefinition?: boolean;
    ContainsGenericParameters?: boolean;
    IsGenericMethod?: boolean;
    IsSecurityCritical?: boolean;
    IsSecuritySafeCritical?: boolean;
    IsSecurityTransparent?: boolean;
    IsPublic?: boolean;
    IsPrivate?: boolean;
    IsFamily?: boolean;
    IsAssembly?: boolean;
    IsFamilyAndAssembly?: boolean;
    IsFamilyOrAssembly?: boolean;
    IsStatic?: boolean;
    IsFinal?: boolean;
    IsVirtual?: boolean;
    IsHideBySig?: boolean;
    IsAbstract?: boolean;
    IsSpecialName?: boolean;
    IsConstructor?: boolean;
    Name?: string;
    DeclaringType?: string;
    ReflectedType?: string;
    CustomAttributes?: CustomAttributeData[];
    MetadataToken?: number;
    Module?: any;
}

export class ParameterInfo implements IParameterInfo {
    ParameterType?: string;
    Name?: string;
    HasDefaultValue?: boolean;
    DefaultValue?: any;
    RawDefaultValue?: any;
    Position?: number;
    Attributes?: ParameterInfoAttributes;
    Member?: MemberInfo;
    IsIn?: boolean;
    IsOut?: boolean;
    IsLcid?: boolean;
    IsRetval?: boolean;
    IsOptional?: boolean;
    MetadataToken?: number;
    CustomAttributes?: CustomAttributeData[];

    constructor(data?: IParameterInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ParameterType = data["ParameterType"];
            this.Name = data["Name"];
            this.HasDefaultValue = data["HasDefaultValue"];
            if (data["DefaultValue"]) {
                this.DefaultValue = {};
                for (let key in data["DefaultValue"]) {
                    if (data["DefaultValue"].hasOwnProperty(key))
                        this.DefaultValue[key] = data["DefaultValue"][key];
                }
            }
            if (data["RawDefaultValue"]) {
                this.RawDefaultValue = {};
                for (let key in data["RawDefaultValue"]) {
                    if (data["RawDefaultValue"].hasOwnProperty(key))
                        this.RawDefaultValue[key] = data["RawDefaultValue"][key];
                }
            }
            this.Position = data["Position"];
            this.Attributes = data["Attributes"];
            this.Member = data["Member"] ? MemberInfo.fromJS(data["Member"]) : <any>undefined;
            this.IsIn = data["IsIn"];
            this.IsOut = data["IsOut"];
            this.IsLcid = data["IsLcid"];
            this.IsRetval = data["IsRetval"];
            this.IsOptional = data["IsOptional"];
            this.MetadataToken = data["MetadataToken"];
            if (data["CustomAttributes"] && data["CustomAttributes"].constructor === Array) {
                this.CustomAttributes = [];
                for (let item of data["CustomAttributes"])
                    this.CustomAttributes.push(CustomAttributeData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ParameterInfo {
        let result = new ParameterInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ParameterType"] = this.ParameterType;
        data["Name"] = this.Name;
        data["HasDefaultValue"] = this.HasDefaultValue;
        if (this.DefaultValue) {
            data["DefaultValue"] = {};
            for (let key in this.DefaultValue) {
                if (this.DefaultValue.hasOwnProperty(key))
                    data["DefaultValue"][key] = this.DefaultValue[key];
            }
        }
        if (this.RawDefaultValue) {
            data["RawDefaultValue"] = {};
            for (let key in this.RawDefaultValue) {
                if (this.RawDefaultValue.hasOwnProperty(key))
                    data["RawDefaultValue"][key] = this.RawDefaultValue[key];
            }
        }
        data["Position"] = this.Position;
        data["Attributes"] = this.Attributes;
        data["Member"] = this.Member ? this.Member.toJSON() : <any>undefined;
        data["IsIn"] = this.IsIn;
        data["IsOut"] = this.IsOut;
        data["IsLcid"] = this.IsLcid;
        data["IsRetval"] = this.IsRetval;
        data["IsOptional"] = this.IsOptional;
        data["MetadataToken"] = this.MetadataToken;
        if (this.CustomAttributes && this.CustomAttributes.constructor === Array) {
            data["CustomAttributes"] = [];
            for (let item of this.CustomAttributes)
                data["CustomAttributes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IParameterInfo {
    ParameterType?: string;
    Name?: string;
    HasDefaultValue?: boolean;
    DefaultValue?: any;
    RawDefaultValue?: any;
    Position?: number;
    Attributes?: ParameterInfoAttributes;
    Member?: MemberInfo;
    IsIn?: boolean;
    IsOut?: boolean;
    IsLcid?: boolean;
    IsRetval?: boolean;
    IsOptional?: boolean;
    MetadataToken?: number;
    CustomAttributes?: CustomAttributeData[];
}

export class CustomAttributeData implements ICustomAttributeData {
    AttributeType?: string;
    Constructor?: ConstructorInfo;
    ConstructorArguments?: CustomAttributeTypedArgument[];
    NamedArguments?: CustomAttributeNamedArgument[];

    constructor(data?: ICustomAttributeData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.AttributeType = data["AttributeType"];
            this.Constructor = data["Constructor"] ? ConstructorInfo.fromJS(data["Constructor"]) : <any>undefined;
            if (data["ConstructorArguments"] && data["ConstructorArguments"].constructor === Array) {
                this.ConstructorArguments = [];
                for (let item of data["ConstructorArguments"])
                    this.ConstructorArguments.push(CustomAttributeTypedArgument.fromJS(item));
            }
            if (data["NamedArguments"] && data["NamedArguments"].constructor === Array) {
                this.NamedArguments = [];
                for (let item of data["NamedArguments"])
                    this.NamedArguments.push(CustomAttributeNamedArgument.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomAttributeData {
        let result = new CustomAttributeData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AttributeType"] = this.AttributeType;
        data["Constructor"] = this.Constructor ? this.Constructor.toJSON() : <any>undefined;
        if (this.ConstructorArguments && this.ConstructorArguments.constructor === Array) {
            data["ConstructorArguments"] = [];
            for (let item of this.ConstructorArguments)
                data["ConstructorArguments"].push(item.toJSON());
        }
        if (this.NamedArguments && this.NamedArguments.constructor === Array) {
            data["NamedArguments"] = [];
            for (let item of this.NamedArguments)
                data["NamedArguments"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICustomAttributeData {
    AttributeType?: string;
    Constructor?: ConstructorInfo;
    ConstructorArguments?: CustomAttributeTypedArgument[];
    NamedArguments?: CustomAttributeNamedArgument[];
}

export class MemberInfo implements IMemberInfo {
    MemberType?: MemberInfoMemberType;
    Name?: string;
    DeclaringType?: string;
    ReflectedType?: string;
    CustomAttributes?: CustomAttributeData[];
    MetadataToken?: number;
    Module?: any;

    constructor(data?: IMemberInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.MemberType = data["MemberType"];
            this.Name = data["Name"];
            this.DeclaringType = data["DeclaringType"];
            this.ReflectedType = data["ReflectedType"];
            if (data["CustomAttributes"] && data["CustomAttributes"].constructor === Array) {
                this.CustomAttributes = [];
                for (let item of data["CustomAttributes"])
                    this.CustomAttributes.push(CustomAttributeData.fromJS(item));
            }
            this.MetadataToken = data["MetadataToken"];
            if (data["Module"]) {
                this.Module = {};
                for (let key in data["Module"]) {
                    if (data["Module"].hasOwnProperty(key))
                        this.Module[key] = data["Module"][key];
                }
            }
        }
    }

    static fromJS(data: any): MemberInfo {
        let result = new MemberInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberType"] = this.MemberType;
        data["Name"] = this.Name;
        data["DeclaringType"] = this.DeclaringType;
        data["ReflectedType"] = this.ReflectedType;
        if (this.CustomAttributes && this.CustomAttributes.constructor === Array) {
            data["CustomAttributes"] = [];
            for (let item of this.CustomAttributes)
                data["CustomAttributes"].push(item.toJSON());
        }
        data["MetadataToken"] = this.MetadataToken;
        if (this.Module) {
            data["Module"] = {};
            for (let key in this.Module) {
                if (this.Module.hasOwnProperty(key))
                    data["Module"][key] = this.Module[key];
            }
        }
        return data;
    }
}

export interface IMemberInfo {
    MemberType?: MemberInfoMemberType;
    Name?: string;
    DeclaringType?: string;
    ReflectedType?: string;
    CustomAttributes?: CustomAttributeData[];
    MetadataToken?: number;
    Module?: any;
}

export class ConstructorInfo implements IConstructorInfo {
    MemberType?: ConstructorInfoMemberType;
    MethodImplementationFlags?: ConstructorInfoMethodImplementationFlags;
    MethodHandle?: any;
    Attributes?: ConstructorInfoAttributes;
    CallingConvention?: ConstructorInfoCallingConvention;
    IsGenericMethodDefinition?: boolean;
    ContainsGenericParameters?: boolean;
    IsGenericMethod?: boolean;
    IsSecurityCritical?: boolean;
    IsSecuritySafeCritical?: boolean;
    IsSecurityTransparent?: boolean;
    IsPublic?: boolean;
    IsPrivate?: boolean;
    IsFamily?: boolean;
    IsAssembly?: boolean;
    IsFamilyAndAssembly?: boolean;
    IsFamilyOrAssembly?: boolean;
    IsStatic?: boolean;
    IsFinal?: boolean;
    IsVirtual?: boolean;
    IsHideBySig?: boolean;
    IsAbstract?: boolean;
    IsSpecialName?: boolean;
    IsConstructor?: boolean;
    Name?: string;
    DeclaringType?: string;
    ReflectedType?: string;
    CustomAttributes?: CustomAttributeData[];
    MetadataToken?: number;
    Module?: any;

    constructor(data?: IConstructorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.MemberType = data["MemberType"];
            this.MethodImplementationFlags = data["MethodImplementationFlags"];
            if (data["MethodHandle"]) {
                this.MethodHandle = {};
                for (let key in data["MethodHandle"]) {
                    if (data["MethodHandle"].hasOwnProperty(key))
                        this.MethodHandle[key] = data["MethodHandle"][key];
                }
            }
            this.Attributes = data["Attributes"];
            this.CallingConvention = data["CallingConvention"];
            this.IsGenericMethodDefinition = data["IsGenericMethodDefinition"];
            this.ContainsGenericParameters = data["ContainsGenericParameters"];
            this.IsGenericMethod = data["IsGenericMethod"];
            this.IsSecurityCritical = data["IsSecurityCritical"];
            this.IsSecuritySafeCritical = data["IsSecuritySafeCritical"];
            this.IsSecurityTransparent = data["IsSecurityTransparent"];
            this.IsPublic = data["IsPublic"];
            this.IsPrivate = data["IsPrivate"];
            this.IsFamily = data["IsFamily"];
            this.IsAssembly = data["IsAssembly"];
            this.IsFamilyAndAssembly = data["IsFamilyAndAssembly"];
            this.IsFamilyOrAssembly = data["IsFamilyOrAssembly"];
            this.IsStatic = data["IsStatic"];
            this.IsFinal = data["IsFinal"];
            this.IsVirtual = data["IsVirtual"];
            this.IsHideBySig = data["IsHideBySig"];
            this.IsAbstract = data["IsAbstract"];
            this.IsSpecialName = data["IsSpecialName"];
            this.IsConstructor = data["IsConstructor"];
            this.Name = data["Name"];
            this.DeclaringType = data["DeclaringType"];
            this.ReflectedType = data["ReflectedType"];
            if (data["CustomAttributes"] && data["CustomAttributes"].constructor === Array) {
                this.CustomAttributes = [];
                for (let item of data["CustomAttributes"])
                    this.CustomAttributes.push(CustomAttributeData.fromJS(item));
            }
            this.MetadataToken = data["MetadataToken"];
            if (data["Module"]) {
                this.Module = {};
                for (let key in data["Module"]) {
                    if (data["Module"].hasOwnProperty(key))
                        this.Module[key] = data["Module"][key];
                }
            }
        }
    }

    static fromJS(data: any): ConstructorInfo {
        let result = new ConstructorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberType"] = this.MemberType;
        data["MethodImplementationFlags"] = this.MethodImplementationFlags;
        if (this.MethodHandle) {
            data["MethodHandle"] = {};
            for (let key in this.MethodHandle) {
                if (this.MethodHandle.hasOwnProperty(key))
                    data["MethodHandle"][key] = this.MethodHandle[key];
            }
        }
        data["Attributes"] = this.Attributes;
        data["CallingConvention"] = this.CallingConvention;
        data["IsGenericMethodDefinition"] = this.IsGenericMethodDefinition;
        data["ContainsGenericParameters"] = this.ContainsGenericParameters;
        data["IsGenericMethod"] = this.IsGenericMethod;
        data["IsSecurityCritical"] = this.IsSecurityCritical;
        data["IsSecuritySafeCritical"] = this.IsSecuritySafeCritical;
        data["IsSecurityTransparent"] = this.IsSecurityTransparent;
        data["IsPublic"] = this.IsPublic;
        data["IsPrivate"] = this.IsPrivate;
        data["IsFamily"] = this.IsFamily;
        data["IsAssembly"] = this.IsAssembly;
        data["IsFamilyAndAssembly"] = this.IsFamilyAndAssembly;
        data["IsFamilyOrAssembly"] = this.IsFamilyOrAssembly;
        data["IsStatic"] = this.IsStatic;
        data["IsFinal"] = this.IsFinal;
        data["IsVirtual"] = this.IsVirtual;
        data["IsHideBySig"] = this.IsHideBySig;
        data["IsAbstract"] = this.IsAbstract;
        data["IsSpecialName"] = this.IsSpecialName;
        data["IsConstructor"] = this.IsConstructor;
        data["Name"] = this.Name;
        data["DeclaringType"] = this.DeclaringType;
        data["ReflectedType"] = this.ReflectedType;
        if (this.CustomAttributes && this.CustomAttributes.constructor === Array) {
            data["CustomAttributes"] = [];
            for (let item of this.CustomAttributes)
                data["CustomAttributes"].push(item.toJSON());
        }
        data["MetadataToken"] = this.MetadataToken;
        if (this.Module) {
            data["Module"] = {};
            for (let key in this.Module) {
                if (this.Module.hasOwnProperty(key))
                    data["Module"][key] = this.Module[key];
            }
        }
        return data;
    }
}

export interface IConstructorInfo {
    MemberType?: ConstructorInfoMemberType;
    MethodImplementationFlags?: ConstructorInfoMethodImplementationFlags;
    MethodHandle?: any;
    Attributes?: ConstructorInfoAttributes;
    CallingConvention?: ConstructorInfoCallingConvention;
    IsGenericMethodDefinition?: boolean;
    ContainsGenericParameters?: boolean;
    IsGenericMethod?: boolean;
    IsSecurityCritical?: boolean;
    IsSecuritySafeCritical?: boolean;
    IsSecurityTransparent?: boolean;
    IsPublic?: boolean;
    IsPrivate?: boolean;
    IsFamily?: boolean;
    IsAssembly?: boolean;
    IsFamilyAndAssembly?: boolean;
    IsFamilyOrAssembly?: boolean;
    IsStatic?: boolean;
    IsFinal?: boolean;
    IsVirtual?: boolean;
    IsHideBySig?: boolean;
    IsAbstract?: boolean;
    IsSpecialName?: boolean;
    IsConstructor?: boolean;
    Name?: string;
    DeclaringType?: string;
    ReflectedType?: string;
    CustomAttributes?: CustomAttributeData[];
    MetadataToken?: number;
    Module?: any;
}

export class CustomAttributeTypedArgument implements ICustomAttributeTypedArgument {
    ArgumentType?: string;
    Value?: any;

    constructor(data?: ICustomAttributeTypedArgument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ArgumentType = data["ArgumentType"];
            if (data["Value"]) {
                this.Value = {};
                for (let key in data["Value"]) {
                    if (data["Value"].hasOwnProperty(key))
                        this.Value[key] = data["Value"][key];
                }
            }
        }
    }

    static fromJS(data: any): CustomAttributeTypedArgument {
        let result = new CustomAttributeTypedArgument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ArgumentType"] = this.ArgumentType;
        if (this.Value) {
            data["Value"] = {};
            for (let key in this.Value) {
                if (this.Value.hasOwnProperty(key))
                    data["Value"][key] = this.Value[key];
            }
        }
        return data;
    }
}

export interface ICustomAttributeTypedArgument {
    ArgumentType?: string;
    Value?: any;
}

export class CustomAttributeNamedArgument implements ICustomAttributeNamedArgument {
    MemberInfo?: MemberInfo;
    TypedValue?: CustomAttributeTypedArgument;
    MemberName?: string;
    IsField?: boolean;

    constructor(data?: ICustomAttributeNamedArgument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.MemberInfo = data["MemberInfo"] ? MemberInfo.fromJS(data["MemberInfo"]) : <any>undefined;
            this.TypedValue = data["TypedValue"] ? CustomAttributeTypedArgument.fromJS(data["TypedValue"]) : <any>undefined;
            this.MemberName = data["MemberName"];
            this.IsField = data["IsField"];
        }
    }

    static fromJS(data: any): CustomAttributeNamedArgument {
        let result = new CustomAttributeNamedArgument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberInfo"] = this.MemberInfo ? this.MemberInfo.toJSON() : <any>undefined;
        data["TypedValue"] = this.TypedValue ? this.TypedValue.toJSON() : <any>undefined;
        data["MemberName"] = this.MemberName;
        data["IsField"] = this.IsField;
        return data;
    }
}

export interface ICustomAttributeNamedArgument {
    MemberInfo?: MemberInfo;
    TypedValue?: CustomAttributeTypedArgument;
    MemberName?: string;
    IsField?: boolean;
}

export class TotalAccountBalanceModel implements ITotalAccountBalanceModel {
    AccountTransactions?: BillingTransaction[];
    AccountBalanceList?: AccountBalance[];

    constructor(data?: ITotalAccountBalanceModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["AccountTransactions"] && data["AccountTransactions"].constructor === Array) {
                this.AccountTransactions = [];
                for (let item of data["AccountTransactions"])
                    this.AccountTransactions.push(BillingTransaction.fromJS(item));
            }
            if (data["AccountBalanceList"] && data["AccountBalanceList"].constructor === Array) {
                this.AccountBalanceList = [];
                for (let item of data["AccountBalanceList"])
                    this.AccountBalanceList.push(AccountBalance.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TotalAccountBalanceModel {
        let result = new TotalAccountBalanceModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.AccountTransactions && this.AccountTransactions.constructor === Array) {
            data["AccountTransactions"] = [];
            for (let item of this.AccountTransactions)
                data["AccountTransactions"].push(item.toJSON());
        }
        if (this.AccountBalanceList && this.AccountBalanceList.constructor === Array) {
            data["AccountBalanceList"] = [];
            for (let item of this.AccountBalanceList)
                data["AccountBalanceList"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITotalAccountBalanceModel {
    AccountTransactions?: BillingTransaction[];
    AccountBalanceList?: AccountBalance[];
}

export class AccountBalance implements IAccountBalance {
    CurrencyId?: string;
    Balance?: number;

    constructor(data?: IAccountBalance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CurrencyId = data["CurrencyId"];
            this.Balance = data["Balance"];
        }
    }

    static fromJS(data: any): AccountBalance {
        let result = new AccountBalance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CurrencyId"] = this.CurrencyId;
        data["Balance"] = this.Balance;
        return data;
    }
}

export interface IAccountBalance {
    CurrencyId?: string;
    Balance?: number;
}

export class LocationAddress implements ILocationAddress {
    id?: string;
    BranchOffice?: string;
    Department?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    Doorcode?: string;
    CountyCouncilName?: string;
    YourReference?: string;
    CostCenter?: string;
    Country?: string;
    PersonId?: number;

    constructor(data?: ILocationAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.BranchOffice = data["BranchOffice"];
            this.Department = data["Department"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.Doorcode = data["Doorcode"];
            this.CountyCouncilName = data["CountyCouncilName"];
            this.YourReference = data["YourReference"];
            this.CostCenter = data["CostCenter"];
            this.Country = data["Country"];
            this.PersonId = data["PersonId"];
        }
    }

    static fromJS(data: any): LocationAddress {
        let result = new LocationAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["BranchOffice"] = this.BranchOffice;
        data["Department"] = this.Department;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["Doorcode"] = this.Doorcode;
        data["CountyCouncilName"] = this.CountyCouncilName;
        data["YourReference"] = this.YourReference;
        data["CostCenter"] = this.CostCenter;
        data["Country"] = this.Country;
        data["PersonId"] = this.PersonId;
        return data;
    }
}

export interface ILocationAddress {
    id?: string;
    BranchOffice?: string;
    Department?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    Doorcode?: string;
    CountyCouncilName?: string;
    YourReference?: string;
    CostCenter?: string;
    Country?: string;
    PersonId?: number;
}

export class AgreementReceiver implements IAgreementReceiver {
    AgreementReceiverId?: number;
    Name?: string;
    Email?: string;
    CellPhone?: string;
    PersonId?: number;
    LastSentDate?: Date;
    WorkItemSerieConsultantAgreementId?: number;
    AgreementId?: number;
    Context?: Context;

    constructor(data?: IAgreementReceiver) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.AgreementReceiverId = data["AgreementReceiverId"];
            this.Name = data["Name"];
            this.Email = data["Email"];
            this.CellPhone = data["CellPhone"];
            this.PersonId = data["PersonId"];
            this.LastSentDate = data["LastSentDate"] ? new Date(data["LastSentDate"].toString()) : <any>undefined;
            this.WorkItemSerieConsultantAgreementId = data["WorkItemSerieConsultantAgreementId"];
            this.AgreementId = data["AgreementId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AgreementReceiver {
        let result = new AgreementReceiver();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AgreementReceiverId"] = this.AgreementReceiverId;
        data["Name"] = this.Name;
        data["Email"] = this.Email;
        data["CellPhone"] = this.CellPhone;
        data["PersonId"] = this.PersonId;
        data["LastSentDate"] = this.LastSentDate ? this.LastSentDate.toISOString() : <any>undefined;
        data["WorkItemSerieConsultantAgreementId"] = this.WorkItemSerieConsultantAgreementId;
        data["AgreementId"] = this.AgreementId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAgreementReceiver {
    AgreementReceiverId?: number;
    Name?: string;
    Email?: string;
    CellPhone?: string;
    PersonId?: number;
    LastSentDate?: Date;
    WorkItemSerieConsultantAgreementId?: number;
    AgreementId?: number;
    Context?: Context;
}

export class Agreement implements IAgreement {
    AgreementId?: number;
    AnySignature?: boolean;
    DocumentKey?: string;
    IsClosedForSignature?: boolean;
    AgreementReceivers?: AgreementReceiver[];
    Signatures?: AgreementSignature[];
    History?: AgreementHistory[];
    Name?: string;
    TemplateContent?: string;
    DocumentCloudFileUrl?: string;
    Dynamic?: boolean;
    AgreementType?: string;
    Context?: Context;

    constructor(data?: IAgreement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.AgreementId = data["AgreementId"];
            this.AnySignature = data["AnySignature"];
            this.DocumentKey = data["DocumentKey"];
            this.IsClosedForSignature = data["IsClosedForSignature"];
            if (data["AgreementReceivers"] && data["AgreementReceivers"].constructor === Array) {
                this.AgreementReceivers = [];
                for (let item of data["AgreementReceivers"])
                    this.AgreementReceivers.push(AgreementReceiver.fromJS(item));
            }
            if (data["Signatures"] && data["Signatures"].constructor === Array) {
                this.Signatures = [];
                for (let item of data["Signatures"])
                    this.Signatures.push(AgreementSignature.fromJS(item));
            }
            if (data["History"] && data["History"].constructor === Array) {
                this.History = [];
                for (let item of data["History"])
                    this.History.push(AgreementHistory.fromJS(item));
            }
            this.Name = data["Name"];
            this.TemplateContent = data["TemplateContent"];
            this.DocumentCloudFileUrl = data["DocumentCloudFileUrl"];
            this.Dynamic = data["Dynamic"];
            this.AgreementType = data["AgreementType"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Agreement {
        let result = new Agreement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AgreementId"] = this.AgreementId;
        data["AnySignature"] = this.AnySignature;
        data["DocumentKey"] = this.DocumentKey;
        data["IsClosedForSignature"] = this.IsClosedForSignature;
        if (this.AgreementReceivers && this.AgreementReceivers.constructor === Array) {
            data["AgreementReceivers"] = [];
            for (let item of this.AgreementReceivers)
                data["AgreementReceivers"].push(item.toJSON());
        }
        if (this.Signatures && this.Signatures.constructor === Array) {
            data["Signatures"] = [];
            for (let item of this.Signatures)
                data["Signatures"].push(item.toJSON());
        }
        if (this.History && this.History.constructor === Array) {
            data["History"] = [];
            for (let item of this.History)
                data["History"].push(item.toJSON());
        }
        data["Name"] = this.Name;
        data["TemplateContent"] = this.TemplateContent;
        data["DocumentCloudFileUrl"] = this.DocumentCloudFileUrl;
        data["Dynamic"] = this.Dynamic;
        data["AgreementType"] = this.AgreementType;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAgreement {
    AgreementId?: number;
    AnySignature?: boolean;
    DocumentKey?: string;
    IsClosedForSignature?: boolean;
    AgreementReceivers?: AgreementReceiver[];
    Signatures?: AgreementSignature[];
    History?: AgreementHistory[];
    Name?: string;
    TemplateContent?: string;
    DocumentCloudFileUrl?: string;
    Dynamic?: boolean;
    AgreementType?: string;
    Context?: Context;
}

export class AgreementSignature implements IAgreementSignature {
    AgreementSignatureId?: number;
    Name?: string;
    Email?: string;
    CellPhone?: string;
    PersonId?: number;
    Date?: Date;
    Signature?: string;
    WorkItemSerieConsultantAgreementId?: number;
    AgreementId?: number;
    Context?: Context;

    constructor(data?: IAgreementSignature) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.AgreementSignatureId = data["AgreementSignatureId"];
            this.Name = data["Name"];
            this.Email = data["Email"];
            this.CellPhone = data["CellPhone"];
            this.PersonId = data["PersonId"];
            this.Date = data["Date"] ? new Date(data["Date"].toString()) : <any>undefined;
            this.Signature = data["Signature"];
            this.WorkItemSerieConsultantAgreementId = data["WorkItemSerieConsultantAgreementId"];
            this.AgreementId = data["AgreementId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AgreementSignature {
        let result = new AgreementSignature();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AgreementSignatureId"] = this.AgreementSignatureId;
        data["Name"] = this.Name;
        data["Email"] = this.Email;
        data["CellPhone"] = this.CellPhone;
        data["PersonId"] = this.PersonId;
        data["Date"] = this.Date ? this.Date.toISOString() : <any>undefined;
        data["Signature"] = this.Signature;
        data["WorkItemSerieConsultantAgreementId"] = this.WorkItemSerieConsultantAgreementId;
        data["AgreementId"] = this.AgreementId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAgreementSignature {
    AgreementSignatureId?: number;
    Name?: string;
    Email?: string;
    CellPhone?: string;
    PersonId?: number;
    Date?: Date;
    Signature?: string;
    WorkItemSerieConsultantAgreementId?: number;
    AgreementId?: number;
    Context?: Context;
}

export class AgreementHistory implements IAgreementHistory {
    AgreementHistoryId?: number;
    Date?: Date;
    Description?: string;
    WorkItemSerieConsultantAgreementId?: number;
    AgreementId?: number;
    Context?: Context;

    constructor(data?: IAgreementHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.AgreementHistoryId = data["AgreementHistoryId"];
            this.Date = data["Date"] ? new Date(data["Date"].toString()) : <any>undefined;
            this.Description = data["Description"];
            this.WorkItemSerieConsultantAgreementId = data["WorkItemSerieConsultantAgreementId"];
            this.AgreementId = data["AgreementId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AgreementHistory {
        let result = new AgreementHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AgreementHistoryId"] = this.AgreementHistoryId;
        data["Date"] = this.Date ? this.Date.toISOString() : <any>undefined;
        data["Description"] = this.Description;
        data["WorkItemSerieConsultantAgreementId"] = this.WorkItemSerieConsultantAgreementId;
        data["AgreementId"] = this.AgreementId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAgreementHistory {
    AgreementHistoryId?: number;
    Date?: Date;
    Description?: string;
    WorkItemSerieConsultantAgreementId?: number;
    AgreementId?: number;
    Context?: Context;
}

export class AgreementTemplate implements IAgreementTemplate {
    AgreementTemplateId?: number;
    PersonalAgreementPersonId?: number;
    PersonalAgreementPersonName?: string;
    Name?: string;
    TemplateContent?: string;
    DocumentCloudFileUrl?: string;
    Dynamic?: boolean;
    AgreementType?: string;
    Context?: Context;

    constructor(data?: IAgreementTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.AgreementTemplateId = data["AgreementTemplateId"];
            this.PersonalAgreementPersonId = data["PersonalAgreementPersonId"];
            this.PersonalAgreementPersonName = data["PersonalAgreementPersonName"];
            this.Name = data["Name"];
            this.TemplateContent = data["TemplateContent"];
            this.DocumentCloudFileUrl = data["DocumentCloudFileUrl"];
            this.Dynamic = data["Dynamic"];
            this.AgreementType = data["AgreementType"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AgreementTemplate {
        let result = new AgreementTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AgreementTemplateId"] = this.AgreementTemplateId;
        data["PersonalAgreementPersonId"] = this.PersonalAgreementPersonId;
        data["PersonalAgreementPersonName"] = this.PersonalAgreementPersonName;
        data["Name"] = this.Name;
        data["TemplateContent"] = this.TemplateContent;
        data["DocumentCloudFileUrl"] = this.DocumentCloudFileUrl;
        data["Dynamic"] = this.Dynamic;
        data["AgreementType"] = this.AgreementType;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAgreementTemplate {
    AgreementTemplateId?: number;
    PersonalAgreementPersonId?: number;
    PersonalAgreementPersonName?: string;
    Name?: string;
    TemplateContent?: string;
    DocumentCloudFileUrl?: string;
    Dynamic?: boolean;
    AgreementType?: string;
    Context?: Context;
}

export class ViewPage implements IViewPage {
    ViewPageId?: number;
    ViewName?: string;
    ViewModelName?: string;
    ViewContent?: string;
    ViewContentProduction?: string;
    ViewContentUrl?: string;
    IsChanged?: boolean;
    IsProtected?: boolean;
    IsLoginView?: boolean;
    AppId?: number;

    constructor(data?: IViewPage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ViewPageId = data["ViewPageId"];
            this.ViewName = data["ViewName"];
            this.ViewModelName = data["ViewModelName"];
            this.ViewContent = data["ViewContent"];
            this.ViewContentProduction = data["ViewContentProduction"];
            this.ViewContentUrl = data["ViewContentUrl"];
            this.IsChanged = data["IsChanged"];
            this.IsProtected = data["IsProtected"];
            this.IsLoginView = data["IsLoginView"];
            this.AppId = data["AppId"];
        }
    }

    static fromJS(data: any): ViewPage {
        let result = new ViewPage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ViewPageId"] = this.ViewPageId;
        data["ViewName"] = this.ViewName;
        data["ViewModelName"] = this.ViewModelName;
        data["ViewContent"] = this.ViewContent;
        data["ViewContentProduction"] = this.ViewContentProduction;
        data["ViewContentUrl"] = this.ViewContentUrl;
        data["IsChanged"] = this.IsChanged;
        data["IsProtected"] = this.IsProtected;
        data["IsLoginView"] = this.IsLoginView;
        data["AppId"] = this.AppId;
        return data;
    }
}

export interface IViewPage {
    ViewPageId?: number;
    ViewName?: string;
    ViewModelName?: string;
    ViewContent?: string;
    ViewContentProduction?: string;
    ViewContentUrl?: string;
    IsChanged?: boolean;
    IsProtected?: boolean;
    IsLoginView?: boolean;
    AppId?: number;
}

export class AreaOfExpertise implements IAreaOfExpertise {
    AreaOfExpertiseId?: number;
    Name?: string;
    CountryId?: string;
    GroupedByContactFilterName?: string;

    constructor(data?: IAreaOfExpertise) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.AreaOfExpertiseId = data["AreaOfExpertiseId"];
            this.Name = data["Name"];
            this.CountryId = data["CountryId"];
            this.GroupedByContactFilterName = data["GroupedByContactFilterName"];
        }
    }

    static fromJS(data: any): AreaOfExpertise {
        let result = new AreaOfExpertise();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AreaOfExpertiseId"] = this.AreaOfExpertiseId;
        data["Name"] = this.Name;
        data["CountryId"] = this.CountryId;
        data["GroupedByContactFilterName"] = this.GroupedByContactFilterName;
        return data;
    }
}

export interface IAreaOfExpertise {
    AreaOfExpertiseId?: number;
    Name?: string;
    CountryId?: string;
    GroupedByContactFilterName?: string;
}

export class WeekBaseModel implements IWeekBaseModel {
    Year?: number;
    Week?: number;

    constructor(data?: IWeekBaseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Year = data["Year"];
            this.Week = data["Week"];
        }
    }

    static fromJS(data: any): WeekBaseModel {
        let result = new WeekBaseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Year"] = this.Year;
        data["Week"] = this.Week;
        return data;
    }
}

export interface IWeekBaseModel {
    Year?: number;
    Week?: number;
}

export class AvailableForWork implements IAvailableForWork {
    id?: string;
    YearNr?: number;
    MonthNr?: number;
    WeekNr?: number;
    Date?: Date;
    FromTime?: string;
    ToTime?: string;
    TimeZoneId?: string;
    PersonId?: string;
    Name?: string;

    constructor(data?: IAvailableForWork) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.YearNr = data["YearNr"];
            this.MonthNr = data["MonthNr"];
            this.WeekNr = data["WeekNr"];
            this.Date = data["Date"] ? new Date(data["Date"].toString()) : <any>undefined;
            this.FromTime = data["FromTime"];
            this.ToTime = data["ToTime"];
            this.TimeZoneId = data["TimeZoneId"];
            this.PersonId = data["PersonId"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): AvailableForWork {
        let result = new AvailableForWork();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["YearNr"] = this.YearNr;
        data["MonthNr"] = this.MonthNr;
        data["WeekNr"] = this.WeekNr;
        data["Date"] = this.Date ? this.Date.toISOString() : <any>undefined;
        data["FromTime"] = this.FromTime;
        data["ToTime"] = this.ToTime;
        data["TimeZoneId"] = this.TimeZoneId;
        data["PersonId"] = this.PersonId;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IAvailableForWork {
    id?: string;
    YearNr?: number;
    MonthNr?: number;
    WeekNr?: number;
    Date?: Date;
    FromTime?: string;
    ToTime?: string;
    TimeZoneId?: string;
    PersonId?: string;
    Name?: string;
}

export class AvailableWorker implements IAvailableWorker {
    PersonId?: string;
    Name?: string;
    Email?: string;
    CellPhone?: string;
    ItemType?: string;
    AllAreaOfExpertises?: string[];
    City?: string;
    AnyBookingInPeriod?: boolean;
    AvailableDaysForSelectedPeriod?: AvailableForWork[];

    constructor(data?: IAvailableWorker) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PersonId = data["PersonId"];
            this.Name = data["Name"];
            this.Email = data["Email"];
            this.CellPhone = data["CellPhone"];
            this.ItemType = data["ItemType"];
            if (data["AllAreaOfExpertises"] && data["AllAreaOfExpertises"].constructor === Array) {
                this.AllAreaOfExpertises = [];
                for (let item of data["AllAreaOfExpertises"])
                    this.AllAreaOfExpertises.push(item);
            }
            this.City = data["City"];
            this.AnyBookingInPeriod = data["AnyBookingInPeriod"];
            if (data["AvailableDaysForSelectedPeriod"] && data["AvailableDaysForSelectedPeriod"].constructor === Array) {
                this.AvailableDaysForSelectedPeriod = [];
                for (let item of data["AvailableDaysForSelectedPeriod"])
                    this.AvailableDaysForSelectedPeriod.push(AvailableForWork.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AvailableWorker {
        let result = new AvailableWorker();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PersonId"] = this.PersonId;
        data["Name"] = this.Name;
        data["Email"] = this.Email;
        data["CellPhone"] = this.CellPhone;
        data["ItemType"] = this.ItemType;
        if (this.AllAreaOfExpertises && this.AllAreaOfExpertises.constructor === Array) {
            data["AllAreaOfExpertises"] = [];
            for (let item of this.AllAreaOfExpertises)
                data["AllAreaOfExpertises"].push(item);
        }
        data["City"] = this.City;
        data["AnyBookingInPeriod"] = this.AnyBookingInPeriod;
        if (this.AvailableDaysForSelectedPeriod && this.AvailableDaysForSelectedPeriod.constructor === Array) {
            data["AvailableDaysForSelectedPeriod"] = [];
            for (let item of this.AvailableDaysForSelectedPeriod)
                data["AvailableDaysForSelectedPeriod"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAvailableWorker {
    PersonId?: string;
    Name?: string;
    Email?: string;
    CellPhone?: string;
    ItemType?: string;
    AllAreaOfExpertises?: string[];
    City?: string;
    AnyBookingInPeriod?: boolean;
    AvailableDaysForSelectedPeriod?: AvailableForWork[];
}

export class BankIdLoginResponse implements IBankIdLoginResponse {
    sessionId?: string;
    redirectUrl?: string;

    constructor(data?: IBankIdLoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sessionId = data["sessionId"];
            this.redirectUrl = data["redirectUrl"];
        }
    }

    static fromJS(data: any): BankIdLoginResponse {
        let result = new BankIdLoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionId"] = this.sessionId;
        data["redirectUrl"] = this.redirectUrl;
        return data;
    }
}

export interface IBankIdLoginResponse {
    sessionId?: string;
    redirectUrl?: string;
}

export class BankIdProfileResult implements IBankIdProfileResult {
    sessionId?: string;
    username?: string;
    userAttributes?: GrandIdUserattributes;

    constructor(data?: IBankIdProfileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sessionId = data["sessionId"];
            this.username = data["username"];
            this.userAttributes = data["userAttributes"] ? GrandIdUserattributes.fromJS(data["userAttributes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BankIdProfileResult {
        let result = new BankIdProfileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionId"] = this.sessionId;
        data["username"] = this.username;
        data["userAttributes"] = this.userAttributes ? this.userAttributes.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBankIdProfileResult {
    sessionId?: string;
    username?: string;
    userAttributes?: GrandIdUserattributes;
}

export class GrandIdUserattributes implements IGrandIdUserattributes {
    signature?: string;
    signdate?: Date;
    ocspResponse?: string;
    givenName?: string;
    surname?: string;
    name?: string;
    personalNumber?: string;
    notBefore?: Date;
    notAfter?: Date;
    ipAddress?: string;

    constructor(data?: IGrandIdUserattributes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.signature = data["signature"];
            this.signdate = data["signdate"] ? new Date(data["signdate"].toString()) : <any>undefined;
            this.ocspResponse = data["ocspResponse"];
            this.givenName = data["givenName"];
            this.surname = data["surname"];
            this.name = data["name"];
            this.personalNumber = data["personalNumber"];
            this.notBefore = data["notBefore"] ? new Date(data["notBefore"].toString()) : <any>undefined;
            this.notAfter = data["notAfter"] ? new Date(data["notAfter"].toString()) : <any>undefined;
            this.ipAddress = data["ipAddress"];
        }
    }

    static fromJS(data: any): GrandIdUserattributes {
        let result = new GrandIdUserattributes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["signature"] = this.signature;
        data["signdate"] = this.signdate ? this.signdate.toISOString() : <any>undefined;
        data["ocspResponse"] = this.ocspResponse;
        data["givenName"] = this.givenName;
        data["surname"] = this.surname;
        data["name"] = this.name;
        data["personalNumber"] = this.personalNumber;
        data["notBefore"] = this.notBefore ? this.notBefore.toISOString() : <any>undefined;
        data["notAfter"] = this.notAfter ? this.notAfter.toISOString() : <any>undefined;
        data["ipAddress"] = this.ipAddress;
        return data;
    }
}

export interface IGrandIdUserattributes {
    signature?: string;
    signdate?: Date;
    ocspResponse?: string;
    givenName?: string;
    surname?: string;
    name?: string;
    personalNumber?: string;
    notBefore?: Date;
    notAfter?: Date;
    ipAddress?: string;
}

export class BusinessUnit implements IBusinessUnit {
    id?: string;
    Name?: string;

    constructor(data?: IBusinessUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): BusinessUnit {
        let result = new BusinessUnit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IBusinessUnit {
    id?: string;
    Name?: string;
}

export class Category implements ICategory {
    CategoryId?: number;
    Name?: string;
    Description?: string;
    ExtendedDescription?: string;
    ImageUrl?: string;
    ParentCategoryId?: number;
    UrlFriendlyName?: string;
    Visible?: boolean;
    Products?: Product[];

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CategoryId = data["CategoryId"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.ExtendedDescription = data["ExtendedDescription"];
            this.ImageUrl = data["ImageUrl"];
            this.ParentCategoryId = data["ParentCategoryId"];
            this.UrlFriendlyName = data["UrlFriendlyName"];
            this.Visible = data["Visible"];
            if (data["Products"] && data["Products"].constructor === Array) {
                this.Products = [];
                for (let item of data["Products"])
                    this.Products.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Category {
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CategoryId"] = this.CategoryId;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["ExtendedDescription"] = this.ExtendedDescription;
        data["ImageUrl"] = this.ImageUrl;
        data["ParentCategoryId"] = this.ParentCategoryId;
        data["UrlFriendlyName"] = this.UrlFriendlyName;
        data["Visible"] = this.Visible;
        if (this.Products && this.Products.constructor === Array) {
            data["Products"] = [];
            for (let item of this.Products)
                data["Products"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICategory {
    CategoryId?: number;
    Name?: string;
    Description?: string;
    ExtendedDescription?: string;
    ImageUrl?: string;
    ParentCategoryId?: number;
    UrlFriendlyName?: string;
    Visible?: boolean;
    Products?: Product[];
}

export class Product implements IProduct {
    ProductId?: number;
    Description?: string;
    CustomerMessage?: string;
    LeadTime?: number;
    RecommendedPrice?: number;
    StandardPrice?: number;
    EanId?: number;
    Brand?: string;
    ManufacturerName?: string;
    ManufacturerItemId?: string;
    EnvironmentCode?: string;
    EnvironmentDescriprion?: string;
    Visible?: boolean;
    Meta_Title?: string;
    Meta_Description?: string;
    Meta_Keywords?: string;
    UrlFriendlyName?: string;
    VideoTag?: string;
    DealFromDate?: Date;
    DealToDate?: Date;
    DealMinBuyQty?: number;
    ServiceUrl?: string;
    CustomProductId?: number;
    Name?: string;
    DisplayName?: string;
    ShortName?: string;
    ShortDescription?: string;
    ImageUrl?: string;
    Vat?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    WeightDescription?: string;
    BuyPrice?: number;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    CategoryId?: number;
    MetaHashTags?: string;
    MetaHashTagsArray?: string[];
    CountryId?: string;
    CurrencyId?: string;
    QtyDeliveries?: number;
    DealPrice?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    TotalVat?: number;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ProductId = data["ProductId"];
            this.Description = data["Description"];
            this.CustomerMessage = data["CustomerMessage"];
            this.LeadTime = data["LeadTime"];
            this.RecommendedPrice = data["RecommendedPrice"];
            this.StandardPrice = data["StandardPrice"];
            this.EanId = data["EanId"];
            this.Brand = data["Brand"];
            this.ManufacturerName = data["ManufacturerName"];
            this.ManufacturerItemId = data["ManufacturerItemId"];
            this.EnvironmentCode = data["EnvironmentCode"];
            this.EnvironmentDescriprion = data["EnvironmentDescriprion"];
            this.Visible = data["Visible"];
            this.Meta_Title = data["Meta_Title"];
            this.Meta_Description = data["Meta_Description"];
            this.Meta_Keywords = data["Meta_Keywords"];
            this.UrlFriendlyName = data["UrlFriendlyName"];
            this.VideoTag = data["VideoTag"];
            this.DealFromDate = data["DealFromDate"] ? new Date(data["DealFromDate"].toString()) : <any>undefined;
            this.DealToDate = data["DealToDate"] ? new Date(data["DealToDate"].toString()) : <any>undefined;
            this.DealMinBuyQty = data["DealMinBuyQty"];
            this.ServiceUrl = data["ServiceUrl"];
            this.CustomProductId = data["CustomProductId"];
            this.Name = data["Name"];
            this.DisplayName = data["DisplayName"];
            this.ShortName = data["ShortName"];
            this.ShortDescription = data["ShortDescription"];
            this.ImageUrl = data["ImageUrl"];
            this.Vat = data["Vat"];
            this.Uom = data["Uom"];
            this.SalesQuantity = data["SalesQuantity"];
            this.PackageSize = data["PackageSize"];
            this.WeightDescription = data["WeightDescription"];
            this.BuyPrice = data["BuyPrice"];
            this.Size = data["Size"];
            this.Color = data["Color"];
            this.SellingPrice = data["SellingPrice"];
            this.GroupedByProductId = data["GroupedByProductId"];
            this.CategoryId = data["CategoryId"];
            this.MetaHashTags = data["MetaHashTags"];
            if (data["MetaHashTagsArray"] && data["MetaHashTagsArray"].constructor === Array) {
                this.MetaHashTagsArray = [];
                for (let item of data["MetaHashTagsArray"])
                    this.MetaHashTagsArray.push(item);
            }
            this.CountryId = data["CountryId"];
            this.CurrencyId = data["CurrencyId"];
            this.QtyDeliveries = data["QtyDeliveries"];
            this.DealPrice = data["DealPrice"];
            this.CurrentSellingPrice = data["CurrentSellingPrice"];
            this.CurrentSellingPriceInclVat = data["CurrentSellingPriceInclVat"];
            this.TotalVat = data["TotalVat"];
        }
    }

    static fromJS(data: any): Product {
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProductId"] = this.ProductId;
        data["Description"] = this.Description;
        data["CustomerMessage"] = this.CustomerMessage;
        data["LeadTime"] = this.LeadTime;
        data["RecommendedPrice"] = this.RecommendedPrice;
        data["StandardPrice"] = this.StandardPrice;
        data["EanId"] = this.EanId;
        data["Brand"] = this.Brand;
        data["ManufacturerName"] = this.ManufacturerName;
        data["ManufacturerItemId"] = this.ManufacturerItemId;
        data["EnvironmentCode"] = this.EnvironmentCode;
        data["EnvironmentDescriprion"] = this.EnvironmentDescriprion;
        data["Visible"] = this.Visible;
        data["Meta_Title"] = this.Meta_Title;
        data["Meta_Description"] = this.Meta_Description;
        data["Meta_Keywords"] = this.Meta_Keywords;
        data["UrlFriendlyName"] = this.UrlFriendlyName;
        data["VideoTag"] = this.VideoTag;
        data["DealFromDate"] = this.DealFromDate ? this.DealFromDate.toISOString() : <any>undefined;
        data["DealToDate"] = this.DealToDate ? this.DealToDate.toISOString() : <any>undefined;
        data["DealMinBuyQty"] = this.DealMinBuyQty;
        data["ServiceUrl"] = this.ServiceUrl;
        data["CustomProductId"] = this.CustomProductId;
        data["Name"] = this.Name;
        data["DisplayName"] = this.DisplayName;
        data["ShortName"] = this.ShortName;
        data["ShortDescription"] = this.ShortDescription;
        data["ImageUrl"] = this.ImageUrl;
        data["Vat"] = this.Vat;
        data["Uom"] = this.Uom;
        data["SalesQuantity"] = this.SalesQuantity;
        data["PackageSize"] = this.PackageSize;
        data["WeightDescription"] = this.WeightDescription;
        data["BuyPrice"] = this.BuyPrice;
        data["Size"] = this.Size;
        data["Color"] = this.Color;
        data["SellingPrice"] = this.SellingPrice;
        data["GroupedByProductId"] = this.GroupedByProductId;
        data["CategoryId"] = this.CategoryId;
        data["MetaHashTags"] = this.MetaHashTags;
        if (this.MetaHashTagsArray && this.MetaHashTagsArray.constructor === Array) {
            data["MetaHashTagsArray"] = [];
            for (let item of this.MetaHashTagsArray)
                data["MetaHashTagsArray"].push(item);
        }
        data["CountryId"] = this.CountryId;
        data["CurrencyId"] = this.CurrencyId;
        data["QtyDeliveries"] = this.QtyDeliveries;
        data["DealPrice"] = this.DealPrice;
        data["CurrentSellingPrice"] = this.CurrentSellingPrice;
        data["CurrentSellingPriceInclVat"] = this.CurrentSellingPriceInclVat;
        data["TotalVat"] = this.TotalVat;
        return data;
    }
}

export interface IProduct {
    ProductId?: number;
    Description?: string;
    CustomerMessage?: string;
    LeadTime?: number;
    RecommendedPrice?: number;
    StandardPrice?: number;
    EanId?: number;
    Brand?: string;
    ManufacturerName?: string;
    ManufacturerItemId?: string;
    EnvironmentCode?: string;
    EnvironmentDescriprion?: string;
    Visible?: boolean;
    Meta_Title?: string;
    Meta_Description?: string;
    Meta_Keywords?: string;
    UrlFriendlyName?: string;
    VideoTag?: string;
    DealFromDate?: Date;
    DealToDate?: Date;
    DealMinBuyQty?: number;
    ServiceUrl?: string;
    CustomProductId?: number;
    Name?: string;
    DisplayName?: string;
    ShortName?: string;
    ShortDescription?: string;
    ImageUrl?: string;
    Vat?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    WeightDescription?: string;
    BuyPrice?: number;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    CategoryId?: number;
    MetaHashTags?: string;
    MetaHashTagsArray?: string[];
    CountryId?: string;
    CurrencyId?: string;
    QtyDeliveries?: number;
    DealPrice?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    TotalVat?: number;
}

export class CloudFile implements ICloudFile {
    Id?: string;
    Name?: string;
    Url?: string;
    ThumbUrl?: string;
    Tags?: string;
    UploadDate?: Date;
    Extension?: string;
    EmbedCode?: string;
    CloudFileDirectoryId?: string;

    constructor(data?: ICloudFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Id = data["Id"];
            this.Name = data["Name"];
            this.Url = data["Url"];
            this.ThumbUrl = data["ThumbUrl"];
            this.Tags = data["Tags"];
            this.UploadDate = data["UploadDate"] ? new Date(data["UploadDate"].toString()) : <any>undefined;
            this.Extension = data["Extension"];
            this.EmbedCode = data["EmbedCode"];
            this.CloudFileDirectoryId = data["CloudFileDirectoryId"];
        }
    }

    static fromJS(data: any): CloudFile {
        let result = new CloudFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.Id;
        data["Name"] = this.Name;
        data["Url"] = this.Url;
        data["ThumbUrl"] = this.ThumbUrl;
        data["Tags"] = this.Tags;
        data["UploadDate"] = this.UploadDate ? this.UploadDate.toISOString() : <any>undefined;
        data["Extension"] = this.Extension;
        data["EmbedCode"] = this.EmbedCode;
        data["CloudFileDirectoryId"] = this.CloudFileDirectoryId;
        return data;
    }
}

export interface ICloudFile {
    Id?: string;
    Name?: string;
    Url?: string;
    ThumbUrl?: string;
    Tags?: string;
    UploadDate?: Date;
    Extension?: string;
    EmbedCode?: string;
    CloudFileDirectoryId?: string;
}

export class ContinuationResultOfIEnumerableOfComment implements IContinuationResultOfIEnumerableOfComment {
    Result?: Comment[];
    ContinuationToken?: string;

    constructor(data?: IContinuationResultOfIEnumerableOfComment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Result"] && data["Result"].constructor === Array) {
                this.Result = [];
                for (let item of data["Result"])
                    this.Result.push(Comment.fromJS(item));
            }
            this.ContinuationToken = data["ContinuationToken"];
        }
    }

    static fromJS(data: any): ContinuationResultOfIEnumerableOfComment {
        let result = new ContinuationResultOfIEnumerableOfComment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Result && this.Result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.Result)
                data["Result"].push(item.toJSON());
        }
        data["ContinuationToken"] = this.ContinuationToken;
        return data;
    }
}

export interface IContinuationResultOfIEnumerableOfComment {
    Result?: Comment[];
    ContinuationToken?: string;
}

export class Comment implements IComment {
    id?: string;
    Description?: string;
    CommentForItemType?: string;
    ItemId?: string;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    CreatedBy?: number;
    UpdatedBy?: number;
    CreatedByName?: string;

    constructor(data?: IComment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Description = data["Description"];
            this.CommentForItemType = data["CommentForItemType"];
            this.ItemId = data["ItemId"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.CreatedBy = data["CreatedBy"];
            this.UpdatedBy = data["UpdatedBy"];
            this.CreatedByName = data["CreatedByName"];
        }
    }

    static fromJS(data: any): Comment {
        let result = new Comment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Description"] = this.Description;
        data["CommentForItemType"] = this.CommentForItemType;
        data["ItemId"] = this.ItemId;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["CreatedBy"] = this.CreatedBy;
        data["UpdatedBy"] = this.UpdatedBy;
        data["CreatedByName"] = this.CreatedByName;
        return data;
    }
}

export interface IComment {
    id?: string;
    Description?: string;
    CommentForItemType?: string;
    ItemId?: string;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    CreatedBy?: number;
    UpdatedBy?: number;
    CreatedByName?: string;
}

export class ItemObject implements IItemObject {
    ItemId?: string;
    ItemType?: string;

    constructor(data?: IItemObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ItemId = data["ItemId"];
            this.ItemType = data["ItemType"];
        }
    }

    static fromJS(data: any): ItemObject {
        let result = new ItemObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ItemId"] = this.ItemId;
        data["ItemType"] = this.ItemType;
        return data;
    }
}

export interface IItemObject {
    ItemId?: string;
    ItemType?: string;
}

export class SendEmailModelSimple implements ISendEmailModelSimple {
    FromEmail?: string;
    FromName?: string;
    ToEmail?: string;
    Subject?: string;
    Body?: string;
    SharesinformationaboutPersonId?: string;
    Attachments?: string[];

    constructor(data?: ISendEmailModelSimple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.FromEmail = data["FromEmail"];
            this.FromName = data["FromName"];
            this.ToEmail = data["ToEmail"];
            this.Subject = data["Subject"];
            this.Body = data["Body"];
            this.SharesinformationaboutPersonId = data["SharesinformationaboutPersonId"];
            if (data["Attachments"] && data["Attachments"].constructor === Array) {
                this.Attachments = [];
                for (let item of data["Attachments"])
                    this.Attachments.push(item);
            }
        }
    }

    static fromJS(data: any): SendEmailModelSimple {
        let result = new SendEmailModelSimple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FromEmail"] = this.FromEmail;
        data["FromName"] = this.FromName;
        data["ToEmail"] = this.ToEmail;
        data["Subject"] = this.Subject;
        data["Body"] = this.Body;
        data["SharesinformationaboutPersonId"] = this.SharesinformationaboutPersonId;
        if (this.Attachments && this.Attachments.constructor === Array) {
            data["Attachments"] = [];
            for (let item of this.Attachments)
                data["Attachments"].push(item);
        }
        return data;
    }
}

export interface ISendEmailModelSimple {
    FromEmail?: string;
    FromName?: string;
    ToEmail?: string;
    Subject?: string;
    Body?: string;
    SharesinformationaboutPersonId?: string;
    Attachments?: string[];
}

export class SendMessageResult implements ISendMessageResult {
    DataObjectTypeName?: string;
    DataObjectId?: number;
    TransportType?: string;
    Address?: string;
    Description?: string;
    Sent?: boolean;

    constructor(data?: ISendMessageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.DataObjectTypeName = data["DataObjectTypeName"];
            this.DataObjectId = data["DataObjectId"];
            this.TransportType = data["TransportType"];
            this.Address = data["Address"];
            this.Description = data["Description"];
            this.Sent = data["Sent"];
        }
    }

    static fromJS(data: any): SendMessageResult {
        let result = new SendMessageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DataObjectTypeName"] = this.DataObjectTypeName;
        data["DataObjectId"] = this.DataObjectId;
        data["TransportType"] = this.TransportType;
        data["Address"] = this.Address;
        data["Description"] = this.Description;
        data["Sent"] = this.Sent;
        return data;
    }
}

export interface ISendMessageResult {
    DataObjectTypeName?: string;
    DataObjectId?: number;
    TransportType?: string;
    Address?: string;
    Description?: string;
    Sent?: boolean;
}

export class SendSmsModelSimple implements ISendSmsModelSimple {
    To?: string;
    Body?: string;
    SharesinformationaboutPersonId?: string;

    constructor(data?: ISendSmsModelSimple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.To = data["To"];
            this.Body = data["Body"];
            this.SharesinformationaboutPersonId = data["SharesinformationaboutPersonId"];
        }
    }

    static fromJS(data: any): SendSmsModelSimple {
        let result = new SendSmsModelSimple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["To"] = this.To;
        data["Body"] = this.Body;
        data["SharesinformationaboutPersonId"] = this.SharesinformationaboutPersonId;
        return data;
    }
}

export interface ISendSmsModelSimple {
    To?: string;
    Body?: string;
    SharesinformationaboutPersonId?: string;
}

export class SendEmailModel implements ISendEmailModel {
    id?: string;
    FromAddress?: string;
    FromName?: string;
    IsMarketing?: boolean;
    SendToSpecificAddress?: string;
    Items?: SendMessageItem[];
    Subject?: string;
    Body?: string;
    ViewEngineType?: string;
    Attachments?: string[];
    SendDate?: Date;
    QtyToSend?: number;
    QtySuccess?: number;
    QtyFail?: number;
    ParseError?: boolean;
    ParseMessage?: string;

    constructor(data?: ISendEmailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.FromAddress = data["FromAddress"];
            this.FromName = data["FromName"];
            this.IsMarketing = data["IsMarketing"];
            this.SendToSpecificAddress = data["SendToSpecificAddress"];
            if (data["Items"] && data["Items"].constructor === Array) {
                this.Items = [];
                for (let item of data["Items"])
                    this.Items.push(SendMessageItem.fromJS(item));
            }
            this.Subject = data["Subject"];
            this.Body = data["Body"];
            this.ViewEngineType = data["ViewEngineType"];
            if (data["Attachments"] && data["Attachments"].constructor === Array) {
                this.Attachments = [];
                for (let item of data["Attachments"])
                    this.Attachments.push(item);
            }
            this.SendDate = data["SendDate"] ? new Date(data["SendDate"].toString()) : <any>undefined;
            this.QtyToSend = data["QtyToSend"];
            this.QtySuccess = data["QtySuccess"];
            this.QtyFail = data["QtyFail"];
            this.ParseError = data["ParseError"];
            this.ParseMessage = data["ParseMessage"];
        }
    }

    static fromJS(data: any): SendEmailModel {
        let result = new SendEmailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["FromAddress"] = this.FromAddress;
        data["FromName"] = this.FromName;
        data["IsMarketing"] = this.IsMarketing;
        data["SendToSpecificAddress"] = this.SendToSpecificAddress;
        if (this.Items && this.Items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.Items)
                data["Items"].push(item.toJSON());
        }
        data["Subject"] = this.Subject;
        data["Body"] = this.Body;
        data["ViewEngineType"] = this.ViewEngineType;
        if (this.Attachments && this.Attachments.constructor === Array) {
            data["Attachments"] = [];
            for (let item of this.Attachments)
                data["Attachments"].push(item);
        }
        data["SendDate"] = this.SendDate ? this.SendDate.toISOString() : <any>undefined;
        data["QtyToSend"] = this.QtyToSend;
        data["QtySuccess"] = this.QtySuccess;
        data["QtyFail"] = this.QtyFail;
        data["ParseError"] = this.ParseError;
        data["ParseMessage"] = this.ParseMessage;
        return data;
    }
}

export interface ISendEmailModel {
    id?: string;
    FromAddress?: string;
    FromName?: string;
    IsMarketing?: boolean;
    SendToSpecificAddress?: string;
    Items?: SendMessageItem[];
    Subject?: string;
    Body?: string;
    ViewEngineType?: string;
    Attachments?: string[];
    SendDate?: Date;
    QtyToSend?: number;
    QtySuccess?: number;
    QtyFail?: number;
    ParseError?: boolean;
    ParseMessage?: string;
}

export class SendMessageItem implements ISendMessageItem {
    Address?: string;
    Name?: string;
    PersonId?: string;
    RecieverDifferentFromViewModelDetails?: boolean;
    ViewModelId?: string;
    ViewModelTypeName?: string;

    constructor(data?: ISendMessageItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Address = data["Address"];
            this.Name = data["Name"];
            this.PersonId = data["PersonId"];
            this.RecieverDifferentFromViewModelDetails = data["RecieverDifferentFromViewModelDetails"];
            this.ViewModelId = data["ViewModelId"];
            this.ViewModelTypeName = data["ViewModelTypeName"];
        }
    }

    static fromJS(data: any): SendMessageItem {
        let result = new SendMessageItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Address"] = this.Address;
        data["Name"] = this.Name;
        data["PersonId"] = this.PersonId;
        data["RecieverDifferentFromViewModelDetails"] = this.RecieverDifferentFromViewModelDetails;
        data["ViewModelId"] = this.ViewModelId;
        data["ViewModelTypeName"] = this.ViewModelTypeName;
        return data;
    }
}

export interface ISendMessageItem {
    Address?: string;
    Name?: string;
    PersonId?: string;
    RecieverDifferentFromViewModelDetails?: boolean;
    ViewModelId?: string;
    ViewModelTypeName?: string;
}

export class SendSmsModel implements ISendSmsModel {
    id?: string;
    FromAddress?: string;
    FromName?: string;
    IsMarketing?: boolean;
    SendToSpecificAddress?: string;
    Items?: SendMessageItem[];
    Subject?: string;
    Body?: string;
    ViewEngineType?: string;
    SendDate?: Date;
    QtyToSend?: number;
    QtySuccess?: number;
    QtyFail?: number;
    ParseError?: boolean;
    ParseMessage?: string;

    constructor(data?: ISendSmsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.FromAddress = data["FromAddress"];
            this.FromName = data["FromName"];
            this.IsMarketing = data["IsMarketing"];
            this.SendToSpecificAddress = data["SendToSpecificAddress"];
            if (data["Items"] && data["Items"].constructor === Array) {
                this.Items = [];
                for (let item of data["Items"])
                    this.Items.push(SendMessageItem.fromJS(item));
            }
            this.Subject = data["Subject"];
            this.Body = data["Body"];
            this.ViewEngineType = data["ViewEngineType"];
            this.SendDate = data["SendDate"] ? new Date(data["SendDate"].toString()) : <any>undefined;
            this.QtyToSend = data["QtyToSend"];
            this.QtySuccess = data["QtySuccess"];
            this.QtyFail = data["QtyFail"];
            this.ParseError = data["ParseError"];
            this.ParseMessage = data["ParseMessage"];
        }
    }

    static fromJS(data: any): SendSmsModel {
        let result = new SendSmsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["FromAddress"] = this.FromAddress;
        data["FromName"] = this.FromName;
        data["IsMarketing"] = this.IsMarketing;
        data["SendToSpecificAddress"] = this.SendToSpecificAddress;
        if (this.Items && this.Items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.Items)
                data["Items"].push(item.toJSON());
        }
        data["Subject"] = this.Subject;
        data["Body"] = this.Body;
        data["ViewEngineType"] = this.ViewEngineType;
        data["SendDate"] = this.SendDate ? this.SendDate.toISOString() : <any>undefined;
        data["QtyToSend"] = this.QtyToSend;
        data["QtySuccess"] = this.QtySuccess;
        data["QtyFail"] = this.QtyFail;
        data["ParseError"] = this.ParseError;
        data["ParseMessage"] = this.ParseMessage;
        return data;
    }
}

export interface ISendSmsModel {
    id?: string;
    FromAddress?: string;
    FromName?: string;
    IsMarketing?: boolean;
    SendToSpecificAddress?: string;
    Items?: SendMessageItem[];
    Subject?: string;
    Body?: string;
    ViewEngineType?: string;
    SendDate?: Date;
    QtyToSend?: number;
    QtySuccess?: number;
    QtyFail?: number;
    ParseError?: boolean;
    ParseMessage?: string;
}

export class SendListItem implements ISendListItem {
    id?: string;
    Address?: string;
    AddressName?: string;
    Title?: string;
    PersonId?: string;
    DataObjectId?: string;
    DataObjectTypeName?: string;
    ActionDate?: DateEpoch;
    ActionIsSent?: boolean;
    ActionDescription?: string;
    NumSegments?: number;
    SendListId?: string;

    constructor(data?: ISendListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Address = data["Address"];
            this.AddressName = data["AddressName"];
            this.Title = data["Title"];
            this.PersonId = data["PersonId"];
            this.DataObjectId = data["DataObjectId"];
            this.DataObjectTypeName = data["DataObjectTypeName"];
            this.ActionDate = data["ActionDate"] ? DateEpoch.fromJS(data["ActionDate"]) : <any>undefined;
            this.ActionIsSent = data["ActionIsSent"];
            this.ActionDescription = data["ActionDescription"];
            this.NumSegments = data["NumSegments"];
            this.SendListId = data["SendListId"];
        }
    }

    static fromJS(data: any): SendListItem {
        let result = new SendListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Address"] = this.Address;
        data["AddressName"] = this.AddressName;
        data["Title"] = this.Title;
        data["PersonId"] = this.PersonId;
        data["DataObjectId"] = this.DataObjectId;
        data["DataObjectTypeName"] = this.DataObjectTypeName;
        data["ActionDate"] = this.ActionDate ? this.ActionDate.toJSON() : <any>undefined;
        data["ActionIsSent"] = this.ActionIsSent;
        data["ActionDescription"] = this.ActionDescription;
        data["NumSegments"] = this.NumSegments;
        data["SendListId"] = this.SendListId;
        return data;
    }
}

export interface ISendListItem {
    id?: string;
    Address?: string;
    AddressName?: string;
    Title?: string;
    PersonId?: string;
    DataObjectId?: string;
    DataObjectTypeName?: string;
    ActionDate?: DateEpoch;
    ActionIsSent?: boolean;
    ActionDescription?: string;
    NumSegments?: number;
    SendListId?: string;
}

export class DateEpoch implements IDateEpoch {
    Date?: Date;
    Epoch?: number;

    constructor(data?: IDateEpoch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Date = data["Date"] ? new Date(data["Date"].toString()) : <any>undefined;
            this.Epoch = data["Epoch"];
        }
    }

    static fromJS(data: any): DateEpoch {
        let result = new DateEpoch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Date"] = this.Date ? this.Date.toISOString() : <any>undefined;
        data["Epoch"] = this.Epoch;
        return data;
    }
}

export interface IDateEpoch {
    Date?: Date;
    Epoch?: number;
}

export class CommonAddress implements ICommonAddress {
    id?: string;
    Address?: string;
    TransportType?: string;

    constructor(data?: ICommonAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Address = data["Address"];
            this.TransportType = data["TransportType"];
        }
    }

    static fromJS(data: any): CommonAddress {
        let result = new CommonAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Address"] = this.Address;
        data["TransportType"] = this.TransportType;
        return data;
    }
}

export interface ICommonAddress {
    id?: string;
    Address?: string;
    TransportType?: string;
}

export class SendList implements ISendList {
    id?: string;
    TransportType: string;
    FromAddress?: string;
    FromName?: string;
    SendToSpecificAddress?: string;
    Subject?: string;
    TemplateContent: string;
    ViewEngineType?: string;
    InitializeSendDate?: DateEpoch;
    Attachments?: string[];
    QtyToSend?: number;
    QtySuccess?: number;
    QtyFail?: number;
    Finished?: boolean;
    IsMarketing: boolean;
    ParseError?: boolean;
    ParseMessage?: string;
    CreatedDate?: Date;

    constructor(data?: ISendList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.TransportType = data["TransportType"];
            this.FromAddress = data["FromAddress"];
            this.FromName = data["FromName"];
            this.SendToSpecificAddress = data["SendToSpecificAddress"];
            this.Subject = data["Subject"];
            this.TemplateContent = data["TemplateContent"];
            this.ViewEngineType = data["ViewEngineType"];
            this.InitializeSendDate = data["InitializeSendDate"] ? DateEpoch.fromJS(data["InitializeSendDate"]) : <any>undefined;
            if (data["Attachments"] && data["Attachments"].constructor === Array) {
                this.Attachments = [];
                for (let item of data["Attachments"])
                    this.Attachments.push(item);
            }
            this.QtyToSend = data["QtyToSend"];
            this.QtySuccess = data["QtySuccess"];
            this.QtyFail = data["QtyFail"];
            this.Finished = data["Finished"];
            this.IsMarketing = data["IsMarketing"];
            this.ParseError = data["ParseError"];
            this.ParseMessage = data["ParseMessage"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SendList {
        let result = new SendList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["TransportType"] = this.TransportType;
        data["FromAddress"] = this.FromAddress;
        data["FromName"] = this.FromName;
        data["SendToSpecificAddress"] = this.SendToSpecificAddress;
        data["Subject"] = this.Subject;
        data["TemplateContent"] = this.TemplateContent;
        data["ViewEngineType"] = this.ViewEngineType;
        data["InitializeSendDate"] = this.InitializeSendDate ? this.InitializeSendDate.toJSON() : <any>undefined;
        if (this.Attachments && this.Attachments.constructor === Array) {
            data["Attachments"] = [];
            for (let item of this.Attachments)
                data["Attachments"].push(item);
        }
        data["QtyToSend"] = this.QtyToSend;
        data["QtySuccess"] = this.QtySuccess;
        data["QtyFail"] = this.QtyFail;
        data["Finished"] = this.Finished;
        data["IsMarketing"] = this.IsMarketing;
        data["ParseError"] = this.ParseError;
        data["ParseMessage"] = this.ParseMessage;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ISendList {
    id?: string;
    TransportType: string;
    FromAddress?: string;
    FromName?: string;
    SendToSpecificAddress?: string;
    Subject?: string;
    TemplateContent: string;
    ViewEngineType?: string;
    InitializeSendDate?: DateEpoch;
    Attachments?: string[];
    QtyToSend?: number;
    QtySuccess?: number;
    QtyFail?: number;
    Finished?: boolean;
    IsMarketing: boolean;
    ParseError?: boolean;
    ParseMessage?: string;
    CreatedDate?: Date;
}

export class SendListDetails implements ISendListDetails {
    Items?: SendListItem[];
    id?: string;
    TransportType: string;
    FromAddress?: string;
    FromName?: string;
    SendToSpecificAddress?: string;
    Subject?: string;
    TemplateContent: string;
    ViewEngineType?: string;
    InitializeSendDate?: DateEpoch;
    Attachments?: string[];
    QtyToSend?: number;
    QtySuccess?: number;
    QtyFail?: number;
    Finished?: boolean;
    IsMarketing: boolean;
    ParseError?: boolean;
    ParseMessage?: string;
    CreatedDate?: Date;

    constructor(data?: ISendListDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Items"] && data["Items"].constructor === Array) {
                this.Items = [];
                for (let item of data["Items"])
                    this.Items.push(SendListItem.fromJS(item));
            }
            this.id = data["id"];
            this.TransportType = data["TransportType"];
            this.FromAddress = data["FromAddress"];
            this.FromName = data["FromName"];
            this.SendToSpecificAddress = data["SendToSpecificAddress"];
            this.Subject = data["Subject"];
            this.TemplateContent = data["TemplateContent"];
            this.ViewEngineType = data["ViewEngineType"];
            this.InitializeSendDate = data["InitializeSendDate"] ? DateEpoch.fromJS(data["InitializeSendDate"]) : <any>undefined;
            if (data["Attachments"] && data["Attachments"].constructor === Array) {
                this.Attachments = [];
                for (let item of data["Attachments"])
                    this.Attachments.push(item);
            }
            this.QtyToSend = data["QtyToSend"];
            this.QtySuccess = data["QtySuccess"];
            this.QtyFail = data["QtyFail"];
            this.Finished = data["Finished"];
            this.IsMarketing = data["IsMarketing"];
            this.ParseError = data["ParseError"];
            this.ParseMessage = data["ParseMessage"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SendListDetails {
        let result = new SendListDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Items && this.Items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.Items)
                data["Items"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["TransportType"] = this.TransportType;
        data["FromAddress"] = this.FromAddress;
        data["FromName"] = this.FromName;
        data["SendToSpecificAddress"] = this.SendToSpecificAddress;
        data["Subject"] = this.Subject;
        data["TemplateContent"] = this.TemplateContent;
        data["ViewEngineType"] = this.ViewEngineType;
        data["InitializeSendDate"] = this.InitializeSendDate ? this.InitializeSendDate.toJSON() : <any>undefined;
        if (this.Attachments && this.Attachments.constructor === Array) {
            data["Attachments"] = [];
            for (let item of this.Attachments)
                data["Attachments"].push(item);
        }
        data["QtyToSend"] = this.QtyToSend;
        data["QtySuccess"] = this.QtySuccess;
        data["QtyFail"] = this.QtyFail;
        data["Finished"] = this.Finished;
        data["IsMarketing"] = this.IsMarketing;
        data["ParseError"] = this.ParseError;
        data["ParseMessage"] = this.ParseMessage;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ISendListDetails {
    Items?: SendListItem[];
    id?: string;
    TransportType: string;
    FromAddress?: string;
    FromName?: string;
    SendToSpecificAddress?: string;
    Subject?: string;
    TemplateContent: string;
    ViewEngineType?: string;
    InitializeSendDate?: DateEpoch;
    Attachments?: string[];
    QtyToSend?: number;
    QtySuccess?: number;
    QtyFail?: number;
    Finished?: boolean;
    IsMarketing: boolean;
    ParseError?: boolean;
    ParseMessage?: string;
    CreatedDate?: Date;
}

export class EmailAddress implements IEmailAddress {
    Email?: string;
    Name?: string;

    constructor(data?: IEmailAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Email = data["Email"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): EmailAddress {
        let result = new EmailAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Email"] = this.Email;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IEmailAddress {
    Email?: string;
    Name?: string;
}

export class PersonDetails implements IPersonDetails {
    ContactFilters?: ContactFilter[];
    ContactPersons?: ContactPerson[];
    CustomFields?: CustomPersonField[];
    PersonId?: number;
    RoleName?: string;
    SellingPrice?: number;
    DefaultCompensation?: number;
    DefaultCompensationUom?: string;
    CountyCouncilName?: string;
    PreferedCountyCouncilNames?: string[];
    DefaultVatSetting?: number;
    ItemType?: string;
    AvailableWeeksAsJson?: string;
    KnowledgeOfMedicalRecord?: string;
    IsNew?: boolean;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    QualityResult?: number;
    LastContactDate?: Date;
    AreaOfExpertise?: string;
    AllAreaOfExpertises?: string[];
    BornDate?: Date;
    SystemRoleName?: string;
    RoleAccess?: string;
    AccountId?: number;
    ForSystemRole?: string;
    AvailableForWorkInCountries?: string[];
    BelongToId?: string;
    SocialSecurityNo2?: string;
    OrderCountry?: string;
    CostCenter?: string;
    Name?: string;
    ShippingName?: string;
    Fax?: string;
    Web?: string;
    TaxPercentage?: number;
    TaxTable?: string;
    Bank?: string;
    ClearingNumber?: string;
    BankAccountNumber?: string;
    EmployeeNumber?: string;
    BankGiro?: string;
    PlusGiro?: string;
    VatNr?: string;
    SNICode?: string;
    IBANBankGiro?: string;
    BICPlusGiro?: string;
    Title?: string;
    Description?: string;
    SyncShippingAddress?: boolean;
    Deactivated?: boolean;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SocialSecurityNo?: string;
    ImageUrl?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    BusinessSocialSecurityNo?: string;
    BusinessName?: string;
    BusinessStreetName?: string;
    BusinessPostNo?: string;
    BusinessCity?: string;
    BranchOffice?: string;
    Department?: string;
    CellPhone?: string;
    Email?: string;
    ExtraEmail?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    TermsOfPaymentQtyDaysId?: number;
    Phone?: string;
    Doorcode?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Reference?: string;
    ShippingReference?: string;
    OurPersonId?: number;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    ExternalSubscriptionId?: string;
    ExternalAddressSelector?: string;
    ExternalFortnoxCustomerNo?: string;
    ReferredByPersonId?: number;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    QtyRelatedDocuments?: number;
    PendingDelete?: boolean;
    Comment?: string;
    ShippingComment?: string;

    constructor(data?: IPersonDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["ContactFilters"] && data["ContactFilters"].constructor === Array) {
                this.ContactFilters = [];
                for (let item of data["ContactFilters"])
                    this.ContactFilters.push(ContactFilter.fromJS(item));
            }
            if (data["ContactPersons"] && data["ContactPersons"].constructor === Array) {
                this.ContactPersons = [];
                for (let item of data["ContactPersons"])
                    this.ContactPersons.push(ContactPerson.fromJS(item));
            }
            if (data["CustomFields"] && data["CustomFields"].constructor === Array) {
                this.CustomFields = [];
                for (let item of data["CustomFields"])
                    this.CustomFields.push(CustomPersonField.fromJS(item));
            }
            this.PersonId = data["PersonId"];
            this.RoleName = data["RoleName"];
            this.SellingPrice = data["SellingPrice"];
            this.DefaultCompensation = data["DefaultCompensation"];
            this.DefaultCompensationUom = data["DefaultCompensationUom"];
            this.CountyCouncilName = data["CountyCouncilName"];
            if (data["PreferedCountyCouncilNames"] && data["PreferedCountyCouncilNames"].constructor === Array) {
                this.PreferedCountyCouncilNames = [];
                for (let item of data["PreferedCountyCouncilNames"])
                    this.PreferedCountyCouncilNames.push(item);
            }
            this.DefaultVatSetting = data["DefaultVatSetting"];
            this.ItemType = data["ItemType"];
            this.AvailableWeeksAsJson = data["AvailableWeeksAsJson"];
            this.KnowledgeOfMedicalRecord = data["KnowledgeOfMedicalRecord"];
            this.IsNew = data["IsNew"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.QualityResult = data["QualityResult"];
            this.LastContactDate = data["LastContactDate"] ? new Date(data["LastContactDate"].toString()) : <any>undefined;
            this.AreaOfExpertise = data["AreaOfExpertise"];
            if (data["AllAreaOfExpertises"] && data["AllAreaOfExpertises"].constructor === Array) {
                this.AllAreaOfExpertises = [];
                for (let item of data["AllAreaOfExpertises"])
                    this.AllAreaOfExpertises.push(item);
            }
            this.BornDate = data["BornDate"] ? new Date(data["BornDate"].toString()) : <any>undefined;
            this.SystemRoleName = data["SystemRoleName"];
            this.RoleAccess = data["RoleAccess"];
            this.AccountId = data["AccountId"];
            this.ForSystemRole = data["ForSystemRole"];
            if (data["AvailableForWorkInCountries"] && data["AvailableForWorkInCountries"].constructor === Array) {
                this.AvailableForWorkInCountries = [];
                for (let item of data["AvailableForWorkInCountries"])
                    this.AvailableForWorkInCountries.push(item);
            }
            this.BelongToId = data["BelongToId"];
            this.SocialSecurityNo2 = data["SocialSecurityNo2"];
            this.OrderCountry = data["OrderCountry"];
            this.CostCenter = data["CostCenter"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.Fax = data["Fax"];
            this.Web = data["Web"];
            this.TaxPercentage = data["TaxPercentage"];
            this.TaxTable = data["TaxTable"];
            this.Bank = data["Bank"];
            this.ClearingNumber = data["ClearingNumber"];
            this.BankAccountNumber = data["BankAccountNumber"];
            this.EmployeeNumber = data["EmployeeNumber"];
            this.BankGiro = data["BankGiro"];
            this.PlusGiro = data["PlusGiro"];
            this.VatNr = data["VatNr"];
            this.SNICode = data["SNICode"];
            this.IBANBankGiro = data["IBANBankGiro"];
            this.BICPlusGiro = data["BICPlusGiro"];
            this.Title = data["Title"];
            this.Description = data["Description"];
            this.SyncShippingAddress = data["SyncShippingAddress"];
            this.Deactivated = data["Deactivated"];
            this.WorkCompensationMultiplierId = data["WorkCompensationMultiplierId"];
            this.WorkCompensationMultiplierValue = data["WorkCompensationMultiplierValue"];
            this.VacationPayMultiplier = data["VacationPayMultiplier"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.ImageUrl = data["ImageUrl"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.ShippingCountry = data["ShippingCountry"];
            this.BusinessSocialSecurityNo = data["BusinessSocialSecurityNo"];
            this.BusinessName = data["BusinessName"];
            this.BusinessStreetName = data["BusinessStreetName"];
            this.BusinessPostNo = data["BusinessPostNo"];
            this.BusinessCity = data["BusinessCity"];
            this.BranchOffice = data["BranchOffice"];
            this.Department = data["Department"];
            this.CellPhone = data["CellPhone"];
            this.Email = data["Email"];
            this.ExtraEmail = data["ExtraEmail"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.WayOfDeliveryId = data["WayOfDeliveryId"];
            this.OurReference = data["OurReference"];
            this.YourReference = data["YourReference"];
            this.TermsOfPaymentQtyDaysId = data["TermsOfPaymentQtyDaysId"];
            this.Phone = data["Phone"];
            this.Doorcode = data["Doorcode"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.Reference = data["Reference"];
            this.ShippingReference = data["ShippingReference"];
            this.OurPersonId = data["OurPersonId"];
            this.ShippingLongitude = data["ShippingLongitude"];
            this.ShippingLatitude = data["ShippingLatitude"];
            this.ExternalSubscriptionId = data["ExternalSubscriptionId"];
            this.ExternalAddressSelector = data["ExternalAddressSelector"];
            this.ExternalFortnoxCustomerNo = data["ExternalFortnoxCustomerNo"];
            this.ReferredByPersonId = data["ReferredByPersonId"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.ResponsibleName = data["ResponsibleName"];
            this.QtyRelatedDocuments = data["QtyRelatedDocuments"];
            this.PendingDelete = data["PendingDelete"];
            this.Comment = data["Comment"];
            this.ShippingComment = data["ShippingComment"];
        }
    }

    static fromJS(data: any): PersonDetails {
        let result = new PersonDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.ContactFilters && this.ContactFilters.constructor === Array) {
            data["ContactFilters"] = [];
            for (let item of this.ContactFilters)
                data["ContactFilters"].push(item.toJSON());
        }
        if (this.ContactPersons && this.ContactPersons.constructor === Array) {
            data["ContactPersons"] = [];
            for (let item of this.ContactPersons)
                data["ContactPersons"].push(item.toJSON());
        }
        if (this.CustomFields && this.CustomFields.constructor === Array) {
            data["CustomFields"] = [];
            for (let item of this.CustomFields)
                data["CustomFields"].push(item.toJSON());
        }
        data["PersonId"] = this.PersonId;
        data["RoleName"] = this.RoleName;
        data["SellingPrice"] = this.SellingPrice;
        data["DefaultCompensation"] = this.DefaultCompensation;
        data["DefaultCompensationUom"] = this.DefaultCompensationUom;
        data["CountyCouncilName"] = this.CountyCouncilName;
        if (this.PreferedCountyCouncilNames && this.PreferedCountyCouncilNames.constructor === Array) {
            data["PreferedCountyCouncilNames"] = [];
            for (let item of this.PreferedCountyCouncilNames)
                data["PreferedCountyCouncilNames"].push(item);
        }
        data["DefaultVatSetting"] = this.DefaultVatSetting;
        data["ItemType"] = this.ItemType;
        data["AvailableWeeksAsJson"] = this.AvailableWeeksAsJson;
        data["KnowledgeOfMedicalRecord"] = this.KnowledgeOfMedicalRecord;
        data["IsNew"] = this.IsNew;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["QualityResult"] = this.QualityResult;
        data["LastContactDate"] = this.LastContactDate ? this.LastContactDate.toISOString() : <any>undefined;
        data["AreaOfExpertise"] = this.AreaOfExpertise;
        if (this.AllAreaOfExpertises && this.AllAreaOfExpertises.constructor === Array) {
            data["AllAreaOfExpertises"] = [];
            for (let item of this.AllAreaOfExpertises)
                data["AllAreaOfExpertises"].push(item);
        }
        data["BornDate"] = this.BornDate ? this.BornDate.toISOString() : <any>undefined;
        data["SystemRoleName"] = this.SystemRoleName;
        data["RoleAccess"] = this.RoleAccess;
        data["AccountId"] = this.AccountId;
        data["ForSystemRole"] = this.ForSystemRole;
        if (this.AvailableForWorkInCountries && this.AvailableForWorkInCountries.constructor === Array) {
            data["AvailableForWorkInCountries"] = [];
            for (let item of this.AvailableForWorkInCountries)
                data["AvailableForWorkInCountries"].push(item);
        }
        data["BelongToId"] = this.BelongToId;
        data["SocialSecurityNo2"] = this.SocialSecurityNo2;
        data["OrderCountry"] = this.OrderCountry;
        data["CostCenter"] = this.CostCenter;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["Fax"] = this.Fax;
        data["Web"] = this.Web;
        data["TaxPercentage"] = this.TaxPercentage;
        data["TaxTable"] = this.TaxTable;
        data["Bank"] = this.Bank;
        data["ClearingNumber"] = this.ClearingNumber;
        data["BankAccountNumber"] = this.BankAccountNumber;
        data["EmployeeNumber"] = this.EmployeeNumber;
        data["BankGiro"] = this.BankGiro;
        data["PlusGiro"] = this.PlusGiro;
        data["VatNr"] = this.VatNr;
        data["SNICode"] = this.SNICode;
        data["IBANBankGiro"] = this.IBANBankGiro;
        data["BICPlusGiro"] = this.BICPlusGiro;
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        data["SyncShippingAddress"] = this.SyncShippingAddress;
        data["Deactivated"] = this.Deactivated;
        data["WorkCompensationMultiplierId"] = this.WorkCompensationMultiplierId;
        data["WorkCompensationMultiplierValue"] = this.WorkCompensationMultiplierValue;
        data["VacationPayMultiplier"] = this.VacationPayMultiplier;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["ImageUrl"] = this.ImageUrl;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["ShippingCountry"] = this.ShippingCountry;
        data["BusinessSocialSecurityNo"] = this.BusinessSocialSecurityNo;
        data["BusinessName"] = this.BusinessName;
        data["BusinessStreetName"] = this.BusinessStreetName;
        data["BusinessPostNo"] = this.BusinessPostNo;
        data["BusinessCity"] = this.BusinessCity;
        data["BranchOffice"] = this.BranchOffice;
        data["Department"] = this.Department;
        data["CellPhone"] = this.CellPhone;
        data["Email"] = this.Email;
        data["ExtraEmail"] = this.ExtraEmail;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["WayOfDeliveryId"] = this.WayOfDeliveryId;
        data["OurReference"] = this.OurReference;
        data["YourReference"] = this.YourReference;
        data["TermsOfPaymentQtyDaysId"] = this.TermsOfPaymentQtyDaysId;
        data["Phone"] = this.Phone;
        data["Doorcode"] = this.Doorcode;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["Reference"] = this.Reference;
        data["ShippingReference"] = this.ShippingReference;
        data["OurPersonId"] = this.OurPersonId;
        data["ShippingLongitude"] = this.ShippingLongitude;
        data["ShippingLatitude"] = this.ShippingLatitude;
        data["ExternalSubscriptionId"] = this.ExternalSubscriptionId;
        data["ExternalAddressSelector"] = this.ExternalAddressSelector;
        data["ExternalFortnoxCustomerNo"] = this.ExternalFortnoxCustomerNo;
        data["ReferredByPersonId"] = this.ReferredByPersonId;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["ResponsibleName"] = this.ResponsibleName;
        data["QtyRelatedDocuments"] = this.QtyRelatedDocuments;
        data["PendingDelete"] = this.PendingDelete;
        data["Comment"] = this.Comment;
        data["ShippingComment"] = this.ShippingComment;
        return data;
    }
}

export interface IPersonDetails {
    ContactFilters?: ContactFilter[];
    ContactPersons?: ContactPerson[];
    CustomFields?: CustomPersonField[];
    PersonId?: number;
    RoleName?: string;
    SellingPrice?: number;
    DefaultCompensation?: number;
    DefaultCompensationUom?: string;
    CountyCouncilName?: string;
    PreferedCountyCouncilNames?: string[];
    DefaultVatSetting?: number;
    ItemType?: string;
    AvailableWeeksAsJson?: string;
    KnowledgeOfMedicalRecord?: string;
    IsNew?: boolean;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    QualityResult?: number;
    LastContactDate?: Date;
    AreaOfExpertise?: string;
    AllAreaOfExpertises?: string[];
    BornDate?: Date;
    SystemRoleName?: string;
    RoleAccess?: string;
    AccountId?: number;
    ForSystemRole?: string;
    AvailableForWorkInCountries?: string[];
    BelongToId?: string;
    SocialSecurityNo2?: string;
    OrderCountry?: string;
    CostCenter?: string;
    Name?: string;
    ShippingName?: string;
    Fax?: string;
    Web?: string;
    TaxPercentage?: number;
    TaxTable?: string;
    Bank?: string;
    ClearingNumber?: string;
    BankAccountNumber?: string;
    EmployeeNumber?: string;
    BankGiro?: string;
    PlusGiro?: string;
    VatNr?: string;
    SNICode?: string;
    IBANBankGiro?: string;
    BICPlusGiro?: string;
    Title?: string;
    Description?: string;
    SyncShippingAddress?: boolean;
    Deactivated?: boolean;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SocialSecurityNo?: string;
    ImageUrl?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    BusinessSocialSecurityNo?: string;
    BusinessName?: string;
    BusinessStreetName?: string;
    BusinessPostNo?: string;
    BusinessCity?: string;
    BranchOffice?: string;
    Department?: string;
    CellPhone?: string;
    Email?: string;
    ExtraEmail?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    TermsOfPaymentQtyDaysId?: number;
    Phone?: string;
    Doorcode?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Reference?: string;
    ShippingReference?: string;
    OurPersonId?: number;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    ExternalSubscriptionId?: string;
    ExternalAddressSelector?: string;
    ExternalFortnoxCustomerNo?: string;
    ReferredByPersonId?: number;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    QtyRelatedDocuments?: number;
    PendingDelete?: boolean;
    Comment?: string;
    ShippingComment?: string;
}

export class ContactFilter implements IContactFilter {
    ContactFilterId?: number;
    Name?: string;
    ItemType?: string;

    constructor(data?: IContactFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ContactFilterId = data["ContactFilterId"];
            this.Name = data["Name"];
            this.ItemType = data["ItemType"];
        }
    }

    static fromJS(data: any): ContactFilter {
        let result = new ContactFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContactFilterId"] = this.ContactFilterId;
        data["Name"] = this.Name;
        data["ItemType"] = this.ItemType;
        return data;
    }
}

export interface IContactFilter {
    ContactFilterId?: number;
    Name?: string;
    ItemType?: string;
}

export class ContactPerson implements IContactPerson {
    ContactPersonId?: number;
    FirstName?: string;
    LastName?: string;
    CellPhone?: string;
    Phone?: string;
    Email?: string;
    Title?: string;
    Description?: string;
    LocationAddressId?: string;
    LocationBranchOffice?: string;
    LocationDepartment?: string;
    PersonId?: number;
    PersonName?: string;
    PersonItemType?: string;

    constructor(data?: IContactPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ContactPersonId = data["ContactPersonId"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.CellPhone = data["CellPhone"];
            this.Phone = data["Phone"];
            this.Email = data["Email"];
            this.Title = data["Title"];
            this.Description = data["Description"];
            this.LocationAddressId = data["LocationAddressId"];
            this.LocationBranchOffice = data["LocationBranchOffice"];
            this.LocationDepartment = data["LocationDepartment"];
            this.PersonId = data["PersonId"];
            this.PersonName = data["PersonName"];
            this.PersonItemType = data["PersonItemType"];
        }
    }

    static fromJS(data: any): ContactPerson {
        let result = new ContactPerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContactPersonId"] = this.ContactPersonId;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["CellPhone"] = this.CellPhone;
        data["Phone"] = this.Phone;
        data["Email"] = this.Email;
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        data["LocationAddressId"] = this.LocationAddressId;
        data["LocationBranchOffice"] = this.LocationBranchOffice;
        data["LocationDepartment"] = this.LocationDepartment;
        data["PersonId"] = this.PersonId;
        data["PersonName"] = this.PersonName;
        data["PersonItemType"] = this.PersonItemType;
        return data;
    }
}

export interface IContactPerson {
    ContactPersonId?: number;
    FirstName?: string;
    LastName?: string;
    CellPhone?: string;
    Phone?: string;
    Email?: string;
    Title?: string;
    Description?: string;
    LocationAddressId?: string;
    LocationBranchOffice?: string;
    LocationDepartment?: string;
    PersonId?: number;
    PersonName?: string;
    PersonItemType?: string;
}

export class CustomPersonField implements ICustomPersonField {
    CustomPersonFieldId?: number;
    PersonId?: number;
    Value?: string;
    CustomFieldId?: number;
    CustomField?: CustomField;
    Context?: Context;

    constructor(data?: ICustomPersonField) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CustomPersonFieldId = data["CustomPersonFieldId"];
            this.PersonId = data["PersonId"];
            this.Value = data["Value"];
            this.CustomFieldId = data["CustomFieldId"];
            this.CustomField = data["CustomField"] ? CustomField.fromJS(data["CustomField"]) : <any>undefined;
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CustomPersonField {
        let result = new CustomPersonField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CustomPersonFieldId"] = this.CustomPersonFieldId;
        data["PersonId"] = this.PersonId;
        data["Value"] = this.Value;
        data["CustomFieldId"] = this.CustomFieldId;
        data["CustomField"] = this.CustomField ? this.CustomField.toJSON() : <any>undefined;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICustomPersonField {
    CustomPersonFieldId?: number;
    PersonId?: number;
    Value?: string;
    CustomFieldId?: number;
    CustomField?: CustomField;
    Context?: Context;
}

export class CustomField implements ICustomField {
    CustomFieldId?: number;
    Name?: string;
    InputType?: string;
    Required?: boolean;
    Order?: number;
    ItemType?: string;
    CountryId?: string;
    Active?: boolean;
    CustomGroupId?: number;
    CustomGroup?: CustomGroup;
    Context?: Context;

    constructor(data?: ICustomField) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CustomFieldId = data["CustomFieldId"];
            this.Name = data["Name"];
            this.InputType = data["InputType"];
            this.Required = data["Required"];
            this.Order = data["Order"];
            this.ItemType = data["ItemType"];
            this.CountryId = data["CountryId"];
            this.Active = data["Active"];
            this.CustomGroupId = data["CustomGroupId"];
            this.CustomGroup = data["CustomGroup"] ? CustomGroup.fromJS(data["CustomGroup"]) : <any>undefined;
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CustomField {
        let result = new CustomField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CustomFieldId"] = this.CustomFieldId;
        data["Name"] = this.Name;
        data["InputType"] = this.InputType;
        data["Required"] = this.Required;
        data["Order"] = this.Order;
        data["ItemType"] = this.ItemType;
        data["CountryId"] = this.CountryId;
        data["Active"] = this.Active;
        data["CustomGroupId"] = this.CustomGroupId;
        data["CustomGroup"] = this.CustomGroup ? this.CustomGroup.toJSON() : <any>undefined;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICustomField {
    CustomFieldId?: number;
    Name?: string;
    InputType?: string;
    Required?: boolean;
    Order?: number;
    ItemType?: string;
    CountryId?: string;
    Active?: boolean;
    CustomGroupId?: number;
    CustomGroup?: CustomGroup;
    Context?: Context;
}

export class CustomGroup implements ICustomGroup {
    CustomGroupId?: number;
    Name?: string;
    Description?: string;
    ItemType?: string;
    Context?: Context;

    constructor(data?: ICustomGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CustomGroupId = data["CustomGroupId"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.ItemType = data["ItemType"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CustomGroup {
        let result = new CustomGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CustomGroupId"] = this.CustomGroupId;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["ItemType"] = this.ItemType;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICustomGroup {
    CustomGroupId?: number;
    Name?: string;
    Description?: string;
    ItemType?: string;
    Context?: Context;
}

export class MessageGroup implements IMessageGroup {
    id?: string;
    Subject?: string;
    Participants?: MessageGroupPerson[];
    LastMessage?: Message;
    Tag?: string;
    QtyUnSeenMessages?: number;

    constructor(data?: IMessageGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Subject = data["Subject"];
            if (data["Participants"] && data["Participants"].constructor === Array) {
                this.Participants = [];
                for (let item of data["Participants"])
                    this.Participants.push(MessageGroupPerson.fromJS(item));
            }
            this.LastMessage = data["LastMessage"] ? Message.fromJS(data["LastMessage"]) : <any>undefined;
            this.Tag = data["Tag"];
            this.QtyUnSeenMessages = data["QtyUnSeenMessages"];
        }
    }

    static fromJS(data: any): MessageGroup {
        let result = new MessageGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Subject"] = this.Subject;
        if (this.Participants && this.Participants.constructor === Array) {
            data["Participants"] = [];
            for (let item of this.Participants)
                data["Participants"].push(item.toJSON());
        }
        data["LastMessage"] = this.LastMessage ? this.LastMessage.toJSON() : <any>undefined;
        data["Tag"] = this.Tag;
        data["QtyUnSeenMessages"] = this.QtyUnSeenMessages;
        return data;
    }
}

export interface IMessageGroup {
    id?: string;
    Subject?: string;
    Participants?: MessageGroupPerson[];
    LastMessage?: Message;
    Tag?: string;
    QtyUnSeenMessages?: number;
}

export class MessageGroupPerson implements IMessageGroupPerson {
    PersonId?: string;
    PhoneNo?: string;
    Name?: string;
    JoinDate?: DateEpoch;
    IsAdmin?: boolean;

    constructor(data?: IMessageGroupPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PersonId = data["PersonId"];
            this.PhoneNo = data["PhoneNo"];
            this.Name = data["Name"];
            this.JoinDate = data["JoinDate"] ? DateEpoch.fromJS(data["JoinDate"]) : <any>undefined;
            this.IsAdmin = data["IsAdmin"];
        }
    }

    static fromJS(data: any): MessageGroupPerson {
        let result = new MessageGroupPerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PersonId"] = this.PersonId;
        data["PhoneNo"] = this.PhoneNo;
        data["Name"] = this.Name;
        data["JoinDate"] = this.JoinDate ? this.JoinDate.toJSON() : <any>undefined;
        data["IsAdmin"] = this.IsAdmin;
        return data;
    }
}

export interface IMessageGroupPerson {
    PersonId?: string;
    PhoneNo?: string;
    Name?: string;
    JoinDate?: DateEpoch;
    IsAdmin?: boolean;
}

export class Message implements IMessage {
    id?: string;
    From?: MessageGroupPerson;
    Date?: DateEpoch;
    StrMessage?: string;
    SeenBy?: MessageGroupPerson[];
    FileUrls?: string[];
    MessageGroupId?: string;

    constructor(data?: IMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.From = data["From"] ? MessageGroupPerson.fromJS(data["From"]) : <any>undefined;
            this.Date = data["Date"] ? DateEpoch.fromJS(data["Date"]) : <any>undefined;
            this.StrMessage = data["StrMessage"];
            if (data["SeenBy"] && data["SeenBy"].constructor === Array) {
                this.SeenBy = [];
                for (let item of data["SeenBy"])
                    this.SeenBy.push(MessageGroupPerson.fromJS(item));
            }
            if (data["FileUrls"] && data["FileUrls"].constructor === Array) {
                this.FileUrls = [];
                for (let item of data["FileUrls"])
                    this.FileUrls.push(item);
            }
            this.MessageGroupId = data["MessageGroupId"];
        }
    }

    static fromJS(data: any): Message {
        let result = new Message();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["From"] = this.From ? this.From.toJSON() : <any>undefined;
        data["Date"] = this.Date ? this.Date.toJSON() : <any>undefined;
        data["StrMessage"] = this.StrMessage;
        if (this.SeenBy && this.SeenBy.constructor === Array) {
            data["SeenBy"] = [];
            for (let item of this.SeenBy)
                data["SeenBy"].push(item.toJSON());
        }
        if (this.FileUrls && this.FileUrls.constructor === Array) {
            data["FileUrls"] = [];
            for (let item of this.FileUrls)
                data["FileUrls"].push(item);
        }
        data["MessageGroupId"] = this.MessageGroupId;
        return data;
    }
}

export interface IMessage {
    id?: string;
    From?: MessageGroupPerson;
    Date?: DateEpoch;
    StrMessage?: string;
    SeenBy?: MessageGroupPerson[];
    FileUrls?: string[];
    MessageGroupId?: string;
}

export class PagedResultsOfMessage implements IPagedResultsOfMessage {
    ContinuationToken?: string;
    Results?: Message[];

    constructor(data?: IPagedResultsOfMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ContinuationToken = data["ContinuationToken"];
            if (data["Results"] && data["Results"].constructor === Array) {
                this.Results = [];
                for (let item of data["Results"])
                    this.Results.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultsOfMessage {
        let result = new PagedResultsOfMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContinuationToken"] = this.ContinuationToken;
        if (this.Results && this.Results.constructor === Array) {
            data["Results"] = [];
            for (let item of this.Results)
                data["Results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedResultsOfMessage {
    ContinuationToken?: string;
    Results?: Message[];
}

export class CountyCouncil implements ICountyCouncil {
    CountyCouncilId?: number;
    Name?: string;
    CountryId?: string;

    constructor(data?: ICountyCouncil) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CountyCouncilId = data["CountyCouncilId"];
            this.Name = data["Name"];
            this.CountryId = data["CountryId"];
        }
    }

    static fromJS(data: any): CountyCouncil {
        let result = new CountyCouncil();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CountyCouncilId"] = this.CountyCouncilId;
        data["Name"] = this.Name;
        data["CountryId"] = this.CountryId;
        return data;
    }
}

export interface ICountyCouncil {
    CountyCouncilId?: number;
    Name?: string;
    CountryId?: string;
}

export class ListOrder implements IListOrder {
    OrderDate?: Date;
    IsFirstOrderInSubscription?: boolean;
    ReferredByPersonId?: number;
    ExternalAddressSelector?: string;
    ExternalOrderId?: string;
    ExternalSubscriptionId?: string;
    ExternalTransactionId?: string;
    Reference?: string;
    ShippingReference?: string;
    OurOrderId?: number;
    TermsOfPaymentQtyDaysId?: number;
    YourOrderId?: string;
    InvoiceCost?: number;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    ProjectId?: number;
    OrderCountry?: string;
    ShippingCountry?: string;
    InvoiceCostInclVat?: number;
    Freight?: number;
    FreightVat?: number;
    FreightInclVat?: number;
    PrintTemplateId?: number;
    IsDeleted?: boolean;
    UpdatedDate?: Date;
    CreatedDate?: Date;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    OrderId?: number;
    Comment?: string;
    PersonId?: number;
    OrderStatusId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    Doorcode?: string;
    CellPhone?: string;
    Email?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    DeliveryDate?: Date;
    Phone?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    SubscriptionId?: number;
    IsCanceledDate?: Date;
    IsDeliveredDate?: Date;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    SearchText?: string;
    BuyOrderId?: string;
    ShippingComment?: string;
    ReceiptOrInvoiceCreated?: boolean;
    IsSubscriptionOrder?: boolean;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    PartDeliveryNo?: number;
    DeliverySerieId?: string;
    Context?: Context;

    constructor(data?: IListOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OrderDate = data["OrderDate"] ? new Date(data["OrderDate"].toString()) : <any>undefined;
            this.IsFirstOrderInSubscription = data["IsFirstOrderInSubscription"];
            this.ReferredByPersonId = data["ReferredByPersonId"];
            this.ExternalAddressSelector = data["ExternalAddressSelector"];
            this.ExternalOrderId = data["ExternalOrderId"];
            this.ExternalSubscriptionId = data["ExternalSubscriptionId"];
            this.ExternalTransactionId = data["ExternalTransactionId"];
            this.Reference = data["Reference"];
            this.ShippingReference = data["ShippingReference"];
            this.OurOrderId = data["OurOrderId"];
            this.TermsOfPaymentQtyDaysId = data["TermsOfPaymentQtyDaysId"];
            this.YourOrderId = data["YourOrderId"];
            this.InvoiceCost = data["InvoiceCost"];
            this.WayOfDeliveryId = data["WayOfDeliveryId"];
            this.OurReference = data["OurReference"];
            this.YourReference = data["YourReference"];
            this.ProjectId = data["ProjectId"];
            this.OrderCountry = data["OrderCountry"];
            this.ShippingCountry = data["ShippingCountry"];
            this.InvoiceCostInclVat = data["InvoiceCostInclVat"];
            this.Freight = data["Freight"];
            this.FreightVat = data["FreightVat"];
            this.FreightInclVat = data["FreightInclVat"];
            this.PrintTemplateId = data["PrintTemplateId"];
            this.IsDeleted = data["IsDeleted"];
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.Discount = data["Discount"];
            this.DiscountVat = data["DiscountVat"];
            this.DiscountInclVat = data["DiscountInclVat"];
            this.DiscountDescription = data["DiscountDescription"];
            this.OrderId = data["OrderId"];
            this.Comment = data["Comment"];
            this.PersonId = data["PersonId"];
            this.OrderStatusId = data["OrderStatusId"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.Doorcode = data["Doorcode"];
            this.CellPhone = data["CellPhone"];
            this.Email = data["Email"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.DeliveryDate = data["DeliveryDate"] ? new Date(data["DeliveryDate"].toString()) : <any>undefined;
            this.Phone = data["Phone"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.ShippingLongitude = data["ShippingLongitude"];
            this.ShippingLatitude = data["ShippingLatitude"];
            this.SubscriptionId = data["SubscriptionId"];
            this.IsCanceledDate = data["IsCanceledDate"] ? new Date(data["IsCanceledDate"].toString()) : <any>undefined;
            this.IsDeliveredDate = data["IsDeliveredDate"] ? new Date(data["IsDeliveredDate"].toString()) : <any>undefined;
            this.ShippingTag = data["ShippingTag"];
            this.OrderForShippingTag = data["OrderForShippingTag"];
            this.SearchText = data["SearchText"];
            this.BuyOrderId = data["BuyOrderId"];
            this.ShippingComment = data["ShippingComment"];
            this.ReceiptOrInvoiceCreated = data["ReceiptOrInvoiceCreated"];
            this.IsSubscriptionOrder = data["IsSubscriptionOrder"];
            this.OrderValueExclVat = data["OrderValueExclVat"];
            this.OrderValueInclVat = data["OrderValueInclVat"];
            this.OrderVat = data["OrderVat"];
            this.TotalValueExclVat = data["TotalValueExclVat"];
            this.TotalValueInclVat = data["TotalValueInclVat"];
            this.PartDeliveryNo = data["PartDeliveryNo"];
            this.DeliverySerieId = data["DeliverySerieId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ListOrder {
        let result = new ListOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderDate"] = this.OrderDate ? this.OrderDate.toISOString() : <any>undefined;
        data["IsFirstOrderInSubscription"] = this.IsFirstOrderInSubscription;
        data["ReferredByPersonId"] = this.ReferredByPersonId;
        data["ExternalAddressSelector"] = this.ExternalAddressSelector;
        data["ExternalOrderId"] = this.ExternalOrderId;
        data["ExternalSubscriptionId"] = this.ExternalSubscriptionId;
        data["ExternalTransactionId"] = this.ExternalTransactionId;
        data["Reference"] = this.Reference;
        data["ShippingReference"] = this.ShippingReference;
        data["OurOrderId"] = this.OurOrderId;
        data["TermsOfPaymentQtyDaysId"] = this.TermsOfPaymentQtyDaysId;
        data["YourOrderId"] = this.YourOrderId;
        data["InvoiceCost"] = this.InvoiceCost;
        data["WayOfDeliveryId"] = this.WayOfDeliveryId;
        data["OurReference"] = this.OurReference;
        data["YourReference"] = this.YourReference;
        data["ProjectId"] = this.ProjectId;
        data["OrderCountry"] = this.OrderCountry;
        data["ShippingCountry"] = this.ShippingCountry;
        data["InvoiceCostInclVat"] = this.InvoiceCostInclVat;
        data["Freight"] = this.Freight;
        data["FreightVat"] = this.FreightVat;
        data["FreightInclVat"] = this.FreightInclVat;
        data["PrintTemplateId"] = this.PrintTemplateId;
        data["IsDeleted"] = this.IsDeleted;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["Discount"] = this.Discount;
        data["DiscountVat"] = this.DiscountVat;
        data["DiscountInclVat"] = this.DiscountInclVat;
        data["DiscountDescription"] = this.DiscountDescription;
        data["OrderId"] = this.OrderId;
        data["Comment"] = this.Comment;
        data["PersonId"] = this.PersonId;
        data["OrderStatusId"] = this.OrderStatusId;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["Doorcode"] = this.Doorcode;
        data["CellPhone"] = this.CellPhone;
        data["Email"] = this.Email;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["DeliveryDate"] = this.DeliveryDate ? this.DeliveryDate.toISOString() : <any>undefined;
        data["Phone"] = this.Phone;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["ShippingLongitude"] = this.ShippingLongitude;
        data["ShippingLatitude"] = this.ShippingLatitude;
        data["SubscriptionId"] = this.SubscriptionId;
        data["IsCanceledDate"] = this.IsCanceledDate ? this.IsCanceledDate.toISOString() : <any>undefined;
        data["IsDeliveredDate"] = this.IsDeliveredDate ? this.IsDeliveredDate.toISOString() : <any>undefined;
        data["ShippingTag"] = this.ShippingTag;
        data["OrderForShippingTag"] = this.OrderForShippingTag;
        data["SearchText"] = this.SearchText;
        data["BuyOrderId"] = this.BuyOrderId;
        data["ShippingComment"] = this.ShippingComment;
        data["ReceiptOrInvoiceCreated"] = this.ReceiptOrInvoiceCreated;
        data["IsSubscriptionOrder"] = this.IsSubscriptionOrder;
        data["OrderValueExclVat"] = this.OrderValueExclVat;
        data["OrderValueInclVat"] = this.OrderValueInclVat;
        data["OrderVat"] = this.OrderVat;
        data["TotalValueExclVat"] = this.TotalValueExclVat;
        data["TotalValueInclVat"] = this.TotalValueInclVat;
        data["PartDeliveryNo"] = this.PartDeliveryNo;
        data["DeliverySerieId"] = this.DeliverySerieId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IListOrder {
    OrderDate?: Date;
    IsFirstOrderInSubscription?: boolean;
    ReferredByPersonId?: number;
    ExternalAddressSelector?: string;
    ExternalOrderId?: string;
    ExternalSubscriptionId?: string;
    ExternalTransactionId?: string;
    Reference?: string;
    ShippingReference?: string;
    OurOrderId?: number;
    TermsOfPaymentQtyDaysId?: number;
    YourOrderId?: string;
    InvoiceCost?: number;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    ProjectId?: number;
    OrderCountry?: string;
    ShippingCountry?: string;
    InvoiceCostInclVat?: number;
    Freight?: number;
    FreightVat?: number;
    FreightInclVat?: number;
    PrintTemplateId?: number;
    IsDeleted?: boolean;
    UpdatedDate?: Date;
    CreatedDate?: Date;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    OrderId?: number;
    Comment?: string;
    PersonId?: number;
    OrderStatusId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    Doorcode?: string;
    CellPhone?: string;
    Email?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    DeliveryDate?: Date;
    Phone?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    SubscriptionId?: number;
    IsCanceledDate?: Date;
    IsDeliveredDate?: Date;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    SearchText?: string;
    BuyOrderId?: string;
    ShippingComment?: string;
    ReceiptOrInvoiceCreated?: boolean;
    IsSubscriptionOrder?: boolean;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    PartDeliveryNo?: number;
    DeliverySerieId?: string;
    Context?: Context;
}

export class MiniOptimizedOrder implements IMiniOptimizedOrder {
    OrderId?: number;
    Comment?: string;
    PersonId?: number;
    OrderStatusId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    Doorcode?: string;
    CellPhone?: string;
    Email?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    DeliveryDate?: Date;
    Phone?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    SubscriptionId?: number;
    IsCanceledDate?: Date;
    IsDeliveredDate?: Date;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    SearchText?: string;
    BuyOrderId?: string;
    ShippingComment?: string;
    ReceiptOrInvoiceCreated?: boolean;
    IsSubscriptionOrder?: boolean;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    PartDeliveryNo?: number;
    DeliverySerieId?: string;
    Context?: Context;

    constructor(data?: IMiniOptimizedOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OrderId = data["OrderId"];
            this.Comment = data["Comment"];
            this.PersonId = data["PersonId"];
            this.OrderStatusId = data["OrderStatusId"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.Doorcode = data["Doorcode"];
            this.CellPhone = data["CellPhone"];
            this.Email = data["Email"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.DeliveryDate = data["DeliveryDate"] ? new Date(data["DeliveryDate"].toString()) : <any>undefined;
            this.Phone = data["Phone"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.ShippingLongitude = data["ShippingLongitude"];
            this.ShippingLatitude = data["ShippingLatitude"];
            this.SubscriptionId = data["SubscriptionId"];
            this.IsCanceledDate = data["IsCanceledDate"] ? new Date(data["IsCanceledDate"].toString()) : <any>undefined;
            this.IsDeliveredDate = data["IsDeliveredDate"] ? new Date(data["IsDeliveredDate"].toString()) : <any>undefined;
            this.ShippingTag = data["ShippingTag"];
            this.OrderForShippingTag = data["OrderForShippingTag"];
            this.SearchText = data["SearchText"];
            this.BuyOrderId = data["BuyOrderId"];
            this.ShippingComment = data["ShippingComment"];
            this.ReceiptOrInvoiceCreated = data["ReceiptOrInvoiceCreated"];
            this.IsSubscriptionOrder = data["IsSubscriptionOrder"];
            this.OrderValueExclVat = data["OrderValueExclVat"];
            this.OrderValueInclVat = data["OrderValueInclVat"];
            this.OrderVat = data["OrderVat"];
            this.TotalValueExclVat = data["TotalValueExclVat"];
            this.TotalValueInclVat = data["TotalValueInclVat"];
            this.PartDeliveryNo = data["PartDeliveryNo"];
            this.DeliverySerieId = data["DeliverySerieId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MiniOptimizedOrder {
        let result = new MiniOptimizedOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderId"] = this.OrderId;
        data["Comment"] = this.Comment;
        data["PersonId"] = this.PersonId;
        data["OrderStatusId"] = this.OrderStatusId;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["Doorcode"] = this.Doorcode;
        data["CellPhone"] = this.CellPhone;
        data["Email"] = this.Email;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["DeliveryDate"] = this.DeliveryDate ? this.DeliveryDate.toISOString() : <any>undefined;
        data["Phone"] = this.Phone;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["ShippingLongitude"] = this.ShippingLongitude;
        data["ShippingLatitude"] = this.ShippingLatitude;
        data["SubscriptionId"] = this.SubscriptionId;
        data["IsCanceledDate"] = this.IsCanceledDate ? this.IsCanceledDate.toISOString() : <any>undefined;
        data["IsDeliveredDate"] = this.IsDeliveredDate ? this.IsDeliveredDate.toISOString() : <any>undefined;
        data["ShippingTag"] = this.ShippingTag;
        data["OrderForShippingTag"] = this.OrderForShippingTag;
        data["SearchText"] = this.SearchText;
        data["BuyOrderId"] = this.BuyOrderId;
        data["ShippingComment"] = this.ShippingComment;
        data["ReceiptOrInvoiceCreated"] = this.ReceiptOrInvoiceCreated;
        data["IsSubscriptionOrder"] = this.IsSubscriptionOrder;
        data["OrderValueExclVat"] = this.OrderValueExclVat;
        data["OrderValueInclVat"] = this.OrderValueInclVat;
        data["OrderVat"] = this.OrderVat;
        data["TotalValueExclVat"] = this.TotalValueExclVat;
        data["TotalValueInclVat"] = this.TotalValueInclVat;
        data["PartDeliveryNo"] = this.PartDeliveryNo;
        data["DeliverySerieId"] = this.DeliverySerieId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMiniOptimizedOrder {
    OrderId?: number;
    Comment?: string;
    PersonId?: number;
    OrderStatusId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    Doorcode?: string;
    CellPhone?: string;
    Email?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    DeliveryDate?: Date;
    Phone?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    SubscriptionId?: number;
    IsCanceledDate?: Date;
    IsDeliveredDate?: Date;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    SearchText?: string;
    BuyOrderId?: string;
    ShippingComment?: string;
    ReceiptOrInvoiceCreated?: boolean;
    IsSubscriptionOrder?: boolean;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    PartDeliveryNo?: number;
    DeliverySerieId?: string;
    Context?: Context;
}

export class OrderDetails implements IOrderDetails {
    OrderStatusOptions?: OrderStatu[];
    TermsOfPaymentOptions?: TermsOfPayment[];
    TermsOfDeliveryOptions?: TermsOfDelivery[];
    TermsOfPaymentQtyDaysOptions?: TermsOfPaymentQtyDay[];
    UomOptions?: Uom[];
    VatOptions?: Vat[];
    LegalPersonTypeOptions?: LegalPersonType[];
    CurrencyOptions?: Currency[];
    CountryOptions?: Country[];
    LanguageOptions?: Language[];
    OrderProducts?: OrderProduct[];
    OrderDate?: Date;
    IsFirstOrderInSubscription?: boolean;
    ReferredByPersonId?: number;
    ExternalAddressSelector?: string;
    ExternalOrderId?: string;
    ExternalSubscriptionId?: string;
    ExternalTransactionId?: string;
    Reference?: string;
    ShippingReference?: string;
    OurOrderId?: number;
    TermsOfPaymentQtyDaysId?: number;
    YourOrderId?: string;
    InvoiceCost?: number;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    ProjectId?: number;
    OrderCountry?: string;
    ShippingCountry?: string;
    InvoiceCostInclVat?: number;
    Freight?: number;
    FreightVat?: number;
    FreightInclVat?: number;
    PrintTemplateId?: number;
    IsDeleted?: boolean;
    UpdatedDate?: Date;
    CreatedDate?: Date;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    OrderId?: number;
    Comment?: string;
    PersonId?: number;
    OrderStatusId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    Doorcode?: string;
    CellPhone?: string;
    Email?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    DeliveryDate?: Date;
    Phone?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    SubscriptionId?: number;
    IsCanceledDate?: Date;
    IsDeliveredDate?: Date;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    SearchText?: string;
    BuyOrderId?: string;
    ShippingComment?: string;
    ReceiptOrInvoiceCreated?: boolean;
    IsSubscriptionOrder?: boolean;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    PartDeliveryNo?: number;
    DeliverySerieId?: string;
    Context?: Context;

    constructor(data?: IOrderDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["OrderStatusOptions"] && data["OrderStatusOptions"].constructor === Array) {
                this.OrderStatusOptions = [];
                for (let item of data["OrderStatusOptions"])
                    this.OrderStatusOptions.push(OrderStatu.fromJS(item));
            }
            if (data["TermsOfPaymentOptions"] && data["TermsOfPaymentOptions"].constructor === Array) {
                this.TermsOfPaymentOptions = [];
                for (let item of data["TermsOfPaymentOptions"])
                    this.TermsOfPaymentOptions.push(TermsOfPayment.fromJS(item));
            }
            if (data["TermsOfDeliveryOptions"] && data["TermsOfDeliveryOptions"].constructor === Array) {
                this.TermsOfDeliveryOptions = [];
                for (let item of data["TermsOfDeliveryOptions"])
                    this.TermsOfDeliveryOptions.push(TermsOfDelivery.fromJS(item));
            }
            if (data["TermsOfPaymentQtyDaysOptions"] && data["TermsOfPaymentQtyDaysOptions"].constructor === Array) {
                this.TermsOfPaymentQtyDaysOptions = [];
                for (let item of data["TermsOfPaymentQtyDaysOptions"])
                    this.TermsOfPaymentQtyDaysOptions.push(TermsOfPaymentQtyDay.fromJS(item));
            }
            if (data["UomOptions"] && data["UomOptions"].constructor === Array) {
                this.UomOptions = [];
                for (let item of data["UomOptions"])
                    this.UomOptions.push(Uom.fromJS(item));
            }
            if (data["VatOptions"] && data["VatOptions"].constructor === Array) {
                this.VatOptions = [];
                for (let item of data["VatOptions"])
                    this.VatOptions.push(Vat.fromJS(item));
            }
            if (data["LegalPersonTypeOptions"] && data["LegalPersonTypeOptions"].constructor === Array) {
                this.LegalPersonTypeOptions = [];
                for (let item of data["LegalPersonTypeOptions"])
                    this.LegalPersonTypeOptions.push(LegalPersonType.fromJS(item));
            }
            if (data["CurrencyOptions"] && data["CurrencyOptions"].constructor === Array) {
                this.CurrencyOptions = [];
                for (let item of data["CurrencyOptions"])
                    this.CurrencyOptions.push(Currency.fromJS(item));
            }
            if (data["CountryOptions"] && data["CountryOptions"].constructor === Array) {
                this.CountryOptions = [];
                for (let item of data["CountryOptions"])
                    this.CountryOptions.push(Country.fromJS(item));
            }
            if (data["LanguageOptions"] && data["LanguageOptions"].constructor === Array) {
                this.LanguageOptions = [];
                for (let item of data["LanguageOptions"])
                    this.LanguageOptions.push(Language.fromJS(item));
            }
            if (data["OrderProducts"] && data["OrderProducts"].constructor === Array) {
                this.OrderProducts = [];
                for (let item of data["OrderProducts"])
                    this.OrderProducts.push(OrderProduct.fromJS(item));
            }
            this.OrderDate = data["OrderDate"] ? new Date(data["OrderDate"].toString()) : <any>undefined;
            this.IsFirstOrderInSubscription = data["IsFirstOrderInSubscription"];
            this.ReferredByPersonId = data["ReferredByPersonId"];
            this.ExternalAddressSelector = data["ExternalAddressSelector"];
            this.ExternalOrderId = data["ExternalOrderId"];
            this.ExternalSubscriptionId = data["ExternalSubscriptionId"];
            this.ExternalTransactionId = data["ExternalTransactionId"];
            this.Reference = data["Reference"];
            this.ShippingReference = data["ShippingReference"];
            this.OurOrderId = data["OurOrderId"];
            this.TermsOfPaymentQtyDaysId = data["TermsOfPaymentQtyDaysId"];
            this.YourOrderId = data["YourOrderId"];
            this.InvoiceCost = data["InvoiceCost"];
            this.WayOfDeliveryId = data["WayOfDeliveryId"];
            this.OurReference = data["OurReference"];
            this.YourReference = data["YourReference"];
            this.ProjectId = data["ProjectId"];
            this.OrderCountry = data["OrderCountry"];
            this.ShippingCountry = data["ShippingCountry"];
            this.InvoiceCostInclVat = data["InvoiceCostInclVat"];
            this.Freight = data["Freight"];
            this.FreightVat = data["FreightVat"];
            this.FreightInclVat = data["FreightInclVat"];
            this.PrintTemplateId = data["PrintTemplateId"];
            this.IsDeleted = data["IsDeleted"];
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.Discount = data["Discount"];
            this.DiscountVat = data["DiscountVat"];
            this.DiscountInclVat = data["DiscountInclVat"];
            this.DiscountDescription = data["DiscountDescription"];
            this.OrderId = data["OrderId"];
            this.Comment = data["Comment"];
            this.PersonId = data["PersonId"];
            this.OrderStatusId = data["OrderStatusId"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.Doorcode = data["Doorcode"];
            this.CellPhone = data["CellPhone"];
            this.Email = data["Email"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.DeliveryDate = data["DeliveryDate"] ? new Date(data["DeliveryDate"].toString()) : <any>undefined;
            this.Phone = data["Phone"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.ShippingLongitude = data["ShippingLongitude"];
            this.ShippingLatitude = data["ShippingLatitude"];
            this.SubscriptionId = data["SubscriptionId"];
            this.IsCanceledDate = data["IsCanceledDate"] ? new Date(data["IsCanceledDate"].toString()) : <any>undefined;
            this.IsDeliveredDate = data["IsDeliveredDate"] ? new Date(data["IsDeliveredDate"].toString()) : <any>undefined;
            this.ShippingTag = data["ShippingTag"];
            this.OrderForShippingTag = data["OrderForShippingTag"];
            this.SearchText = data["SearchText"];
            this.BuyOrderId = data["BuyOrderId"];
            this.ShippingComment = data["ShippingComment"];
            this.ReceiptOrInvoiceCreated = data["ReceiptOrInvoiceCreated"];
            this.IsSubscriptionOrder = data["IsSubscriptionOrder"];
            this.OrderValueExclVat = data["OrderValueExclVat"];
            this.OrderValueInclVat = data["OrderValueInclVat"];
            this.OrderVat = data["OrderVat"];
            this.TotalValueExclVat = data["TotalValueExclVat"];
            this.TotalValueInclVat = data["TotalValueInclVat"];
            this.PartDeliveryNo = data["PartDeliveryNo"];
            this.DeliverySerieId = data["DeliverySerieId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderDetails {
        let result = new OrderDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.OrderStatusOptions && this.OrderStatusOptions.constructor === Array) {
            data["OrderStatusOptions"] = [];
            for (let item of this.OrderStatusOptions)
                data["OrderStatusOptions"].push(item.toJSON());
        }
        if (this.TermsOfPaymentOptions && this.TermsOfPaymentOptions.constructor === Array) {
            data["TermsOfPaymentOptions"] = [];
            for (let item of this.TermsOfPaymentOptions)
                data["TermsOfPaymentOptions"].push(item.toJSON());
        }
        if (this.TermsOfDeliveryOptions && this.TermsOfDeliveryOptions.constructor === Array) {
            data["TermsOfDeliveryOptions"] = [];
            for (let item of this.TermsOfDeliveryOptions)
                data["TermsOfDeliveryOptions"].push(item.toJSON());
        }
        if (this.TermsOfPaymentQtyDaysOptions && this.TermsOfPaymentQtyDaysOptions.constructor === Array) {
            data["TermsOfPaymentQtyDaysOptions"] = [];
            for (let item of this.TermsOfPaymentQtyDaysOptions)
                data["TermsOfPaymentQtyDaysOptions"].push(item.toJSON());
        }
        if (this.UomOptions && this.UomOptions.constructor === Array) {
            data["UomOptions"] = [];
            for (let item of this.UomOptions)
                data["UomOptions"].push(item.toJSON());
        }
        if (this.VatOptions && this.VatOptions.constructor === Array) {
            data["VatOptions"] = [];
            for (let item of this.VatOptions)
                data["VatOptions"].push(item.toJSON());
        }
        if (this.LegalPersonTypeOptions && this.LegalPersonTypeOptions.constructor === Array) {
            data["LegalPersonTypeOptions"] = [];
            for (let item of this.LegalPersonTypeOptions)
                data["LegalPersonTypeOptions"].push(item.toJSON());
        }
        if (this.CurrencyOptions && this.CurrencyOptions.constructor === Array) {
            data["CurrencyOptions"] = [];
            for (let item of this.CurrencyOptions)
                data["CurrencyOptions"].push(item.toJSON());
        }
        if (this.CountryOptions && this.CountryOptions.constructor === Array) {
            data["CountryOptions"] = [];
            for (let item of this.CountryOptions)
                data["CountryOptions"].push(item.toJSON());
        }
        if (this.LanguageOptions && this.LanguageOptions.constructor === Array) {
            data["LanguageOptions"] = [];
            for (let item of this.LanguageOptions)
                data["LanguageOptions"].push(item.toJSON());
        }
        if (this.OrderProducts && this.OrderProducts.constructor === Array) {
            data["OrderProducts"] = [];
            for (let item of this.OrderProducts)
                data["OrderProducts"].push(item.toJSON());
        }
        data["OrderDate"] = this.OrderDate ? this.OrderDate.toISOString() : <any>undefined;
        data["IsFirstOrderInSubscription"] = this.IsFirstOrderInSubscription;
        data["ReferredByPersonId"] = this.ReferredByPersonId;
        data["ExternalAddressSelector"] = this.ExternalAddressSelector;
        data["ExternalOrderId"] = this.ExternalOrderId;
        data["ExternalSubscriptionId"] = this.ExternalSubscriptionId;
        data["ExternalTransactionId"] = this.ExternalTransactionId;
        data["Reference"] = this.Reference;
        data["ShippingReference"] = this.ShippingReference;
        data["OurOrderId"] = this.OurOrderId;
        data["TermsOfPaymentQtyDaysId"] = this.TermsOfPaymentQtyDaysId;
        data["YourOrderId"] = this.YourOrderId;
        data["InvoiceCost"] = this.InvoiceCost;
        data["WayOfDeliveryId"] = this.WayOfDeliveryId;
        data["OurReference"] = this.OurReference;
        data["YourReference"] = this.YourReference;
        data["ProjectId"] = this.ProjectId;
        data["OrderCountry"] = this.OrderCountry;
        data["ShippingCountry"] = this.ShippingCountry;
        data["InvoiceCostInclVat"] = this.InvoiceCostInclVat;
        data["Freight"] = this.Freight;
        data["FreightVat"] = this.FreightVat;
        data["FreightInclVat"] = this.FreightInclVat;
        data["PrintTemplateId"] = this.PrintTemplateId;
        data["IsDeleted"] = this.IsDeleted;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["Discount"] = this.Discount;
        data["DiscountVat"] = this.DiscountVat;
        data["DiscountInclVat"] = this.DiscountInclVat;
        data["DiscountDescription"] = this.DiscountDescription;
        data["OrderId"] = this.OrderId;
        data["Comment"] = this.Comment;
        data["PersonId"] = this.PersonId;
        data["OrderStatusId"] = this.OrderStatusId;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["Doorcode"] = this.Doorcode;
        data["CellPhone"] = this.CellPhone;
        data["Email"] = this.Email;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["DeliveryDate"] = this.DeliveryDate ? this.DeliveryDate.toISOString() : <any>undefined;
        data["Phone"] = this.Phone;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["ShippingLongitude"] = this.ShippingLongitude;
        data["ShippingLatitude"] = this.ShippingLatitude;
        data["SubscriptionId"] = this.SubscriptionId;
        data["IsCanceledDate"] = this.IsCanceledDate ? this.IsCanceledDate.toISOString() : <any>undefined;
        data["IsDeliveredDate"] = this.IsDeliveredDate ? this.IsDeliveredDate.toISOString() : <any>undefined;
        data["ShippingTag"] = this.ShippingTag;
        data["OrderForShippingTag"] = this.OrderForShippingTag;
        data["SearchText"] = this.SearchText;
        data["BuyOrderId"] = this.BuyOrderId;
        data["ShippingComment"] = this.ShippingComment;
        data["ReceiptOrInvoiceCreated"] = this.ReceiptOrInvoiceCreated;
        data["IsSubscriptionOrder"] = this.IsSubscriptionOrder;
        data["OrderValueExclVat"] = this.OrderValueExclVat;
        data["OrderValueInclVat"] = this.OrderValueInclVat;
        data["OrderVat"] = this.OrderVat;
        data["TotalValueExclVat"] = this.TotalValueExclVat;
        data["TotalValueInclVat"] = this.TotalValueInclVat;
        data["PartDeliveryNo"] = this.PartDeliveryNo;
        data["DeliverySerieId"] = this.DeliverySerieId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOrderDetails {
    OrderStatusOptions?: OrderStatu[];
    TermsOfPaymentOptions?: TermsOfPayment[];
    TermsOfDeliveryOptions?: TermsOfDelivery[];
    TermsOfPaymentQtyDaysOptions?: TermsOfPaymentQtyDay[];
    UomOptions?: Uom[];
    VatOptions?: Vat[];
    LegalPersonTypeOptions?: LegalPersonType[];
    CurrencyOptions?: Currency[];
    CountryOptions?: Country[];
    LanguageOptions?: Language[];
    OrderProducts?: OrderProduct[];
    OrderDate?: Date;
    IsFirstOrderInSubscription?: boolean;
    ReferredByPersonId?: number;
    ExternalAddressSelector?: string;
    ExternalOrderId?: string;
    ExternalSubscriptionId?: string;
    ExternalTransactionId?: string;
    Reference?: string;
    ShippingReference?: string;
    OurOrderId?: number;
    TermsOfPaymentQtyDaysId?: number;
    YourOrderId?: string;
    InvoiceCost?: number;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    ProjectId?: number;
    OrderCountry?: string;
    ShippingCountry?: string;
    InvoiceCostInclVat?: number;
    Freight?: number;
    FreightVat?: number;
    FreightInclVat?: number;
    PrintTemplateId?: number;
    IsDeleted?: boolean;
    UpdatedDate?: Date;
    CreatedDate?: Date;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    OrderId?: number;
    Comment?: string;
    PersonId?: number;
    OrderStatusId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    Doorcode?: string;
    CellPhone?: string;
    Email?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    DeliveryDate?: Date;
    Phone?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    SubscriptionId?: number;
    IsCanceledDate?: Date;
    IsDeliveredDate?: Date;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    SearchText?: string;
    BuyOrderId?: string;
    ShippingComment?: string;
    ReceiptOrInvoiceCreated?: boolean;
    IsSubscriptionOrder?: boolean;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    PartDeliveryNo?: number;
    DeliverySerieId?: string;
    Context?: Context;
}

export class OrderStatu implements IOrderStatu {
    OrderStatusId?: number;
    Name?: string;

    constructor(data?: IOrderStatu) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OrderStatusId = data["OrderStatusId"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): OrderStatu {
        let result = new OrderStatu();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderStatusId"] = this.OrderStatusId;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IOrderStatu {
    OrderStatusId?: number;
    Name?: string;
}

export class TermsOfPayment implements ITermsOfPayment {
    TermsOfPaymentId?: string;
    Description?: string;
    ExtendedDescription?: string;
    CostDescription?: string;
    CostExtendedDescription?: string;
    SellingPrice?: number;
    Vat?: number;
    SellingPriceInclVat?: number;
    DefaultOnCustomer?: boolean;
    DefaultOnProjectOverideCustomer?: boolean;
    DefaultOnOrderOverideCustomer?: boolean;
    DefaultInvoiceCost?: number;
    TypeName?: string;
    IsForInternalUseOnly?: boolean;

    constructor(data?: ITermsOfPayment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.Description = data["Description"];
            this.ExtendedDescription = data["ExtendedDescription"];
            this.CostDescription = data["CostDescription"];
            this.CostExtendedDescription = data["CostExtendedDescription"];
            this.SellingPrice = data["SellingPrice"];
            this.Vat = data["Vat"];
            this.SellingPriceInclVat = data["SellingPriceInclVat"];
            this.DefaultOnCustomer = data["DefaultOnCustomer"];
            this.DefaultOnProjectOverideCustomer = data["DefaultOnProjectOverideCustomer"];
            this.DefaultOnOrderOverideCustomer = data["DefaultOnOrderOverideCustomer"];
            this.DefaultInvoiceCost = data["DefaultInvoiceCost"];
            this.TypeName = data["TypeName"];
            this.IsForInternalUseOnly = data["IsForInternalUseOnly"];
        }
    }

    static fromJS(data: any): TermsOfPayment {
        let result = new TermsOfPayment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["Description"] = this.Description;
        data["ExtendedDescription"] = this.ExtendedDescription;
        data["CostDescription"] = this.CostDescription;
        data["CostExtendedDescription"] = this.CostExtendedDescription;
        data["SellingPrice"] = this.SellingPrice;
        data["Vat"] = this.Vat;
        data["SellingPriceInclVat"] = this.SellingPriceInclVat;
        data["DefaultOnCustomer"] = this.DefaultOnCustomer;
        data["DefaultOnProjectOverideCustomer"] = this.DefaultOnProjectOverideCustomer;
        data["DefaultOnOrderOverideCustomer"] = this.DefaultOnOrderOverideCustomer;
        data["DefaultInvoiceCost"] = this.DefaultInvoiceCost;
        data["TypeName"] = this.TypeName;
        data["IsForInternalUseOnly"] = this.IsForInternalUseOnly;
        return data;
    }
}

export interface ITermsOfPayment {
    TermsOfPaymentId?: string;
    Description?: string;
    ExtendedDescription?: string;
    CostDescription?: string;
    CostExtendedDescription?: string;
    SellingPrice?: number;
    Vat?: number;
    SellingPriceInclVat?: number;
    DefaultOnCustomer?: boolean;
    DefaultOnProjectOverideCustomer?: boolean;
    DefaultOnOrderOverideCustomer?: boolean;
    DefaultInvoiceCost?: number;
    TypeName?: string;
    IsForInternalUseOnly?: boolean;
}

export class TermsOfDelivery implements ITermsOfDelivery {
    TermsOfDeliveryId?: string;
    Description?: string;
    ExtendedDescription?: string;
    CostDescription?: string;
    CostExtendedDescription?: string;
    SellingPrice?: number;
    Vat?: number;
    SellingPriceInclVat?: number;
    CompanyId?: number;
    IsPostNoRestricted?: boolean;
    Public?: boolean;
    DailyOrderCapacity?: TermsOfDeliveryCapacity[];

    constructor(data?: ITermsOfDelivery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.Description = data["Description"];
            this.ExtendedDescription = data["ExtendedDescription"];
            this.CostDescription = data["CostDescription"];
            this.CostExtendedDescription = data["CostExtendedDescription"];
            this.SellingPrice = data["SellingPrice"];
            this.Vat = data["Vat"];
            this.SellingPriceInclVat = data["SellingPriceInclVat"];
            this.CompanyId = data["CompanyId"];
            this.IsPostNoRestricted = data["IsPostNoRestricted"];
            this.Public = data["Public"];
            if (data["DailyOrderCapacity"] && data["DailyOrderCapacity"].constructor === Array) {
                this.DailyOrderCapacity = [];
                for (let item of data["DailyOrderCapacity"])
                    this.DailyOrderCapacity.push(TermsOfDeliveryCapacity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TermsOfDelivery {
        let result = new TermsOfDelivery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["Description"] = this.Description;
        data["ExtendedDescription"] = this.ExtendedDescription;
        data["CostDescription"] = this.CostDescription;
        data["CostExtendedDescription"] = this.CostExtendedDescription;
        data["SellingPrice"] = this.SellingPrice;
        data["Vat"] = this.Vat;
        data["SellingPriceInclVat"] = this.SellingPriceInclVat;
        data["CompanyId"] = this.CompanyId;
        data["IsPostNoRestricted"] = this.IsPostNoRestricted;
        data["Public"] = this.Public;
        if (this.DailyOrderCapacity && this.DailyOrderCapacity.constructor === Array) {
            data["DailyOrderCapacity"] = [];
            for (let item of this.DailyOrderCapacity)
                data["DailyOrderCapacity"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITermsOfDelivery {
    TermsOfDeliveryId?: string;
    Description?: string;
    ExtendedDescription?: string;
    CostDescription?: string;
    CostExtendedDescription?: string;
    SellingPrice?: number;
    Vat?: number;
    SellingPriceInclVat?: number;
    CompanyId?: number;
    IsPostNoRestricted?: boolean;
    Public?: boolean;
    DailyOrderCapacity?: TermsOfDeliveryCapacity[];
}

export class TermsOfPaymentQtyDay implements ITermsOfPaymentQtyDay {
    TermsOfPaymentQtyDaysId?: number;
    Name?: string;
    Selected?: boolean;

    constructor(data?: ITermsOfPaymentQtyDay) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.TermsOfPaymentQtyDaysId = data["TermsOfPaymentQtyDaysId"];
            this.Name = data["Name"];
            this.Selected = data["Selected"];
        }
    }

    static fromJS(data: any): TermsOfPaymentQtyDay {
        let result = new TermsOfPaymentQtyDay();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TermsOfPaymentQtyDaysId"] = this.TermsOfPaymentQtyDaysId;
        data["Name"] = this.Name;
        data["Selected"] = this.Selected;
        return data;
    }
}

export interface ITermsOfPaymentQtyDay {
    TermsOfPaymentQtyDaysId?: number;
    Name?: string;
    Selected?: boolean;
}

export class Uom implements IUom {
    UomId?: string;
    Name?: string;

    constructor(data?: IUom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.UomId = data["UomId"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): Uom {
        let result = new Uom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UomId"] = this.UomId;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IUom {
    UomId?: string;
    Name?: string;
}

export class Vat implements IVat {
    VatId?: number;
    Name?: string;
    Selected?: boolean;

    constructor(data?: IVat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.VatId = data["VatId"];
            this.Name = data["Name"];
            this.Selected = data["Selected"];
        }
    }

    static fromJS(data: any): Vat {
        let result = new Vat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["VatId"] = this.VatId;
        data["Name"] = this.Name;
        data["Selected"] = this.Selected;
        return data;
    }
}

export interface IVat {
    VatId?: number;
    Name?: string;
    Selected?: boolean;
}

export class LegalPersonType implements ILegalPersonType {
    LegalPersonTypeId?: number;
    LegalPersonTypeName?: string;

    constructor(data?: ILegalPersonType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.LegalPersonTypeName = data["LegalPersonTypeName"];
        }
    }

    static fromJS(data: any): LegalPersonType {
        let result = new LegalPersonType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["LegalPersonTypeName"] = this.LegalPersonTypeName;
        return data;
    }
}

export interface ILegalPersonType {
    LegalPersonTypeId?: number;
    LegalPersonTypeName?: string;
}

export class Currency implements ICurrency {
    CurrencyId?: string;
    Name?: string;
    CountryId?: string;

    constructor(data?: ICurrency) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CurrencyId = data["CurrencyId"];
            this.Name = data["Name"];
            this.CountryId = data["CountryId"];
        }
    }

    static fromJS(data: any): Currency {
        let result = new Currency();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CurrencyId"] = this.CurrencyId;
        data["Name"] = this.Name;
        data["CountryId"] = this.CountryId;
        return data;
    }
}

export interface ICurrency {
    CurrencyId?: string;
    Name?: string;
    CountryId?: string;
}

export class Country implements ICountry {
    CountryId?: string;
    Name?: string;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CountryId = data["CountryId"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): Country {
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CountryId"] = this.CountryId;
        data["Name"] = this.Name;
        return data;
    }
}

export interface ICountry {
    CountryId?: string;
    Name?: string;
}

export class Language implements ILanguage {
    LanguageId?: string;
    Name?: string;
    CountryId?: string;

    constructor(data?: ILanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.LanguageId = data["LanguageId"];
            this.Name = data["Name"];
            this.CountryId = data["CountryId"];
        }
    }

    static fromJS(data: any): Language {
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LanguageId"] = this.LanguageId;
        data["Name"] = this.Name;
        data["CountryId"] = this.CountryId;
        return data;
    }
}

export interface ILanguage {
    LanguageId?: string;
    Name?: string;
    CountryId?: string;
}

export class OrderProduct implements IOrderProduct {
    OrderProductId?: number;
    Qty?: number;
    OrderId?: number;
    ProductId?: number;
    CustomProductId?: number;
    Name?: string;
    ShortName?: string;
    ImageUrl?: string;
    Vat?: number;
    LeadTime?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    RecommendedPrice?: number;
    StandardPrice?: number;
    BuyPrice?: number;
    EanId?: number;
    Brand?: string;
    ManufacturerName?: string;
    ManufacturerItemId?: string;
    EnvironmentCode?: string;
    EnvironmentDescriprion?: string;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    Visible?: boolean;
    CategoryId?: number;
    ItemNameUrlFriendly?: string;
    VideoTag?: string;
    UpdatedDate?: Date;
    CreatedDate?: Date;
    CompanyId?: number;
    ProductSizeProductSizeId?: number;
    ProductColorProductColorId?: number;
    ProductImageProductImageId?: number;
    DealFromDate?: Date;
    DealToDate?: Date;
    DealPrice?: number;
    DealMinBuyQty?: number;
    ShortDescription?: string;
    SubscriptionId?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    CurrentTotalValueExclVat?: number;
    CurrentTotalValueInclVat?: number;
    Context?: Context;

    constructor(data?: IOrderProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OrderProductId = data["OrderProductId"];
            this.Qty = data["Qty"];
            this.OrderId = data["OrderId"];
            this.ProductId = data["ProductId"];
            this.CustomProductId = data["CustomProductId"];
            this.Name = data["Name"];
            this.ShortName = data["ShortName"];
            this.ImageUrl = data["ImageUrl"];
            this.Vat = data["Vat"];
            this.LeadTime = data["LeadTime"];
            this.Uom = data["Uom"];
            this.SalesQuantity = data["SalesQuantity"];
            this.PackageSize = data["PackageSize"];
            this.RecommendedPrice = data["RecommendedPrice"];
            this.StandardPrice = data["StandardPrice"];
            this.BuyPrice = data["BuyPrice"];
            this.EanId = data["EanId"];
            this.Brand = data["Brand"];
            this.ManufacturerName = data["ManufacturerName"];
            this.ManufacturerItemId = data["ManufacturerItemId"];
            this.EnvironmentCode = data["EnvironmentCode"];
            this.EnvironmentDescriprion = data["EnvironmentDescriprion"];
            this.Size = data["Size"];
            this.Color = data["Color"];
            this.SellingPrice = data["SellingPrice"];
            this.GroupedByProductId = data["GroupedByProductId"];
            this.Visible = data["Visible"];
            this.CategoryId = data["CategoryId"];
            this.ItemNameUrlFriendly = data["ItemNameUrlFriendly"];
            this.VideoTag = data["VideoTag"];
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.CompanyId = data["CompanyId"];
            this.ProductSizeProductSizeId = data["ProductSizeProductSizeId"];
            this.ProductColorProductColorId = data["ProductColorProductColorId"];
            this.ProductImageProductImageId = data["ProductImageProductImageId"];
            this.DealFromDate = data["DealFromDate"] ? new Date(data["DealFromDate"].toString()) : <any>undefined;
            this.DealToDate = data["DealToDate"] ? new Date(data["DealToDate"].toString()) : <any>undefined;
            this.DealPrice = data["DealPrice"];
            this.DealMinBuyQty = data["DealMinBuyQty"];
            this.ShortDescription = data["ShortDescription"];
            this.SubscriptionId = data["SubscriptionId"];
            this.CurrentSellingPrice = data["CurrentSellingPrice"];
            this.CurrentSellingPriceInclVat = data["CurrentSellingPriceInclVat"];
            this.CurrentTotalValueExclVat = data["CurrentTotalValueExclVat"];
            this.CurrentTotalValueInclVat = data["CurrentTotalValueInclVat"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderProduct {
        let result = new OrderProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderProductId"] = this.OrderProductId;
        data["Qty"] = this.Qty;
        data["OrderId"] = this.OrderId;
        data["ProductId"] = this.ProductId;
        data["CustomProductId"] = this.CustomProductId;
        data["Name"] = this.Name;
        data["ShortName"] = this.ShortName;
        data["ImageUrl"] = this.ImageUrl;
        data["Vat"] = this.Vat;
        data["LeadTime"] = this.LeadTime;
        data["Uom"] = this.Uom;
        data["SalesQuantity"] = this.SalesQuantity;
        data["PackageSize"] = this.PackageSize;
        data["RecommendedPrice"] = this.RecommendedPrice;
        data["StandardPrice"] = this.StandardPrice;
        data["BuyPrice"] = this.BuyPrice;
        data["EanId"] = this.EanId;
        data["Brand"] = this.Brand;
        data["ManufacturerName"] = this.ManufacturerName;
        data["ManufacturerItemId"] = this.ManufacturerItemId;
        data["EnvironmentCode"] = this.EnvironmentCode;
        data["EnvironmentDescriprion"] = this.EnvironmentDescriprion;
        data["Size"] = this.Size;
        data["Color"] = this.Color;
        data["SellingPrice"] = this.SellingPrice;
        data["GroupedByProductId"] = this.GroupedByProductId;
        data["Visible"] = this.Visible;
        data["CategoryId"] = this.CategoryId;
        data["ItemNameUrlFriendly"] = this.ItemNameUrlFriendly;
        data["VideoTag"] = this.VideoTag;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["CompanyId"] = this.CompanyId;
        data["ProductSizeProductSizeId"] = this.ProductSizeProductSizeId;
        data["ProductColorProductColorId"] = this.ProductColorProductColorId;
        data["ProductImageProductImageId"] = this.ProductImageProductImageId;
        data["DealFromDate"] = this.DealFromDate ? this.DealFromDate.toISOString() : <any>undefined;
        data["DealToDate"] = this.DealToDate ? this.DealToDate.toISOString() : <any>undefined;
        data["DealPrice"] = this.DealPrice;
        data["DealMinBuyQty"] = this.DealMinBuyQty;
        data["ShortDescription"] = this.ShortDescription;
        data["SubscriptionId"] = this.SubscriptionId;
        data["CurrentSellingPrice"] = this.CurrentSellingPrice;
        data["CurrentSellingPriceInclVat"] = this.CurrentSellingPriceInclVat;
        data["CurrentTotalValueExclVat"] = this.CurrentTotalValueExclVat;
        data["CurrentTotalValueInclVat"] = this.CurrentTotalValueInclVat;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOrderProduct {
    OrderProductId?: number;
    Qty?: number;
    OrderId?: number;
    ProductId?: number;
    CustomProductId?: number;
    Name?: string;
    ShortName?: string;
    ImageUrl?: string;
    Vat?: number;
    LeadTime?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    RecommendedPrice?: number;
    StandardPrice?: number;
    BuyPrice?: number;
    EanId?: number;
    Brand?: string;
    ManufacturerName?: string;
    ManufacturerItemId?: string;
    EnvironmentCode?: string;
    EnvironmentDescriprion?: string;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    Visible?: boolean;
    CategoryId?: number;
    ItemNameUrlFriendly?: string;
    VideoTag?: string;
    UpdatedDate?: Date;
    CreatedDate?: Date;
    CompanyId?: number;
    ProductSizeProductSizeId?: number;
    ProductColorProductColorId?: number;
    ProductImageProductImageId?: number;
    DealFromDate?: Date;
    DealToDate?: Date;
    DealPrice?: number;
    DealMinBuyQty?: number;
    ShortDescription?: string;
    SubscriptionId?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    CurrentTotalValueExclVat?: number;
    CurrentTotalValueInclVat?: number;
    Context?: Context;
}

export class TermsOfDeliveryCapacity implements ITermsOfDeliveryCapacity {
    TermsOfDeliveryCapacityId?: string;
    TermsOfDeliveryId?: string;
    DayOfWeek?: number;
    Qty?: number;

    constructor(data?: ITermsOfDeliveryCapacity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.TermsOfDeliveryCapacityId = data["TermsOfDeliveryCapacityId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.DayOfWeek = data["DayOfWeek"];
            this.Qty = data["Qty"];
        }
    }

    static fromJS(data: any): TermsOfDeliveryCapacity {
        let result = new TermsOfDeliveryCapacity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TermsOfDeliveryCapacityId"] = this.TermsOfDeliveryCapacityId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["DayOfWeek"] = this.DayOfWeek;
        data["Qty"] = this.Qty;
        return data;
    }
}

export interface ITermsOfDeliveryCapacity {
    TermsOfDeliveryCapacityId?: string;
    TermsOfDeliveryId?: string;
    DayOfWeek?: number;
    Qty?: number;
}

export class Order implements IOrder {
    OrderProducts?: OrderProduct[];
    OrderDate?: Date;
    IsFirstOrderInSubscription?: boolean;
    ReferredByPersonId?: number;
    ExternalAddressSelector?: string;
    ExternalOrderId?: string;
    ExternalSubscriptionId?: string;
    ExternalTransactionId?: string;
    Reference?: string;
    ShippingReference?: string;
    OurOrderId?: number;
    TermsOfPaymentQtyDaysId?: number;
    YourOrderId?: string;
    InvoiceCost?: number;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    ProjectId?: number;
    OrderCountry?: string;
    ShippingCountry?: string;
    InvoiceCostInclVat?: number;
    Freight?: number;
    FreightVat?: number;
    FreightInclVat?: number;
    PrintTemplateId?: number;
    IsDeleted?: boolean;
    UpdatedDate?: Date;
    CreatedDate?: Date;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    OrderId?: number;
    Comment?: string;
    PersonId?: number;
    OrderStatusId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    Doorcode?: string;
    CellPhone?: string;
    Email?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    DeliveryDate?: Date;
    Phone?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    SubscriptionId?: number;
    IsCanceledDate?: Date;
    IsDeliveredDate?: Date;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    SearchText?: string;
    BuyOrderId?: string;
    ShippingComment?: string;
    ReceiptOrInvoiceCreated?: boolean;
    IsSubscriptionOrder?: boolean;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    PartDeliveryNo?: number;
    DeliverySerieId?: string;
    Context?: Context;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["OrderProducts"] && data["OrderProducts"].constructor === Array) {
                this.OrderProducts = [];
                for (let item of data["OrderProducts"])
                    this.OrderProducts.push(OrderProduct.fromJS(item));
            }
            this.OrderDate = data["OrderDate"] ? new Date(data["OrderDate"].toString()) : <any>undefined;
            this.IsFirstOrderInSubscription = data["IsFirstOrderInSubscription"];
            this.ReferredByPersonId = data["ReferredByPersonId"];
            this.ExternalAddressSelector = data["ExternalAddressSelector"];
            this.ExternalOrderId = data["ExternalOrderId"];
            this.ExternalSubscriptionId = data["ExternalSubscriptionId"];
            this.ExternalTransactionId = data["ExternalTransactionId"];
            this.Reference = data["Reference"];
            this.ShippingReference = data["ShippingReference"];
            this.OurOrderId = data["OurOrderId"];
            this.TermsOfPaymentQtyDaysId = data["TermsOfPaymentQtyDaysId"];
            this.YourOrderId = data["YourOrderId"];
            this.InvoiceCost = data["InvoiceCost"];
            this.WayOfDeliveryId = data["WayOfDeliveryId"];
            this.OurReference = data["OurReference"];
            this.YourReference = data["YourReference"];
            this.ProjectId = data["ProjectId"];
            this.OrderCountry = data["OrderCountry"];
            this.ShippingCountry = data["ShippingCountry"];
            this.InvoiceCostInclVat = data["InvoiceCostInclVat"];
            this.Freight = data["Freight"];
            this.FreightVat = data["FreightVat"];
            this.FreightInclVat = data["FreightInclVat"];
            this.PrintTemplateId = data["PrintTemplateId"];
            this.IsDeleted = data["IsDeleted"];
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.Discount = data["Discount"];
            this.DiscountVat = data["DiscountVat"];
            this.DiscountInclVat = data["DiscountInclVat"];
            this.DiscountDescription = data["DiscountDescription"];
            this.OrderId = data["OrderId"];
            this.Comment = data["Comment"];
            this.PersonId = data["PersonId"];
            this.OrderStatusId = data["OrderStatusId"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.Doorcode = data["Doorcode"];
            this.CellPhone = data["CellPhone"];
            this.Email = data["Email"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.DeliveryDate = data["DeliveryDate"] ? new Date(data["DeliveryDate"].toString()) : <any>undefined;
            this.Phone = data["Phone"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.ShippingLongitude = data["ShippingLongitude"];
            this.ShippingLatitude = data["ShippingLatitude"];
            this.SubscriptionId = data["SubscriptionId"];
            this.IsCanceledDate = data["IsCanceledDate"] ? new Date(data["IsCanceledDate"].toString()) : <any>undefined;
            this.IsDeliveredDate = data["IsDeliveredDate"] ? new Date(data["IsDeliveredDate"].toString()) : <any>undefined;
            this.ShippingTag = data["ShippingTag"];
            this.OrderForShippingTag = data["OrderForShippingTag"];
            this.SearchText = data["SearchText"];
            this.BuyOrderId = data["BuyOrderId"];
            this.ShippingComment = data["ShippingComment"];
            this.ReceiptOrInvoiceCreated = data["ReceiptOrInvoiceCreated"];
            this.IsSubscriptionOrder = data["IsSubscriptionOrder"];
            this.OrderValueExclVat = data["OrderValueExclVat"];
            this.OrderValueInclVat = data["OrderValueInclVat"];
            this.OrderVat = data["OrderVat"];
            this.TotalValueExclVat = data["TotalValueExclVat"];
            this.TotalValueInclVat = data["TotalValueInclVat"];
            this.PartDeliveryNo = data["PartDeliveryNo"];
            this.DeliverySerieId = data["DeliverySerieId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Order {
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.OrderProducts && this.OrderProducts.constructor === Array) {
            data["OrderProducts"] = [];
            for (let item of this.OrderProducts)
                data["OrderProducts"].push(item.toJSON());
        }
        data["OrderDate"] = this.OrderDate ? this.OrderDate.toISOString() : <any>undefined;
        data["IsFirstOrderInSubscription"] = this.IsFirstOrderInSubscription;
        data["ReferredByPersonId"] = this.ReferredByPersonId;
        data["ExternalAddressSelector"] = this.ExternalAddressSelector;
        data["ExternalOrderId"] = this.ExternalOrderId;
        data["ExternalSubscriptionId"] = this.ExternalSubscriptionId;
        data["ExternalTransactionId"] = this.ExternalTransactionId;
        data["Reference"] = this.Reference;
        data["ShippingReference"] = this.ShippingReference;
        data["OurOrderId"] = this.OurOrderId;
        data["TermsOfPaymentQtyDaysId"] = this.TermsOfPaymentQtyDaysId;
        data["YourOrderId"] = this.YourOrderId;
        data["InvoiceCost"] = this.InvoiceCost;
        data["WayOfDeliveryId"] = this.WayOfDeliveryId;
        data["OurReference"] = this.OurReference;
        data["YourReference"] = this.YourReference;
        data["ProjectId"] = this.ProjectId;
        data["OrderCountry"] = this.OrderCountry;
        data["ShippingCountry"] = this.ShippingCountry;
        data["InvoiceCostInclVat"] = this.InvoiceCostInclVat;
        data["Freight"] = this.Freight;
        data["FreightVat"] = this.FreightVat;
        data["FreightInclVat"] = this.FreightInclVat;
        data["PrintTemplateId"] = this.PrintTemplateId;
        data["IsDeleted"] = this.IsDeleted;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["Discount"] = this.Discount;
        data["DiscountVat"] = this.DiscountVat;
        data["DiscountInclVat"] = this.DiscountInclVat;
        data["DiscountDescription"] = this.DiscountDescription;
        data["OrderId"] = this.OrderId;
        data["Comment"] = this.Comment;
        data["PersonId"] = this.PersonId;
        data["OrderStatusId"] = this.OrderStatusId;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["Doorcode"] = this.Doorcode;
        data["CellPhone"] = this.CellPhone;
        data["Email"] = this.Email;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["DeliveryDate"] = this.DeliveryDate ? this.DeliveryDate.toISOString() : <any>undefined;
        data["Phone"] = this.Phone;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["ShippingLongitude"] = this.ShippingLongitude;
        data["ShippingLatitude"] = this.ShippingLatitude;
        data["SubscriptionId"] = this.SubscriptionId;
        data["IsCanceledDate"] = this.IsCanceledDate ? this.IsCanceledDate.toISOString() : <any>undefined;
        data["IsDeliveredDate"] = this.IsDeliveredDate ? this.IsDeliveredDate.toISOString() : <any>undefined;
        data["ShippingTag"] = this.ShippingTag;
        data["OrderForShippingTag"] = this.OrderForShippingTag;
        data["SearchText"] = this.SearchText;
        data["BuyOrderId"] = this.BuyOrderId;
        data["ShippingComment"] = this.ShippingComment;
        data["ReceiptOrInvoiceCreated"] = this.ReceiptOrInvoiceCreated;
        data["IsSubscriptionOrder"] = this.IsSubscriptionOrder;
        data["OrderValueExclVat"] = this.OrderValueExclVat;
        data["OrderValueInclVat"] = this.OrderValueInclVat;
        data["OrderVat"] = this.OrderVat;
        data["TotalValueExclVat"] = this.TotalValueExclVat;
        data["TotalValueInclVat"] = this.TotalValueInclVat;
        data["PartDeliveryNo"] = this.PartDeliveryNo;
        data["DeliverySerieId"] = this.DeliverySerieId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOrder {
    OrderProducts?: OrderProduct[];
    OrderDate?: Date;
    IsFirstOrderInSubscription?: boolean;
    ReferredByPersonId?: number;
    ExternalAddressSelector?: string;
    ExternalOrderId?: string;
    ExternalSubscriptionId?: string;
    ExternalTransactionId?: string;
    Reference?: string;
    ShippingReference?: string;
    OurOrderId?: number;
    TermsOfPaymentQtyDaysId?: number;
    YourOrderId?: string;
    InvoiceCost?: number;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    ProjectId?: number;
    OrderCountry?: string;
    ShippingCountry?: string;
    InvoiceCostInclVat?: number;
    Freight?: number;
    FreightVat?: number;
    FreightInclVat?: number;
    PrintTemplateId?: number;
    IsDeleted?: boolean;
    UpdatedDate?: Date;
    CreatedDate?: Date;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    OrderId?: number;
    Comment?: string;
    PersonId?: number;
    OrderStatusId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    Doorcode?: string;
    CellPhone?: string;
    Email?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    DeliveryDate?: Date;
    Phone?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    SubscriptionId?: number;
    IsCanceledDate?: Date;
    IsDeliveredDate?: Date;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    SearchText?: string;
    BuyOrderId?: string;
    ShippingComment?: string;
    ReceiptOrInvoiceCreated?: boolean;
    IsSubscriptionOrder?: boolean;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    PartDeliveryNo?: number;
    DeliverySerieId?: string;
    Context?: Context;
}

export class AddProductToOrdersModel implements IAddProductToOrdersModel {
    ProductId?: number;
    Qty?: number;
    OrderIds?: number[];
    AddEvenIfProductExist?: boolean;

    constructor(data?: IAddProductToOrdersModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ProductId = data["ProductId"];
            this.Qty = data["Qty"];
            if (data["OrderIds"] && data["OrderIds"].constructor === Array) {
                this.OrderIds = [];
                for (let item of data["OrderIds"])
                    this.OrderIds.push(item);
            }
            this.AddEvenIfProductExist = data["AddEvenIfProductExist"];
        }
    }

    static fromJS(data: any): AddProductToOrdersModel {
        let result = new AddProductToOrdersModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProductId"] = this.ProductId;
        data["Qty"] = this.Qty;
        if (this.OrderIds && this.OrderIds.constructor === Array) {
            data["OrderIds"] = [];
            for (let item of this.OrderIds)
                data["OrderIds"].push(item);
        }
        data["AddEvenIfProductExist"] = this.AddEvenIfProductExist;
        return data;
    }
}

export interface IAddProductToOrdersModel {
    ProductId?: number;
    Qty?: number;
    OrderIds?: number[];
    AddEvenIfProductExist?: boolean;
}

export class ActionConfirmationResult implements IActionConfirmationResult {
    Title?: string;
    Description?: string;
    Accomplished?: boolean;

    constructor(data?: IActionConfirmationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Title = data["Title"];
            this.Description = data["Description"];
            this.Accomplished = data["Accomplished"];
        }
    }

    static fromJS(data: any): ActionConfirmationResult {
        let result = new ActionConfirmationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        data["Accomplished"] = this.Accomplished;
        return data;
    }
}

export interface IActionConfirmationResult {
    Title?: string;
    Description?: string;
    Accomplished?: boolean;
}

export class OrderLockout implements IOrderLockout {
    OrderLockoutId?: number;
    DayOfWeek?: number;
    Qty?: number;

    constructor(data?: IOrderLockout) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OrderLockoutId = data["OrderLockoutId"];
            this.DayOfWeek = data["DayOfWeek"];
            this.Qty = data["Qty"];
        }
    }

    static fromJS(data: any): OrderLockout {
        let result = new OrderLockout();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderLockoutId"] = this.OrderLockoutId;
        data["DayOfWeek"] = this.DayOfWeek;
        data["Qty"] = this.Qty;
        return data;
    }
}

export interface IOrderLockout {
    OrderLockoutId?: number;
    DayOfWeek?: number;
    Qty?: number;
}

export class ShippingTagOrdersModel implements IShippingTagOrdersModel {
    OrderId?: number;
    ShippingTag?: string;
    OrderForShippingTag?: number;

    constructor(data?: IShippingTagOrdersModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OrderId = data["OrderId"];
            this.ShippingTag = data["ShippingTag"];
            this.OrderForShippingTag = data["OrderForShippingTag"];
        }
    }

    static fromJS(data: any): ShippingTagOrdersModel {
        let result = new ShippingTagOrdersModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderId"] = this.OrderId;
        data["ShippingTag"] = this.ShippingTag;
        data["OrderForShippingTag"] = this.OrderForShippingTag;
        return data;
    }
}

export interface IShippingTagOrdersModel {
    OrderId?: number;
    ShippingTag?: string;
    OrderForShippingTag?: number;
}

export class UpdateDeliveryDateModel implements IUpdateDeliveryDateModel {
    orderids?: number[];
    deliverydate?: Date;

    constructor(data?: IUpdateDeliveryDateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["orderids"] && data["orderids"].constructor === Array) {
                this.orderids = [];
                for (let item of data["orderids"])
                    this.orderids.push(item);
            }
            this.deliverydate = data["deliverydate"] ? new Date(data["deliverydate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateDeliveryDateModel {
        let result = new UpdateDeliveryDateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.orderids && this.orderids.constructor === Array) {
            data["orderids"] = [];
            for (let item of this.orderids)
                data["orderids"].push(item);
        }
        data["deliverydate"] = this.deliverydate ? this.deliverydate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateDeliveryDateModel {
    orderids?: number[];
    deliverydate?: Date;
}

export class OrderClosing implements IOrderClosing {
    OrderClosingId?: number;
    DaysBeforeDeliveryDate?: number;

    constructor(data?: IOrderClosing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OrderClosingId = data["OrderClosingId"];
            this.DaysBeforeDeliveryDate = data["DaysBeforeDeliveryDate"];
        }
    }

    static fromJS(data: any): OrderClosing {
        let result = new OrderClosing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderClosingId"] = this.OrderClosingId;
        data["DaysBeforeDeliveryDate"] = this.DaysBeforeDeliveryDate;
        return data;
    }
}

export interface IOrderClosing {
    OrderClosingId?: number;
    DaysBeforeDeliveryDate?: number;
}

export class OrderHoliday implements IOrderHoliday {
    OrderHolidayId?: number;
    FromDate?: Date;
    ToDate?: Date;
    Description?: string;

    constructor(data?: IOrderHoliday) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OrderHolidayId = data["OrderHolidayId"];
            this.FromDate = data["FromDate"] ? new Date(data["FromDate"].toString()) : <any>undefined;
            this.ToDate = data["ToDate"] ? new Date(data["ToDate"].toString()) : <any>undefined;
            this.Description = data["Description"];
        }
    }

    static fromJS(data: any): OrderHoliday {
        let result = new OrderHoliday();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderHolidayId"] = this.OrderHolidayId;
        data["FromDate"] = this.FromDate ? this.FromDate.toISOString() : <any>undefined;
        data["ToDate"] = this.ToDate ? this.ToDate.toISOString() : <any>undefined;
        data["Description"] = this.Description;
        return data;
    }
}

export interface IOrderHoliday {
    OrderHolidayId?: number;
    FromDate?: Date;
    ToDate?: Date;
    Description?: string;
}

export class Person implements IPerson {
    PersonId?: number;
    RoleName?: string;
    SellingPrice?: number;
    DefaultCompensation?: number;
    DefaultCompensationUom?: string;
    CountyCouncilName?: string;
    PreferedCountyCouncilNames?: string[];
    DefaultVatSetting?: number;
    ItemType?: string;
    AvailableWeeksAsJson?: string;
    KnowledgeOfMedicalRecord?: string;
    IsNew?: boolean;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    QualityResult?: number;
    LastContactDate?: Date;
    AreaOfExpertise?: string;
    AllAreaOfExpertises?: string[];
    BornDate?: Date;
    SystemRoleName?: string;
    RoleAccess?: string;
    AccountId?: number;
    ForSystemRole?: string;
    AvailableForWorkInCountries?: string[];
    BelongToId?: string;
    SocialSecurityNo2?: string;
    OrderCountry?: string;
    CostCenter?: string;
    Name?: string;
    ShippingName?: string;
    Fax?: string;
    Web?: string;
    TaxPercentage?: number;
    TaxTable?: string;
    Bank?: string;
    ClearingNumber?: string;
    BankAccountNumber?: string;
    EmployeeNumber?: string;
    BankGiro?: string;
    PlusGiro?: string;
    VatNr?: string;
    SNICode?: string;
    IBANBankGiro?: string;
    BICPlusGiro?: string;
    Title?: string;
    Description?: string;
    SyncShippingAddress?: boolean;
    Deactivated?: boolean;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SocialSecurityNo?: string;
    ImageUrl?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    BusinessSocialSecurityNo?: string;
    BusinessName?: string;
    BusinessStreetName?: string;
    BusinessPostNo?: string;
    BusinessCity?: string;
    BranchOffice?: string;
    Department?: string;
    CellPhone?: string;
    Email?: string;
    ExtraEmail?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    TermsOfPaymentQtyDaysId?: number;
    Phone?: string;
    Doorcode?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Reference?: string;
    ShippingReference?: string;
    OurPersonId?: number;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    ExternalSubscriptionId?: string;
    ExternalAddressSelector?: string;
    ExternalFortnoxCustomerNo?: string;
    ReferredByPersonId?: number;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    QtyRelatedDocuments?: number;
    PendingDelete?: boolean;
    Comment?: string;
    ShippingComment?: string;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PersonId = data["PersonId"];
            this.RoleName = data["RoleName"];
            this.SellingPrice = data["SellingPrice"];
            this.DefaultCompensation = data["DefaultCompensation"];
            this.DefaultCompensationUom = data["DefaultCompensationUom"];
            this.CountyCouncilName = data["CountyCouncilName"];
            if (data["PreferedCountyCouncilNames"] && data["PreferedCountyCouncilNames"].constructor === Array) {
                this.PreferedCountyCouncilNames = [];
                for (let item of data["PreferedCountyCouncilNames"])
                    this.PreferedCountyCouncilNames.push(item);
            }
            this.DefaultVatSetting = data["DefaultVatSetting"];
            this.ItemType = data["ItemType"];
            this.AvailableWeeksAsJson = data["AvailableWeeksAsJson"];
            this.KnowledgeOfMedicalRecord = data["KnowledgeOfMedicalRecord"];
            this.IsNew = data["IsNew"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.QualityResult = data["QualityResult"];
            this.LastContactDate = data["LastContactDate"] ? new Date(data["LastContactDate"].toString()) : <any>undefined;
            this.AreaOfExpertise = data["AreaOfExpertise"];
            if (data["AllAreaOfExpertises"] && data["AllAreaOfExpertises"].constructor === Array) {
                this.AllAreaOfExpertises = [];
                for (let item of data["AllAreaOfExpertises"])
                    this.AllAreaOfExpertises.push(item);
            }
            this.BornDate = data["BornDate"] ? new Date(data["BornDate"].toString()) : <any>undefined;
            this.SystemRoleName = data["SystemRoleName"];
            this.RoleAccess = data["RoleAccess"];
            this.AccountId = data["AccountId"];
            this.ForSystemRole = data["ForSystemRole"];
            if (data["AvailableForWorkInCountries"] && data["AvailableForWorkInCountries"].constructor === Array) {
                this.AvailableForWorkInCountries = [];
                for (let item of data["AvailableForWorkInCountries"])
                    this.AvailableForWorkInCountries.push(item);
            }
            this.BelongToId = data["BelongToId"];
            this.SocialSecurityNo2 = data["SocialSecurityNo2"];
            this.OrderCountry = data["OrderCountry"];
            this.CostCenter = data["CostCenter"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.Fax = data["Fax"];
            this.Web = data["Web"];
            this.TaxPercentage = data["TaxPercentage"];
            this.TaxTable = data["TaxTable"];
            this.Bank = data["Bank"];
            this.ClearingNumber = data["ClearingNumber"];
            this.BankAccountNumber = data["BankAccountNumber"];
            this.EmployeeNumber = data["EmployeeNumber"];
            this.BankGiro = data["BankGiro"];
            this.PlusGiro = data["PlusGiro"];
            this.VatNr = data["VatNr"];
            this.SNICode = data["SNICode"];
            this.IBANBankGiro = data["IBANBankGiro"];
            this.BICPlusGiro = data["BICPlusGiro"];
            this.Title = data["Title"];
            this.Description = data["Description"];
            this.SyncShippingAddress = data["SyncShippingAddress"];
            this.Deactivated = data["Deactivated"];
            this.WorkCompensationMultiplierId = data["WorkCompensationMultiplierId"];
            this.WorkCompensationMultiplierValue = data["WorkCompensationMultiplierValue"];
            this.VacationPayMultiplier = data["VacationPayMultiplier"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.ImageUrl = data["ImageUrl"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.ShippingCountry = data["ShippingCountry"];
            this.BusinessSocialSecurityNo = data["BusinessSocialSecurityNo"];
            this.BusinessName = data["BusinessName"];
            this.BusinessStreetName = data["BusinessStreetName"];
            this.BusinessPostNo = data["BusinessPostNo"];
            this.BusinessCity = data["BusinessCity"];
            this.BranchOffice = data["BranchOffice"];
            this.Department = data["Department"];
            this.CellPhone = data["CellPhone"];
            this.Email = data["Email"];
            this.ExtraEmail = data["ExtraEmail"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.WayOfDeliveryId = data["WayOfDeliveryId"];
            this.OurReference = data["OurReference"];
            this.YourReference = data["YourReference"];
            this.TermsOfPaymentQtyDaysId = data["TermsOfPaymentQtyDaysId"];
            this.Phone = data["Phone"];
            this.Doorcode = data["Doorcode"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.Reference = data["Reference"];
            this.ShippingReference = data["ShippingReference"];
            this.OurPersonId = data["OurPersonId"];
            this.ShippingLongitude = data["ShippingLongitude"];
            this.ShippingLatitude = data["ShippingLatitude"];
            this.ExternalSubscriptionId = data["ExternalSubscriptionId"];
            this.ExternalAddressSelector = data["ExternalAddressSelector"];
            this.ExternalFortnoxCustomerNo = data["ExternalFortnoxCustomerNo"];
            this.ReferredByPersonId = data["ReferredByPersonId"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.ResponsibleName = data["ResponsibleName"];
            this.QtyRelatedDocuments = data["QtyRelatedDocuments"];
            this.PendingDelete = data["PendingDelete"];
            this.Comment = data["Comment"];
            this.ShippingComment = data["ShippingComment"];
        }
    }

    static fromJS(data: any): Person {
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PersonId"] = this.PersonId;
        data["RoleName"] = this.RoleName;
        data["SellingPrice"] = this.SellingPrice;
        data["DefaultCompensation"] = this.DefaultCompensation;
        data["DefaultCompensationUom"] = this.DefaultCompensationUom;
        data["CountyCouncilName"] = this.CountyCouncilName;
        if (this.PreferedCountyCouncilNames && this.PreferedCountyCouncilNames.constructor === Array) {
            data["PreferedCountyCouncilNames"] = [];
            for (let item of this.PreferedCountyCouncilNames)
                data["PreferedCountyCouncilNames"].push(item);
        }
        data["DefaultVatSetting"] = this.DefaultVatSetting;
        data["ItemType"] = this.ItemType;
        data["AvailableWeeksAsJson"] = this.AvailableWeeksAsJson;
        data["KnowledgeOfMedicalRecord"] = this.KnowledgeOfMedicalRecord;
        data["IsNew"] = this.IsNew;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["QualityResult"] = this.QualityResult;
        data["LastContactDate"] = this.LastContactDate ? this.LastContactDate.toISOString() : <any>undefined;
        data["AreaOfExpertise"] = this.AreaOfExpertise;
        if (this.AllAreaOfExpertises && this.AllAreaOfExpertises.constructor === Array) {
            data["AllAreaOfExpertises"] = [];
            for (let item of this.AllAreaOfExpertises)
                data["AllAreaOfExpertises"].push(item);
        }
        data["BornDate"] = this.BornDate ? this.BornDate.toISOString() : <any>undefined;
        data["SystemRoleName"] = this.SystemRoleName;
        data["RoleAccess"] = this.RoleAccess;
        data["AccountId"] = this.AccountId;
        data["ForSystemRole"] = this.ForSystemRole;
        if (this.AvailableForWorkInCountries && this.AvailableForWorkInCountries.constructor === Array) {
            data["AvailableForWorkInCountries"] = [];
            for (let item of this.AvailableForWorkInCountries)
                data["AvailableForWorkInCountries"].push(item);
        }
        data["BelongToId"] = this.BelongToId;
        data["SocialSecurityNo2"] = this.SocialSecurityNo2;
        data["OrderCountry"] = this.OrderCountry;
        data["CostCenter"] = this.CostCenter;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["Fax"] = this.Fax;
        data["Web"] = this.Web;
        data["TaxPercentage"] = this.TaxPercentage;
        data["TaxTable"] = this.TaxTable;
        data["Bank"] = this.Bank;
        data["ClearingNumber"] = this.ClearingNumber;
        data["BankAccountNumber"] = this.BankAccountNumber;
        data["EmployeeNumber"] = this.EmployeeNumber;
        data["BankGiro"] = this.BankGiro;
        data["PlusGiro"] = this.PlusGiro;
        data["VatNr"] = this.VatNr;
        data["SNICode"] = this.SNICode;
        data["IBANBankGiro"] = this.IBANBankGiro;
        data["BICPlusGiro"] = this.BICPlusGiro;
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        data["SyncShippingAddress"] = this.SyncShippingAddress;
        data["Deactivated"] = this.Deactivated;
        data["WorkCompensationMultiplierId"] = this.WorkCompensationMultiplierId;
        data["WorkCompensationMultiplierValue"] = this.WorkCompensationMultiplierValue;
        data["VacationPayMultiplier"] = this.VacationPayMultiplier;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["ImageUrl"] = this.ImageUrl;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["ShippingCountry"] = this.ShippingCountry;
        data["BusinessSocialSecurityNo"] = this.BusinessSocialSecurityNo;
        data["BusinessName"] = this.BusinessName;
        data["BusinessStreetName"] = this.BusinessStreetName;
        data["BusinessPostNo"] = this.BusinessPostNo;
        data["BusinessCity"] = this.BusinessCity;
        data["BranchOffice"] = this.BranchOffice;
        data["Department"] = this.Department;
        data["CellPhone"] = this.CellPhone;
        data["Email"] = this.Email;
        data["ExtraEmail"] = this.ExtraEmail;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["WayOfDeliveryId"] = this.WayOfDeliveryId;
        data["OurReference"] = this.OurReference;
        data["YourReference"] = this.YourReference;
        data["TermsOfPaymentQtyDaysId"] = this.TermsOfPaymentQtyDaysId;
        data["Phone"] = this.Phone;
        data["Doorcode"] = this.Doorcode;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["Reference"] = this.Reference;
        data["ShippingReference"] = this.ShippingReference;
        data["OurPersonId"] = this.OurPersonId;
        data["ShippingLongitude"] = this.ShippingLongitude;
        data["ShippingLatitude"] = this.ShippingLatitude;
        data["ExternalSubscriptionId"] = this.ExternalSubscriptionId;
        data["ExternalAddressSelector"] = this.ExternalAddressSelector;
        data["ExternalFortnoxCustomerNo"] = this.ExternalFortnoxCustomerNo;
        data["ReferredByPersonId"] = this.ReferredByPersonId;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["ResponsibleName"] = this.ResponsibleName;
        data["QtyRelatedDocuments"] = this.QtyRelatedDocuments;
        data["PendingDelete"] = this.PendingDelete;
        data["Comment"] = this.Comment;
        data["ShippingComment"] = this.ShippingComment;
        return data;
    }
}

export interface IPerson {
    PersonId?: number;
    RoleName?: string;
    SellingPrice?: number;
    DefaultCompensation?: number;
    DefaultCompensationUom?: string;
    CountyCouncilName?: string;
    PreferedCountyCouncilNames?: string[];
    DefaultVatSetting?: number;
    ItemType?: string;
    AvailableWeeksAsJson?: string;
    KnowledgeOfMedicalRecord?: string;
    IsNew?: boolean;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    QualityResult?: number;
    LastContactDate?: Date;
    AreaOfExpertise?: string;
    AllAreaOfExpertises?: string[];
    BornDate?: Date;
    SystemRoleName?: string;
    RoleAccess?: string;
    AccountId?: number;
    ForSystemRole?: string;
    AvailableForWorkInCountries?: string[];
    BelongToId?: string;
    SocialSecurityNo2?: string;
    OrderCountry?: string;
    CostCenter?: string;
    Name?: string;
    ShippingName?: string;
    Fax?: string;
    Web?: string;
    TaxPercentage?: number;
    TaxTable?: string;
    Bank?: string;
    ClearingNumber?: string;
    BankAccountNumber?: string;
    EmployeeNumber?: string;
    BankGiro?: string;
    PlusGiro?: string;
    VatNr?: string;
    SNICode?: string;
    IBANBankGiro?: string;
    BICPlusGiro?: string;
    Title?: string;
    Description?: string;
    SyncShippingAddress?: boolean;
    Deactivated?: boolean;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SocialSecurityNo?: string;
    ImageUrl?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    BusinessSocialSecurityNo?: string;
    BusinessName?: string;
    BusinessStreetName?: string;
    BusinessPostNo?: string;
    BusinessCity?: string;
    BranchOffice?: string;
    Department?: string;
    CellPhone?: string;
    Email?: string;
    ExtraEmail?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    TermsOfPaymentQtyDaysId?: number;
    Phone?: string;
    Doorcode?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Reference?: string;
    ShippingReference?: string;
    OurPersonId?: number;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    ExternalSubscriptionId?: string;
    ExternalAddressSelector?: string;
    ExternalFortnoxCustomerNo?: string;
    ReferredByPersonId?: number;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    QtyRelatedDocuments?: number;
    PendingDelete?: boolean;
    Comment?: string;
    ShippingComment?: string;
}

export class Education implements IEducation {
    EducationId?: number;
    Where?: string;
    Name?: string;
    Description?: string;
    From?: string;
    To?: string;
    PersonId?: number;
    Context?: Context;

    constructor(data?: IEducation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.EducationId = data["EducationId"];
            this.Where = data["Where"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.From = data["From"];
            this.To = data["To"];
            this.PersonId = data["PersonId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Education {
        let result = new Education();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EducationId"] = this.EducationId;
        data["Where"] = this.Where;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["From"] = this.From;
        data["To"] = this.To;
        data["PersonId"] = this.PersonId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEducation {
    EducationId?: number;
    Where?: string;
    Name?: string;
    Description?: string;
    From?: string;
    To?: string;
    PersonId?: number;
    Context?: Context;
}

export class PagedResultsOfEmailStandard implements IPagedResultsOfEmailStandard {
    ContinuationToken?: string;
    Results?: EmailStandard[];

    constructor(data?: IPagedResultsOfEmailStandard) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ContinuationToken = data["ContinuationToken"];
            if (data["Results"] && data["Results"].constructor === Array) {
                this.Results = [];
                for (let item of data["Results"])
                    this.Results.push(EmailStandard.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultsOfEmailStandard {
        let result = new PagedResultsOfEmailStandard();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContinuationToken"] = this.ContinuationToken;
        if (this.Results && this.Results.constructor === Array) {
            data["Results"] = [];
            for (let item of this.Results)
                data["Results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedResultsOfEmailStandard {
    ContinuationToken?: string;
    Results?: EmailStandard[];
}

export class EmailStandard implements IEmailStandard {
    id?: string;
    Subject?: string;
    Text?: string;
    Html?: string;
    To?: MessageAddress[];
    Bcc?: MessageAddress[];
    Cc?: MessageAddress[];
    From?: MessageAddress;
    Attachments?: MessageAttachment[];
    CreatedDate?: Date;
    SharesinformationaboutPersonId?: string;

    constructor(data?: IEmailStandard) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Subject = data["Subject"];
            this.Text = data["Text"];
            this.Html = data["Html"];
            if (data["To"] && data["To"].constructor === Array) {
                this.To = [];
                for (let item of data["To"])
                    this.To.push(MessageAddress.fromJS(item));
            }
            if (data["Bcc"] && data["Bcc"].constructor === Array) {
                this.Bcc = [];
                for (let item of data["Bcc"])
                    this.Bcc.push(MessageAddress.fromJS(item));
            }
            if (data["Cc"] && data["Cc"].constructor === Array) {
                this.Cc = [];
                for (let item of data["Cc"])
                    this.Cc.push(MessageAddress.fromJS(item));
            }
            this.From = data["From"] ? MessageAddress.fromJS(data["From"]) : <any>undefined;
            if (data["Attachments"] && data["Attachments"].constructor === Array) {
                this.Attachments = [];
                for (let item of data["Attachments"])
                    this.Attachments.push(MessageAttachment.fromJS(item));
            }
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.SharesinformationaboutPersonId = data["SharesinformationaboutPersonId"];
        }
    }

    static fromJS(data: any): EmailStandard {
        let result = new EmailStandard();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Subject"] = this.Subject;
        data["Text"] = this.Text;
        data["Html"] = this.Html;
        if (this.To && this.To.constructor === Array) {
            data["To"] = [];
            for (let item of this.To)
                data["To"].push(item.toJSON());
        }
        if (this.Bcc && this.Bcc.constructor === Array) {
            data["Bcc"] = [];
            for (let item of this.Bcc)
                data["Bcc"].push(item.toJSON());
        }
        if (this.Cc && this.Cc.constructor === Array) {
            data["Cc"] = [];
            for (let item of this.Cc)
                data["Cc"].push(item.toJSON());
        }
        data["From"] = this.From ? this.From.toJSON() : <any>undefined;
        if (this.Attachments && this.Attachments.constructor === Array) {
            data["Attachments"] = [];
            for (let item of this.Attachments)
                data["Attachments"].push(item.toJSON());
        }
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["SharesinformationaboutPersonId"] = this.SharesinformationaboutPersonId;
        return data;
    }
}

export interface IEmailStandard {
    id?: string;
    Subject?: string;
    Text?: string;
    Html?: string;
    To?: MessageAddress[];
    Bcc?: MessageAddress[];
    Cc?: MessageAddress[];
    From?: MessageAddress;
    Attachments?: MessageAttachment[];
    CreatedDate?: Date;
    SharesinformationaboutPersonId?: string;
}

export class MessageAddress implements IMessageAddress {
    Name?: string;
    Address?: string;

    constructor(data?: IMessageAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Name = data["Name"];
            this.Address = data["Address"];
        }
    }

    static fromJS(data: any): MessageAddress {
        let result = new MessageAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.Name;
        data["Address"] = this.Address;
        return data;
    }
}

export interface IMessageAddress {
    Name?: string;
    Address?: string;
}

export class MessageAttachment implements IMessageAttachment {
    Name?: string;
    AdockaCdnUrl?: string;
    DataUriString?: string;
    Base64Content?: string;

    constructor(data?: IMessageAttachment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Name = data["Name"];
            this.AdockaCdnUrl = data["AdockaCdnUrl"];
            this.DataUriString = data["DataUriString"];
            this.Base64Content = data["Base64Content"];
        }
    }

    static fromJS(data: any): MessageAttachment {
        let result = new MessageAttachment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.Name;
        data["AdockaCdnUrl"] = this.AdockaCdnUrl;
        data["DataUriString"] = this.DataUriString;
        data["Base64Content"] = this.Base64Content;
        return data;
    }
}

export interface IMessageAttachment {
    Name?: string;
    AdockaCdnUrl?: string;
    DataUriString?: string;
    Base64Content?: string;
}

export class Experience implements IExperience {
    ExperienceId?: number;
    Where?: string;
    Name?: string;
    Description?: string;
    From?: string;
    To?: string;
    PersonId?: number;
    Context?: Context;

    constructor(data?: IExperience) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ExperienceId = data["ExperienceId"];
            this.Where = data["Where"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.From = data["From"];
            this.To = data["To"];
            this.PersonId = data["PersonId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Experience {
        let result = new Experience();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ExperienceId"] = this.ExperienceId;
        data["Where"] = this.Where;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["From"] = this.From;
        data["To"] = this.To;
        data["PersonId"] = this.PersonId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IExperience {
    ExperienceId?: number;
    Where?: string;
    Name?: string;
    Description?: string;
    From?: string;
    To?: string;
    PersonId?: number;
    Context?: Context;
}

export class ProductSubscriptionOption implements IProductSubscriptionOption {
    ProductSubscriptionOptionId?: number;
    Name?: string;
    EveryNrOfDays?: number;
    DayOfWeek?: ProductSubscriptionOptionDayOfWeek;
    CronExpression?: string;
    DelayBeforeStartAtLeastQtyDays?: number;
    IsActive?: boolean;
    DoCountPossibleChangeDateFromSpecifiedReferenceDate?: boolean;
    CountPossibleChangeDateFromReferenceDate?: Date;
    SuggestedChangeDates?: Date[];
    FirstpossibleSubscriptionChangeDate?: Date;

    constructor(data?: IProductSubscriptionOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ProductSubscriptionOptionId = data["ProductSubscriptionOptionId"];
            this.Name = data["Name"];
            this.EveryNrOfDays = data["EveryNrOfDays"];
            this.DayOfWeek = data["DayOfWeek"];
            this.CronExpression = data["CronExpression"];
            this.DelayBeforeStartAtLeastQtyDays = data["DelayBeforeStartAtLeastQtyDays"];
            this.IsActive = data["IsActive"];
            this.DoCountPossibleChangeDateFromSpecifiedReferenceDate = data["DoCountPossibleChangeDateFromSpecifiedReferenceDate"];
            this.CountPossibleChangeDateFromReferenceDate = data["CountPossibleChangeDateFromReferenceDate"] ? new Date(data["CountPossibleChangeDateFromReferenceDate"].toString()) : <any>undefined;
            if (data["SuggestedChangeDates"] && data["SuggestedChangeDates"].constructor === Array) {
                this.SuggestedChangeDates = [];
                for (let item of data["SuggestedChangeDates"])
                    this.SuggestedChangeDates.push(new Date(item));
            }
            this.FirstpossibleSubscriptionChangeDate = data["FirstpossibleSubscriptionChangeDate"] ? new Date(data["FirstpossibleSubscriptionChangeDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductSubscriptionOption {
        let result = new ProductSubscriptionOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProductSubscriptionOptionId"] = this.ProductSubscriptionOptionId;
        data["Name"] = this.Name;
        data["EveryNrOfDays"] = this.EveryNrOfDays;
        data["DayOfWeek"] = this.DayOfWeek;
        data["CronExpression"] = this.CronExpression;
        data["DelayBeforeStartAtLeastQtyDays"] = this.DelayBeforeStartAtLeastQtyDays;
        data["IsActive"] = this.IsActive;
        data["DoCountPossibleChangeDateFromSpecifiedReferenceDate"] = this.DoCountPossibleChangeDateFromSpecifiedReferenceDate;
        data["CountPossibleChangeDateFromReferenceDate"] = this.CountPossibleChangeDateFromReferenceDate ? this.CountPossibleChangeDateFromReferenceDate.toISOString() : <any>undefined;
        if (this.SuggestedChangeDates && this.SuggestedChangeDates.constructor === Array) {
            data["SuggestedChangeDates"] = [];
            for (let item of this.SuggestedChangeDates)
                data["SuggestedChangeDates"].push(item.toISOString());
        }
        data["FirstpossibleSubscriptionChangeDate"] = this.FirstpossibleSubscriptionChangeDate ? this.FirstpossibleSubscriptionChangeDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IProductSubscriptionOption {
    ProductSubscriptionOptionId?: number;
    Name?: string;
    EveryNrOfDays?: number;
    DayOfWeek?: ProductSubscriptionOptionDayOfWeek;
    CronExpression?: string;
    DelayBeforeStartAtLeastQtyDays?: number;
    IsActive?: boolean;
    DoCountPossibleChangeDateFromSpecifiedReferenceDate?: boolean;
    CountPossibleChangeDateFromReferenceDate?: Date;
    SuggestedChangeDates?: Date[];
    FirstpossibleSubscriptionChangeDate?: Date;
}

export class Subscription implements ISubscription {
    SubscriptionId?: number;
    StartDate?: Date;
    EndDate?: Date;
    Confirmed?: boolean;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    LastAddedOrderDeliveryDate?: Date;
    BuyOrderId?: string;
    PersonId?: number;
    PersonName?: string;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    ProductSubscriptionOptionId?: number;
    SubscriptionSerieId?: string;
    ProductSubscriptionOption?: ProductSubscriptionOption;
    SubscriptionProducts?: SubscriptionProduct[];
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    SocialSecurityNo?: string;
    ImageUrl?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    BusinessSocialSecurityNo?: string;
    BusinessName?: string;
    BusinessStreetName?: string;
    BusinessPostNo?: string;
    BusinessCity?: string;
    BranchOffice?: string;
    Department?: string;
    CellPhone?: string;
    Email?: string;
    ExtraEmail?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    TermsOfPaymentQtyDaysId?: number;
    Phone?: string;
    Doorcode?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    Reference?: string;
    ShippingReference?: string;
    OurPersonId?: number;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    ExternalSubscriptionId?: string;
    ExternalAddressSelector?: string;
    ExternalFortnoxCustomerNo?: string;
    ReferredByPersonId?: number;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    QtyRelatedDocuments?: number;
    PendingDelete?: boolean;
    Comment?: string;
    ShippingComment?: string;

    constructor(data?: ISubscription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SubscriptionId = data["SubscriptionId"];
            this.StartDate = data["StartDate"] ? new Date(data["StartDate"].toString()) : <any>undefined;
            this.EndDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.Confirmed = data["Confirmed"];
            this.Discount = data["Discount"];
            this.DiscountVat = data["DiscountVat"];
            this.DiscountInclVat = data["DiscountInclVat"];
            this.DiscountDescription = data["DiscountDescription"];
            this.LastAddedOrderDeliveryDate = data["LastAddedOrderDeliveryDate"] ? new Date(data["LastAddedOrderDeliveryDate"].toString()) : <any>undefined;
            this.BuyOrderId = data["BuyOrderId"];
            this.PersonId = data["PersonId"];
            this.PersonName = data["PersonName"];
            this.ShippingTag = data["ShippingTag"];
            this.OrderForShippingTag = data["OrderForShippingTag"];
            this.ProductSubscriptionOptionId = data["ProductSubscriptionOptionId"];
            this.SubscriptionSerieId = data["SubscriptionSerieId"];
            this.ProductSubscriptionOption = data["ProductSubscriptionOption"] ? ProductSubscriptionOption.fromJS(data["ProductSubscriptionOption"]) : <any>undefined;
            if (data["SubscriptionProducts"] && data["SubscriptionProducts"].constructor === Array) {
                this.SubscriptionProducts = [];
                for (let item of data["SubscriptionProducts"])
                    this.SubscriptionProducts.push(SubscriptionProduct.fromJS(item));
            }
            this.TotalValueExclVat = data["TotalValueExclVat"];
            this.TotalValueInclVat = data["TotalValueInclVat"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.ImageUrl = data["ImageUrl"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.ShippingCountry = data["ShippingCountry"];
            this.BusinessSocialSecurityNo = data["BusinessSocialSecurityNo"];
            this.BusinessName = data["BusinessName"];
            this.BusinessStreetName = data["BusinessStreetName"];
            this.BusinessPostNo = data["BusinessPostNo"];
            this.BusinessCity = data["BusinessCity"];
            this.BranchOffice = data["BranchOffice"];
            this.Department = data["Department"];
            this.CellPhone = data["CellPhone"];
            this.Email = data["Email"];
            this.ExtraEmail = data["ExtraEmail"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.WayOfDeliveryId = data["WayOfDeliveryId"];
            this.OurReference = data["OurReference"];
            this.YourReference = data["YourReference"];
            this.TermsOfPaymentQtyDaysId = data["TermsOfPaymentQtyDaysId"];
            this.Phone = data["Phone"];
            this.Doorcode = data["Doorcode"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.Reference = data["Reference"];
            this.ShippingReference = data["ShippingReference"];
            this.OurPersonId = data["OurPersonId"];
            this.ShippingLongitude = data["ShippingLongitude"];
            this.ShippingLatitude = data["ShippingLatitude"];
            this.ExternalSubscriptionId = data["ExternalSubscriptionId"];
            this.ExternalAddressSelector = data["ExternalAddressSelector"];
            this.ExternalFortnoxCustomerNo = data["ExternalFortnoxCustomerNo"];
            this.ReferredByPersonId = data["ReferredByPersonId"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.ResponsibleName = data["ResponsibleName"];
            this.QtyRelatedDocuments = data["QtyRelatedDocuments"];
            this.PendingDelete = data["PendingDelete"];
            this.Comment = data["Comment"];
            this.ShippingComment = data["ShippingComment"];
        }
    }

    static fromJS(data: any): Subscription {
        let result = new Subscription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SubscriptionId"] = this.SubscriptionId;
        data["StartDate"] = this.StartDate ? this.StartDate.toISOString() : <any>undefined;
        data["EndDate"] = this.EndDate ? this.EndDate.toISOString() : <any>undefined;
        data["Confirmed"] = this.Confirmed;
        data["Discount"] = this.Discount;
        data["DiscountVat"] = this.DiscountVat;
        data["DiscountInclVat"] = this.DiscountInclVat;
        data["DiscountDescription"] = this.DiscountDescription;
        data["LastAddedOrderDeliveryDate"] = this.LastAddedOrderDeliveryDate ? this.LastAddedOrderDeliveryDate.toISOString() : <any>undefined;
        data["BuyOrderId"] = this.BuyOrderId;
        data["PersonId"] = this.PersonId;
        data["PersonName"] = this.PersonName;
        data["ShippingTag"] = this.ShippingTag;
        data["OrderForShippingTag"] = this.OrderForShippingTag;
        data["ProductSubscriptionOptionId"] = this.ProductSubscriptionOptionId;
        data["SubscriptionSerieId"] = this.SubscriptionSerieId;
        data["ProductSubscriptionOption"] = this.ProductSubscriptionOption ? this.ProductSubscriptionOption.toJSON() : <any>undefined;
        if (this.SubscriptionProducts && this.SubscriptionProducts.constructor === Array) {
            data["SubscriptionProducts"] = [];
            for (let item of this.SubscriptionProducts)
                data["SubscriptionProducts"].push(item.toJSON());
        }
        data["TotalValueExclVat"] = this.TotalValueExclVat;
        data["TotalValueInclVat"] = this.TotalValueInclVat;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["ImageUrl"] = this.ImageUrl;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["ShippingCountry"] = this.ShippingCountry;
        data["BusinessSocialSecurityNo"] = this.BusinessSocialSecurityNo;
        data["BusinessName"] = this.BusinessName;
        data["BusinessStreetName"] = this.BusinessStreetName;
        data["BusinessPostNo"] = this.BusinessPostNo;
        data["BusinessCity"] = this.BusinessCity;
        data["BranchOffice"] = this.BranchOffice;
        data["Department"] = this.Department;
        data["CellPhone"] = this.CellPhone;
        data["Email"] = this.Email;
        data["ExtraEmail"] = this.ExtraEmail;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["WayOfDeliveryId"] = this.WayOfDeliveryId;
        data["OurReference"] = this.OurReference;
        data["YourReference"] = this.YourReference;
        data["TermsOfPaymentQtyDaysId"] = this.TermsOfPaymentQtyDaysId;
        data["Phone"] = this.Phone;
        data["Doorcode"] = this.Doorcode;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["Reference"] = this.Reference;
        data["ShippingReference"] = this.ShippingReference;
        data["OurPersonId"] = this.OurPersonId;
        data["ShippingLongitude"] = this.ShippingLongitude;
        data["ShippingLatitude"] = this.ShippingLatitude;
        data["ExternalSubscriptionId"] = this.ExternalSubscriptionId;
        data["ExternalAddressSelector"] = this.ExternalAddressSelector;
        data["ExternalFortnoxCustomerNo"] = this.ExternalFortnoxCustomerNo;
        data["ReferredByPersonId"] = this.ReferredByPersonId;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["ResponsibleName"] = this.ResponsibleName;
        data["QtyRelatedDocuments"] = this.QtyRelatedDocuments;
        data["PendingDelete"] = this.PendingDelete;
        data["Comment"] = this.Comment;
        data["ShippingComment"] = this.ShippingComment;
        return data;
    }
}

export interface ISubscription {
    SubscriptionId?: number;
    StartDate?: Date;
    EndDate?: Date;
    Confirmed?: boolean;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    LastAddedOrderDeliveryDate?: Date;
    BuyOrderId?: string;
    PersonId?: number;
    PersonName?: string;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    ProductSubscriptionOptionId?: number;
    SubscriptionSerieId?: string;
    ProductSubscriptionOption?: ProductSubscriptionOption;
    SubscriptionProducts?: SubscriptionProduct[];
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    SocialSecurityNo?: string;
    ImageUrl?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    BusinessSocialSecurityNo?: string;
    BusinessName?: string;
    BusinessStreetName?: string;
    BusinessPostNo?: string;
    BusinessCity?: string;
    BranchOffice?: string;
    Department?: string;
    CellPhone?: string;
    Email?: string;
    ExtraEmail?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    TermsOfPaymentQtyDaysId?: number;
    Phone?: string;
    Doorcode?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    Reference?: string;
    ShippingReference?: string;
    OurPersonId?: number;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    ExternalSubscriptionId?: string;
    ExternalAddressSelector?: string;
    ExternalFortnoxCustomerNo?: string;
    ReferredByPersonId?: number;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    QtyRelatedDocuments?: number;
    PendingDelete?: boolean;
    Comment?: string;
    ShippingComment?: string;
}

export class SubscriptionProduct implements ISubscriptionProduct {
    SubscriptionId?: number;
    ProductId?: number;
    ProductName?: string;
    Qty?: number;
    DelayQtyDays?: number;
    CustomProductId?: number;
    Name?: string;
    DisplayName?: string;
    ShortName?: string;
    ShortDescription?: string;
    ImageUrl?: string;
    Vat?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    WeightDescription?: string;
    BuyPrice?: number;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    CategoryId?: number;
    MetaHashTags?: string;
    MetaHashTagsArray?: string[];
    CountryId?: string;
    CurrencyId?: string;
    QtyDeliveries?: number;
    DealPrice?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    TotalVat?: number;

    constructor(data?: ISubscriptionProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SubscriptionId = data["SubscriptionId"];
            this.ProductId = data["ProductId"];
            this.ProductName = data["ProductName"];
            this.Qty = data["Qty"];
            this.DelayQtyDays = data["DelayQtyDays"];
            this.CustomProductId = data["CustomProductId"];
            this.Name = data["Name"];
            this.DisplayName = data["DisplayName"];
            this.ShortName = data["ShortName"];
            this.ShortDescription = data["ShortDescription"];
            this.ImageUrl = data["ImageUrl"];
            this.Vat = data["Vat"];
            this.Uom = data["Uom"];
            this.SalesQuantity = data["SalesQuantity"];
            this.PackageSize = data["PackageSize"];
            this.WeightDescription = data["WeightDescription"];
            this.BuyPrice = data["BuyPrice"];
            this.Size = data["Size"];
            this.Color = data["Color"];
            this.SellingPrice = data["SellingPrice"];
            this.GroupedByProductId = data["GroupedByProductId"];
            this.CategoryId = data["CategoryId"];
            this.MetaHashTags = data["MetaHashTags"];
            if (data["MetaHashTagsArray"] && data["MetaHashTagsArray"].constructor === Array) {
                this.MetaHashTagsArray = [];
                for (let item of data["MetaHashTagsArray"])
                    this.MetaHashTagsArray.push(item);
            }
            this.CountryId = data["CountryId"];
            this.CurrencyId = data["CurrencyId"];
            this.QtyDeliveries = data["QtyDeliveries"];
            this.DealPrice = data["DealPrice"];
            this.CurrentSellingPrice = data["CurrentSellingPrice"];
            this.CurrentSellingPriceInclVat = data["CurrentSellingPriceInclVat"];
            this.TotalVat = data["TotalVat"];
        }
    }

    static fromJS(data: any): SubscriptionProduct {
        let result = new SubscriptionProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SubscriptionId"] = this.SubscriptionId;
        data["ProductId"] = this.ProductId;
        data["ProductName"] = this.ProductName;
        data["Qty"] = this.Qty;
        data["DelayQtyDays"] = this.DelayQtyDays;
        data["CustomProductId"] = this.CustomProductId;
        data["Name"] = this.Name;
        data["DisplayName"] = this.DisplayName;
        data["ShortName"] = this.ShortName;
        data["ShortDescription"] = this.ShortDescription;
        data["ImageUrl"] = this.ImageUrl;
        data["Vat"] = this.Vat;
        data["Uom"] = this.Uom;
        data["SalesQuantity"] = this.SalesQuantity;
        data["PackageSize"] = this.PackageSize;
        data["WeightDescription"] = this.WeightDescription;
        data["BuyPrice"] = this.BuyPrice;
        data["Size"] = this.Size;
        data["Color"] = this.Color;
        data["SellingPrice"] = this.SellingPrice;
        data["GroupedByProductId"] = this.GroupedByProductId;
        data["CategoryId"] = this.CategoryId;
        data["MetaHashTags"] = this.MetaHashTags;
        if (this.MetaHashTagsArray && this.MetaHashTagsArray.constructor === Array) {
            data["MetaHashTagsArray"] = [];
            for (let item of this.MetaHashTagsArray)
                data["MetaHashTagsArray"].push(item);
        }
        data["CountryId"] = this.CountryId;
        data["CurrencyId"] = this.CurrencyId;
        data["QtyDeliveries"] = this.QtyDeliveries;
        data["DealPrice"] = this.DealPrice;
        data["CurrentSellingPrice"] = this.CurrentSellingPrice;
        data["CurrentSellingPriceInclVat"] = this.CurrentSellingPriceInclVat;
        data["TotalVat"] = this.TotalVat;
        return data;
    }
}

export interface ISubscriptionProduct {
    SubscriptionId?: number;
    ProductId?: number;
    ProductName?: string;
    Qty?: number;
    DelayQtyDays?: number;
    CustomProductId?: number;
    Name?: string;
    DisplayName?: string;
    ShortName?: string;
    ShortDescription?: string;
    ImageUrl?: string;
    Vat?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    WeightDescription?: string;
    BuyPrice?: number;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    CategoryId?: number;
    MetaHashTags?: string;
    MetaHashTagsArray?: string[];
    CountryId?: string;
    CurrencyId?: string;
    QtyDeliveries?: number;
    DealPrice?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    TotalVat?: number;
}

export class WorkItem implements IWorkItem {
    WorkItemId?: number;
    FromDate?: Date;
    ToDate?: Date;
    WeekNr?: number;
    YearNr?: number;
    WeekName?: string;
    TotalQtyTimeReportHours?: number;
    SplitWithPersonId?: number;
    SplitWithName?: string;
    SplitSharePercentage?: number;
    SellingPrice?: number;
    LivingDebiting?: number;
    TravelDebiting?: number;
    OtherDebiting?: number;
    Vat?: number;
    WorkCompensation?: number;
    OtherWorkCompensation?: number;
    LivingCompensation?: number;
    TravelCompensation?: number;
    OtherCompensation?: number;
    OtherCompensationTaxable?: number;
    MileageQty?: number;
    MileagePricePerQty?: number;
    MileageCompensation?: number;
    LivingCost?: number;
    TravelCost?: number;
    CarRentCost?: number;
    OtherCost?: number;
    BenefitTravel?: number;
    BenefitLiving?: number;
    BenefitCarRent?: number;
    BenefitTaxation?: number;
    CarRentModelNumber?: string;
    ServicePensionPercentage?: number;
    ServicePension?: number;
    SalaryExchange?: number;
    IsCompensationPayed?: boolean;
    CompensationPayedDate?: Date;
    CompensationPayedBy?: string;
    IsInvoiceCreated?: boolean;
    InvoiceCreatedDate?: Date;
    InvoiceCreatedBy?: string;
    InvoicePayed?: boolean;
    InvoicePayedDate?: Date;
    InvoiceId?: number;
    ExternalInvoiceId?: string;
    HaveOneOrMoreCandidates?: boolean;
    IsTimeReported?: boolean;
    IsTimeReportedDate?: Date;
    IsTimeReportedBy?: string;
    IsCustomerAttested?: boolean;
    IsCustomerAttestedDate?: Date;
    IsCustomerAttestedBy?: string;
    IsAdminAttested?: boolean;
    IsAdminAttestedDate?: Date;
    IsAdminAttestedBy?: string;
    Finished?: boolean;
    FinishedDate?: Date;
    FinishedBy?: string;
    QtyRelatedDocuments?: number;
    IsCorrectionForWorkItemId?: number;
    WorkCompensationExclVacationCompensation?: number;
    VacationCompensation?: number;
    WorkCompensationInclVacationCompensation?: number;
    TotalCompensation?: number;
    CompensationSocCost?: number;
    BenefitTravelSocCost?: number;
    BenefitLivingSocCost?: number;
    BenefitCarRentSocCost?: number;
    BenefitTaxationSocCost?: number;
    TotalSocialCosts?: number;
    TotalCompensationCostInclSoc?: number;
    SalaryTax?: number;
    TotalOtherCost?: number;
    FullCost?: number;
    WorkDebiting?: number;
    ExtraDebiting?: number;
    TotalDebiting?: number;
    Margin?: number;
    MarginPercentage?: number;
    Amortized?: number;
    IsLockedForChange?: boolean;
    DescriptionInternal?: string;
    ProjectId?: number;
    ProjectName?: string;
    EmployerPersonId?: number;
    EmployerName?: string;
    LocationAddressId?: string;
    LocationAddress?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    EmployerContactPersonId?: string;
    EmployerContactPersonFirstName?: string;
    EmployerContactPersonLastName?: string;
    EmployerEmail?: string;
    EmployerCellPhone?: string;
    EmployerPhone?: string;
    WorkerPersonId?: number;
    WorkerName?: string;
    WorkerCellPhone?: string;
    WorkerPhone?: string;
    WorkerEmail?: string;
    WorkerSocialSecurityNo?: string;
    WorkerAssignedDate?: Date;
    WorkerAssignedBy?: string;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    Public?: boolean;
    AreaOfExpertise?: string;
    CountyCouncilName?: string;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SalaryTaxMultiplier?: number;
    CostCenter?: string;
    WorkerCostCenter?: string;
    ResponsibleCostCenter?: string;
    ExternalProjectNo?: string;
    ManualCompensation?: boolean;
    ManualInvoiceValue?: boolean;
    CreatedDate?: Date;
    CustomerOrderNo?: string;
    KnowledgeOfMedicalRecordName?: string;
    TagNamesJsonStringArray?: string;
    TermsOfPaymentId?: string;
    YourReference?: string;
    DefaultPriceProfileId?: number;
    DefaultPriceProfileName?: string;
    WorkSerieId?: string;
    BusinessUnitId?: string;
    TeamId?: string;
    IsStandByShift?: boolean;
    Context?: Context;

    constructor(data?: IWorkItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WorkItemId = data["WorkItemId"];
            this.FromDate = data["FromDate"] ? new Date(data["FromDate"].toString()) : <any>undefined;
            this.ToDate = data["ToDate"] ? new Date(data["ToDate"].toString()) : <any>undefined;
            this.WeekNr = data["WeekNr"];
            this.YearNr = data["YearNr"];
            this.WeekName = data["WeekName"];
            this.TotalQtyTimeReportHours = data["TotalQtyTimeReportHours"];
            this.SplitWithPersonId = data["SplitWithPersonId"];
            this.SplitWithName = data["SplitWithName"];
            this.SplitSharePercentage = data["SplitSharePercentage"];
            this.SellingPrice = data["SellingPrice"];
            this.LivingDebiting = data["LivingDebiting"];
            this.TravelDebiting = data["TravelDebiting"];
            this.OtherDebiting = data["OtherDebiting"];
            this.Vat = data["Vat"];
            this.WorkCompensation = data["WorkCompensation"];
            this.OtherWorkCompensation = data["OtherWorkCompensation"];
            this.LivingCompensation = data["LivingCompensation"];
            this.TravelCompensation = data["TravelCompensation"];
            this.OtherCompensation = data["OtherCompensation"];
            this.OtherCompensationTaxable = data["OtherCompensationTaxable"];
            this.MileageQty = data["MileageQty"];
            this.MileagePricePerQty = data["MileagePricePerQty"];
            this.MileageCompensation = data["MileageCompensation"];
            this.LivingCost = data["LivingCost"];
            this.TravelCost = data["TravelCost"];
            this.CarRentCost = data["CarRentCost"];
            this.OtherCost = data["OtherCost"];
            this.BenefitTravel = data["BenefitTravel"];
            this.BenefitLiving = data["BenefitLiving"];
            this.BenefitCarRent = data["BenefitCarRent"];
            this.BenefitTaxation = data["BenefitTaxation"];
            this.CarRentModelNumber = data["CarRentModelNumber"];
            this.ServicePensionPercentage = data["ServicePensionPercentage"];
            this.ServicePension = data["ServicePension"];
            this.SalaryExchange = data["SalaryExchange"];
            this.IsCompensationPayed = data["IsCompensationPayed"];
            this.CompensationPayedDate = data["CompensationPayedDate"] ? new Date(data["CompensationPayedDate"].toString()) : <any>undefined;
            this.CompensationPayedBy = data["CompensationPayedBy"];
            this.IsInvoiceCreated = data["IsInvoiceCreated"];
            this.InvoiceCreatedDate = data["InvoiceCreatedDate"] ? new Date(data["InvoiceCreatedDate"].toString()) : <any>undefined;
            this.InvoiceCreatedBy = data["InvoiceCreatedBy"];
            this.InvoicePayed = data["InvoicePayed"];
            this.InvoicePayedDate = data["InvoicePayedDate"] ? new Date(data["InvoicePayedDate"].toString()) : <any>undefined;
            this.InvoiceId = data["InvoiceId"];
            this.ExternalInvoiceId = data["ExternalInvoiceId"];
            this.HaveOneOrMoreCandidates = data["HaveOneOrMoreCandidates"];
            this.IsTimeReported = data["IsTimeReported"];
            this.IsTimeReportedDate = data["IsTimeReportedDate"] ? new Date(data["IsTimeReportedDate"].toString()) : <any>undefined;
            this.IsTimeReportedBy = data["IsTimeReportedBy"];
            this.IsCustomerAttested = data["IsCustomerAttested"];
            this.IsCustomerAttestedDate = data["IsCustomerAttestedDate"] ? new Date(data["IsCustomerAttestedDate"].toString()) : <any>undefined;
            this.IsCustomerAttestedBy = data["IsCustomerAttestedBy"];
            this.IsAdminAttested = data["IsAdminAttested"];
            this.IsAdminAttestedDate = data["IsAdminAttestedDate"] ? new Date(data["IsAdminAttestedDate"].toString()) : <any>undefined;
            this.IsAdminAttestedBy = data["IsAdminAttestedBy"];
            this.Finished = data["Finished"];
            this.FinishedDate = data["FinishedDate"] ? new Date(data["FinishedDate"].toString()) : <any>undefined;
            this.FinishedBy = data["FinishedBy"];
            this.QtyRelatedDocuments = data["QtyRelatedDocuments"];
            this.IsCorrectionForWorkItemId = data["IsCorrectionForWorkItemId"];
            this.WorkCompensationExclVacationCompensation = data["WorkCompensationExclVacationCompensation"];
            this.VacationCompensation = data["VacationCompensation"];
            this.WorkCompensationInclVacationCompensation = data["WorkCompensationInclVacationCompensation"];
            this.TotalCompensation = data["TotalCompensation"];
            this.CompensationSocCost = data["CompensationSocCost"];
            this.BenefitTravelSocCost = data["BenefitTravelSocCost"];
            this.BenefitLivingSocCost = data["BenefitLivingSocCost"];
            this.BenefitCarRentSocCost = data["BenefitCarRentSocCost"];
            this.BenefitTaxationSocCost = data["BenefitTaxationSocCost"];
            this.TotalSocialCosts = data["TotalSocialCosts"];
            this.TotalCompensationCostInclSoc = data["TotalCompensationCostInclSoc"];
            this.SalaryTax = data["SalaryTax"];
            this.TotalOtherCost = data["TotalOtherCost"];
            this.FullCost = data["FullCost"];
            this.WorkDebiting = data["WorkDebiting"];
            this.ExtraDebiting = data["ExtraDebiting"];
            this.TotalDebiting = data["TotalDebiting"];
            this.Margin = data["Margin"];
            this.MarginPercentage = data["MarginPercentage"];
            this.Amortized = data["Amortized"];
            this.IsLockedForChange = data["IsLockedForChange"];
            this.DescriptionInternal = data["DescriptionInternal"];
            this.ProjectId = data["ProjectId"];
            this.ProjectName = data["ProjectName"];
            this.EmployerPersonId = data["EmployerPersonId"];
            this.EmployerName = data["EmployerName"];
            this.LocationAddressId = data["LocationAddressId"];
            this.LocationAddress = data["LocationAddress"];
            this.EmployerBranchOffice = data["EmployerBranchOffice"];
            this.EmployerDepartment = data["EmployerDepartment"];
            this.EmployerContactPersonId = data["EmployerContactPersonId"];
            this.EmployerContactPersonFirstName = data["EmployerContactPersonFirstName"];
            this.EmployerContactPersonLastName = data["EmployerContactPersonLastName"];
            this.EmployerEmail = data["EmployerEmail"];
            this.EmployerCellPhone = data["EmployerCellPhone"];
            this.EmployerPhone = data["EmployerPhone"];
            this.WorkerPersonId = data["WorkerPersonId"];
            this.WorkerName = data["WorkerName"];
            this.WorkerCellPhone = data["WorkerCellPhone"];
            this.WorkerPhone = data["WorkerPhone"];
            this.WorkerEmail = data["WorkerEmail"];
            this.WorkerSocialSecurityNo = data["WorkerSocialSecurityNo"];
            this.WorkerAssignedDate = data["WorkerAssignedDate"] ? new Date(data["WorkerAssignedDate"].toString()) : <any>undefined;
            this.WorkerAssignedBy = data["WorkerAssignedBy"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.ResponsibleName = data["ResponsibleName"];
            this.Public = data["Public"];
            this.AreaOfExpertise = data["AreaOfExpertise"];
            this.CountyCouncilName = data["CountyCouncilName"];
            this.WorkCompensationMultiplierId = data["WorkCompensationMultiplierId"];
            this.WorkCompensationMultiplierValue = data["WorkCompensationMultiplierValue"];
            this.VacationPayMultiplier = data["VacationPayMultiplier"];
            this.SalaryTaxMultiplier = data["SalaryTaxMultiplier"];
            this.CostCenter = data["CostCenter"];
            this.WorkerCostCenter = data["WorkerCostCenter"];
            this.ResponsibleCostCenter = data["ResponsibleCostCenter"];
            this.ExternalProjectNo = data["ExternalProjectNo"];
            this.ManualCompensation = data["ManualCompensation"];
            this.ManualInvoiceValue = data["ManualInvoiceValue"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.CustomerOrderNo = data["CustomerOrderNo"];
            this.KnowledgeOfMedicalRecordName = data["KnowledgeOfMedicalRecordName"];
            this.TagNamesJsonStringArray = data["TagNamesJsonStringArray"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.YourReference = data["YourReference"];
            this.DefaultPriceProfileId = data["DefaultPriceProfileId"];
            this.DefaultPriceProfileName = data["DefaultPriceProfileName"];
            this.WorkSerieId = data["WorkSerieId"];
            this.BusinessUnitId = data["BusinessUnitId"];
            this.TeamId = data["TeamId"];
            this.IsStandByShift = data["IsStandByShift"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkItem {
        let result = new WorkItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WorkItemId"] = this.WorkItemId;
        data["FromDate"] = this.FromDate ? this.FromDate.toISOString() : <any>undefined;
        data["ToDate"] = this.ToDate ? this.ToDate.toISOString() : <any>undefined;
        data["WeekNr"] = this.WeekNr;
        data["YearNr"] = this.YearNr;
        data["WeekName"] = this.WeekName;
        data["TotalQtyTimeReportHours"] = this.TotalQtyTimeReportHours;
        data["SplitWithPersonId"] = this.SplitWithPersonId;
        data["SplitWithName"] = this.SplitWithName;
        data["SplitSharePercentage"] = this.SplitSharePercentage;
        data["SellingPrice"] = this.SellingPrice;
        data["LivingDebiting"] = this.LivingDebiting;
        data["TravelDebiting"] = this.TravelDebiting;
        data["OtherDebiting"] = this.OtherDebiting;
        data["Vat"] = this.Vat;
        data["WorkCompensation"] = this.WorkCompensation;
        data["OtherWorkCompensation"] = this.OtherWorkCompensation;
        data["LivingCompensation"] = this.LivingCompensation;
        data["TravelCompensation"] = this.TravelCompensation;
        data["OtherCompensation"] = this.OtherCompensation;
        data["OtherCompensationTaxable"] = this.OtherCompensationTaxable;
        data["MileageQty"] = this.MileageQty;
        data["MileagePricePerQty"] = this.MileagePricePerQty;
        data["MileageCompensation"] = this.MileageCompensation;
        data["LivingCost"] = this.LivingCost;
        data["TravelCost"] = this.TravelCost;
        data["CarRentCost"] = this.CarRentCost;
        data["OtherCost"] = this.OtherCost;
        data["BenefitTravel"] = this.BenefitTravel;
        data["BenefitLiving"] = this.BenefitLiving;
        data["BenefitCarRent"] = this.BenefitCarRent;
        data["BenefitTaxation"] = this.BenefitTaxation;
        data["CarRentModelNumber"] = this.CarRentModelNumber;
        data["ServicePensionPercentage"] = this.ServicePensionPercentage;
        data["ServicePension"] = this.ServicePension;
        data["SalaryExchange"] = this.SalaryExchange;
        data["IsCompensationPayed"] = this.IsCompensationPayed;
        data["CompensationPayedDate"] = this.CompensationPayedDate ? this.CompensationPayedDate.toISOString() : <any>undefined;
        data["CompensationPayedBy"] = this.CompensationPayedBy;
        data["IsInvoiceCreated"] = this.IsInvoiceCreated;
        data["InvoiceCreatedDate"] = this.InvoiceCreatedDate ? this.InvoiceCreatedDate.toISOString() : <any>undefined;
        data["InvoiceCreatedBy"] = this.InvoiceCreatedBy;
        data["InvoicePayed"] = this.InvoicePayed;
        data["InvoicePayedDate"] = this.InvoicePayedDate ? this.InvoicePayedDate.toISOString() : <any>undefined;
        data["InvoiceId"] = this.InvoiceId;
        data["ExternalInvoiceId"] = this.ExternalInvoiceId;
        data["HaveOneOrMoreCandidates"] = this.HaveOneOrMoreCandidates;
        data["IsTimeReported"] = this.IsTimeReported;
        data["IsTimeReportedDate"] = this.IsTimeReportedDate ? this.IsTimeReportedDate.toISOString() : <any>undefined;
        data["IsTimeReportedBy"] = this.IsTimeReportedBy;
        data["IsCustomerAttested"] = this.IsCustomerAttested;
        data["IsCustomerAttestedDate"] = this.IsCustomerAttestedDate ? this.IsCustomerAttestedDate.toISOString() : <any>undefined;
        data["IsCustomerAttestedBy"] = this.IsCustomerAttestedBy;
        data["IsAdminAttested"] = this.IsAdminAttested;
        data["IsAdminAttestedDate"] = this.IsAdminAttestedDate ? this.IsAdminAttestedDate.toISOString() : <any>undefined;
        data["IsAdminAttestedBy"] = this.IsAdminAttestedBy;
        data["Finished"] = this.Finished;
        data["FinishedDate"] = this.FinishedDate ? this.FinishedDate.toISOString() : <any>undefined;
        data["FinishedBy"] = this.FinishedBy;
        data["QtyRelatedDocuments"] = this.QtyRelatedDocuments;
        data["IsCorrectionForWorkItemId"] = this.IsCorrectionForWorkItemId;
        data["WorkCompensationExclVacationCompensation"] = this.WorkCompensationExclVacationCompensation;
        data["VacationCompensation"] = this.VacationCompensation;
        data["WorkCompensationInclVacationCompensation"] = this.WorkCompensationInclVacationCompensation;
        data["TotalCompensation"] = this.TotalCompensation;
        data["CompensationSocCost"] = this.CompensationSocCost;
        data["BenefitTravelSocCost"] = this.BenefitTravelSocCost;
        data["BenefitLivingSocCost"] = this.BenefitLivingSocCost;
        data["BenefitCarRentSocCost"] = this.BenefitCarRentSocCost;
        data["BenefitTaxationSocCost"] = this.BenefitTaxationSocCost;
        data["TotalSocialCosts"] = this.TotalSocialCosts;
        data["TotalCompensationCostInclSoc"] = this.TotalCompensationCostInclSoc;
        data["SalaryTax"] = this.SalaryTax;
        data["TotalOtherCost"] = this.TotalOtherCost;
        data["FullCost"] = this.FullCost;
        data["WorkDebiting"] = this.WorkDebiting;
        data["ExtraDebiting"] = this.ExtraDebiting;
        data["TotalDebiting"] = this.TotalDebiting;
        data["Margin"] = this.Margin;
        data["MarginPercentage"] = this.MarginPercentage;
        data["Amortized"] = this.Amortized;
        data["IsLockedForChange"] = this.IsLockedForChange;
        data["DescriptionInternal"] = this.DescriptionInternal;
        data["ProjectId"] = this.ProjectId;
        data["ProjectName"] = this.ProjectName;
        data["EmployerPersonId"] = this.EmployerPersonId;
        data["EmployerName"] = this.EmployerName;
        data["LocationAddressId"] = this.LocationAddressId;
        data["LocationAddress"] = this.LocationAddress;
        data["EmployerBranchOffice"] = this.EmployerBranchOffice;
        data["EmployerDepartment"] = this.EmployerDepartment;
        data["EmployerContactPersonId"] = this.EmployerContactPersonId;
        data["EmployerContactPersonFirstName"] = this.EmployerContactPersonFirstName;
        data["EmployerContactPersonLastName"] = this.EmployerContactPersonLastName;
        data["EmployerEmail"] = this.EmployerEmail;
        data["EmployerCellPhone"] = this.EmployerCellPhone;
        data["EmployerPhone"] = this.EmployerPhone;
        data["WorkerPersonId"] = this.WorkerPersonId;
        data["WorkerName"] = this.WorkerName;
        data["WorkerCellPhone"] = this.WorkerCellPhone;
        data["WorkerPhone"] = this.WorkerPhone;
        data["WorkerEmail"] = this.WorkerEmail;
        data["WorkerSocialSecurityNo"] = this.WorkerSocialSecurityNo;
        data["WorkerAssignedDate"] = this.WorkerAssignedDate ? this.WorkerAssignedDate.toISOString() : <any>undefined;
        data["WorkerAssignedBy"] = this.WorkerAssignedBy;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["ResponsibleName"] = this.ResponsibleName;
        data["Public"] = this.Public;
        data["AreaOfExpertise"] = this.AreaOfExpertise;
        data["CountyCouncilName"] = this.CountyCouncilName;
        data["WorkCompensationMultiplierId"] = this.WorkCompensationMultiplierId;
        data["WorkCompensationMultiplierValue"] = this.WorkCompensationMultiplierValue;
        data["VacationPayMultiplier"] = this.VacationPayMultiplier;
        data["SalaryTaxMultiplier"] = this.SalaryTaxMultiplier;
        data["CostCenter"] = this.CostCenter;
        data["WorkerCostCenter"] = this.WorkerCostCenter;
        data["ResponsibleCostCenter"] = this.ResponsibleCostCenter;
        data["ExternalProjectNo"] = this.ExternalProjectNo;
        data["ManualCompensation"] = this.ManualCompensation;
        data["ManualInvoiceValue"] = this.ManualInvoiceValue;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["CustomerOrderNo"] = this.CustomerOrderNo;
        data["KnowledgeOfMedicalRecordName"] = this.KnowledgeOfMedicalRecordName;
        data["TagNamesJsonStringArray"] = this.TagNamesJsonStringArray;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["YourReference"] = this.YourReference;
        data["DefaultPriceProfileId"] = this.DefaultPriceProfileId;
        data["DefaultPriceProfileName"] = this.DefaultPriceProfileName;
        data["WorkSerieId"] = this.WorkSerieId;
        data["BusinessUnitId"] = this.BusinessUnitId;
        data["TeamId"] = this.TeamId;
        data["IsStandByShift"] = this.IsStandByShift;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkItem {
    WorkItemId?: number;
    FromDate?: Date;
    ToDate?: Date;
    WeekNr?: number;
    YearNr?: number;
    WeekName?: string;
    TotalQtyTimeReportHours?: number;
    SplitWithPersonId?: number;
    SplitWithName?: string;
    SplitSharePercentage?: number;
    SellingPrice?: number;
    LivingDebiting?: number;
    TravelDebiting?: number;
    OtherDebiting?: number;
    Vat?: number;
    WorkCompensation?: number;
    OtherWorkCompensation?: number;
    LivingCompensation?: number;
    TravelCompensation?: number;
    OtherCompensation?: number;
    OtherCompensationTaxable?: number;
    MileageQty?: number;
    MileagePricePerQty?: number;
    MileageCompensation?: number;
    LivingCost?: number;
    TravelCost?: number;
    CarRentCost?: number;
    OtherCost?: number;
    BenefitTravel?: number;
    BenefitLiving?: number;
    BenefitCarRent?: number;
    BenefitTaxation?: number;
    CarRentModelNumber?: string;
    ServicePensionPercentage?: number;
    ServicePension?: number;
    SalaryExchange?: number;
    IsCompensationPayed?: boolean;
    CompensationPayedDate?: Date;
    CompensationPayedBy?: string;
    IsInvoiceCreated?: boolean;
    InvoiceCreatedDate?: Date;
    InvoiceCreatedBy?: string;
    InvoicePayed?: boolean;
    InvoicePayedDate?: Date;
    InvoiceId?: number;
    ExternalInvoiceId?: string;
    HaveOneOrMoreCandidates?: boolean;
    IsTimeReported?: boolean;
    IsTimeReportedDate?: Date;
    IsTimeReportedBy?: string;
    IsCustomerAttested?: boolean;
    IsCustomerAttestedDate?: Date;
    IsCustomerAttestedBy?: string;
    IsAdminAttested?: boolean;
    IsAdminAttestedDate?: Date;
    IsAdminAttestedBy?: string;
    Finished?: boolean;
    FinishedDate?: Date;
    FinishedBy?: string;
    QtyRelatedDocuments?: number;
    IsCorrectionForWorkItemId?: number;
    WorkCompensationExclVacationCompensation?: number;
    VacationCompensation?: number;
    WorkCompensationInclVacationCompensation?: number;
    TotalCompensation?: number;
    CompensationSocCost?: number;
    BenefitTravelSocCost?: number;
    BenefitLivingSocCost?: number;
    BenefitCarRentSocCost?: number;
    BenefitTaxationSocCost?: number;
    TotalSocialCosts?: number;
    TotalCompensationCostInclSoc?: number;
    SalaryTax?: number;
    TotalOtherCost?: number;
    FullCost?: number;
    WorkDebiting?: number;
    ExtraDebiting?: number;
    TotalDebiting?: number;
    Margin?: number;
    MarginPercentage?: number;
    Amortized?: number;
    IsLockedForChange?: boolean;
    DescriptionInternal?: string;
    ProjectId?: number;
    ProjectName?: string;
    EmployerPersonId?: number;
    EmployerName?: string;
    LocationAddressId?: string;
    LocationAddress?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    EmployerContactPersonId?: string;
    EmployerContactPersonFirstName?: string;
    EmployerContactPersonLastName?: string;
    EmployerEmail?: string;
    EmployerCellPhone?: string;
    EmployerPhone?: string;
    WorkerPersonId?: number;
    WorkerName?: string;
    WorkerCellPhone?: string;
    WorkerPhone?: string;
    WorkerEmail?: string;
    WorkerSocialSecurityNo?: string;
    WorkerAssignedDate?: Date;
    WorkerAssignedBy?: string;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    Public?: boolean;
    AreaOfExpertise?: string;
    CountyCouncilName?: string;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SalaryTaxMultiplier?: number;
    CostCenter?: string;
    WorkerCostCenter?: string;
    ResponsibleCostCenter?: string;
    ExternalProjectNo?: string;
    ManualCompensation?: boolean;
    ManualInvoiceValue?: boolean;
    CreatedDate?: Date;
    CustomerOrderNo?: string;
    KnowledgeOfMedicalRecordName?: string;
    TagNamesJsonStringArray?: string;
    TermsOfPaymentId?: string;
    YourReference?: string;
    DefaultPriceProfileId?: number;
    DefaultPriceProfileName?: string;
    WorkSerieId?: string;
    BusinessUnitId?: string;
    TeamId?: string;
    IsStandByShift?: boolean;
    Context?: Context;
}

export class PostFileModel implements IPostFileModel {
    Directory?: string;
    FileName?: string;
    DataUriString?: string;
    PublicAccess?: boolean;

    constructor(data?: IPostFileModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Directory = data["Directory"];
            this.FileName = data["FileName"];
            this.DataUriString = data["DataUriString"];
            this.PublicAccess = data["PublicAccess"];
        }
    }

    static fromJS(data: any): PostFileModel {
        let result = new PostFileModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Directory"] = this.Directory;
        data["FileName"] = this.FileName;
        data["DataUriString"] = this.DataUriString;
        data["PublicAccess"] = this.PublicAccess;
        return data;
    }
}

export interface IPostFileModel {
    Directory?: string;
    FileName?: string;
    DataUriString?: string;
    PublicAccess?: boolean;
}

export class FileUrl implements IFileUrl {
    Url?: string;

    constructor(data?: IFileUrl) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Url = data["Url"];
        }
    }

    static fromJS(data: any): FileUrl {
        let result = new FileUrl();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Url"] = this.Url;
        return data;
    }
}

export interface IFileUrl {
    Url?: string;
}

export class FileDataUriContent implements IFileDataUriContent {
    Name?: string;
    DataUriString?: string;

    constructor(data?: IFileDataUriContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Name = data["Name"];
            this.DataUriString = data["DataUriString"];
        }
    }

    static fromJS(data: any): FileDataUriContent {
        let result = new FileDataUriContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.Name;
        data["DataUriString"] = this.DataUriString;
        return data;
    }
}

export interface IFileDataUriContent {
    Name?: string;
    DataUriString?: string;
}

export class GeoCodeResult implements IGeoCodeResult {
    RequestAddress?: string;
    results?: Result[];
    status?: string;
    id?: string;
    CreatedDateEpoch?: number;
    UpdatedDateEpoch?: number;
    TypeName?: string;
    AccountId?: number;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    CreatedBy?: number;
    UpdatedBy?: number;
    IsDeleted?: boolean;
    ForSystemRole?: string;

    constructor(data?: IGeoCodeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.RequestAddress = data["RequestAddress"];
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(Result.fromJS(item));
            }
            this.status = data["status"];
            this.id = data["id"];
            this.CreatedDateEpoch = data["CreatedDateEpoch"];
            this.UpdatedDateEpoch = data["UpdatedDateEpoch"];
            this.TypeName = data["TypeName"];
            this.AccountId = data["AccountId"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.CreatedBy = data["CreatedBy"];
            this.UpdatedBy = data["UpdatedBy"];
            this.IsDeleted = data["IsDeleted"];
            this.ForSystemRole = data["ForSystemRole"];
        }
    }

    static fromJS(data: any): GeoCodeResult {
        let result = new GeoCodeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RequestAddress"] = this.RequestAddress;
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["status"] = this.status;
        data["id"] = this.id;
        data["CreatedDateEpoch"] = this.CreatedDateEpoch;
        data["UpdatedDateEpoch"] = this.UpdatedDateEpoch;
        data["TypeName"] = this.TypeName;
        data["AccountId"] = this.AccountId;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["CreatedBy"] = this.CreatedBy;
        data["UpdatedBy"] = this.UpdatedBy;
        data["IsDeleted"] = this.IsDeleted;
        data["ForSystemRole"] = this.ForSystemRole;
        return data;
    }
}

export interface IGeoCodeResult {
    RequestAddress?: string;
    results?: Result[];
    status?: string;
    id?: string;
    CreatedDateEpoch?: number;
    UpdatedDateEpoch?: number;
    TypeName?: string;
    AccountId?: number;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    CreatedBy?: number;
    UpdatedBy?: number;
    IsDeleted?: boolean;
    ForSystemRole?: string;
}

export class Result implements IResult {
    address_components?: Address_Components[];
    formatted_address?: string;
    geometry?: Geometry;
    place_id?: string;
    types?: string[];

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["address_components"] && data["address_components"].constructor === Array) {
                this.address_components = [];
                for (let item of data["address_components"])
                    this.address_components.push(Address_Components.fromJS(item));
            }
            this.formatted_address = data["formatted_address"];
            this.geometry = data["geometry"] ? Geometry.fromJS(data["geometry"]) : <any>undefined;
            this.place_id = data["place_id"];
            if (data["types"] && data["types"].constructor === Array) {
                this.types = [];
                for (let item of data["types"])
                    this.types.push(item);
            }
        }
    }

    static fromJS(data: any): Result {
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.address_components && this.address_components.constructor === Array) {
            data["address_components"] = [];
            for (let item of this.address_components)
                data["address_components"].push(item.toJSON());
        }
        data["formatted_address"] = this.formatted_address;
        data["geometry"] = this.geometry ? this.geometry.toJSON() : <any>undefined;
        data["place_id"] = this.place_id;
        if (this.types && this.types.constructor === Array) {
            data["types"] = [];
            for (let item of this.types)
                data["types"].push(item);
        }
        return data;
    }
}

export interface IResult {
    address_components?: Address_Components[];
    formatted_address?: string;
    geometry?: Geometry;
    place_id?: string;
    types?: string[];
}

export class Address_Components implements IAddress_Components {
    long_name?: string;
    short_name?: string;
    types?: string[];

    constructor(data?: IAddress_Components) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.long_name = data["long_name"];
            this.short_name = data["short_name"];
            if (data["types"] && data["types"].constructor === Array) {
                this.types = [];
                for (let item of data["types"])
                    this.types.push(item);
            }
        }
    }

    static fromJS(data: any): Address_Components {
        let result = new Address_Components();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["long_name"] = this.long_name;
        data["short_name"] = this.short_name;
        if (this.types && this.types.constructor === Array) {
            data["types"] = [];
            for (let item of this.types)
                data["types"].push(item);
        }
        return data;
    }
}

export interface IAddress_Components {
    long_name?: string;
    short_name?: string;
    types?: string[];
}

export class Geometry implements IGeometry {
    location?: Location;
    location_type?: string;
    viewport?: Viewport;

    constructor(data?: IGeometry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.location = data["location"] ? Location.fromJS(data["location"]) : <any>undefined;
            this.location_type = data["location_type"];
            this.viewport = data["viewport"] ? Viewport.fromJS(data["viewport"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Geometry {
        let result = new Geometry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["location_type"] = this.location_type;
        data["viewport"] = this.viewport ? this.viewport.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGeometry {
    location?: Location;
    location_type?: string;
    viewport?: Viewport;
}

export class Location implements ILocation {
    lat?: number;
    lng?: number;

    constructor(data?: ILocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lat = data["lat"];
            this.lng = data["lng"];
        }
    }

    static fromJS(data: any): Location {
        let result = new Location();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lat"] = this.lat;
        data["lng"] = this.lng;
        return data;
    }
}

export interface ILocation {
    lat?: number;
    lng?: number;
}

export class Viewport implements IViewport {
    northeast?: Northeast;
    southwest?: Southwest;

    constructor(data?: IViewport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.northeast = data["northeast"] ? Northeast.fromJS(data["northeast"]) : <any>undefined;
            this.southwest = data["southwest"] ? Southwest.fromJS(data["southwest"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Viewport {
        let result = new Viewport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["northeast"] = this.northeast ? this.northeast.toJSON() : <any>undefined;
        data["southwest"] = this.southwest ? this.southwest.toJSON() : <any>undefined;
        return data;
    }
}

export interface IViewport {
    northeast?: Northeast;
    southwest?: Southwest;
}

export class Northeast implements INortheast {
    lat?: number;
    lng?: number;

    constructor(data?: INortheast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lat = data["lat"];
            this.lng = data["lng"];
        }
    }

    static fromJS(data: any): Northeast {
        let result = new Northeast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lat"] = this.lat;
        data["lng"] = this.lng;
        return data;
    }
}

export interface INortheast {
    lat?: number;
    lng?: number;
}

export class Southwest implements ISouthwest {
    lat?: number;
    lng?: number;

    constructor(data?: ISouthwest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lat = data["lat"];
            this.lng = data["lng"];
        }
    }

    static fromJS(data: any): Southwest {
        let result = new Southwest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lat"] = this.lat;
        data["lng"] = this.lng;
        return data;
    }
}

export interface ISouthwest {
    lat?: number;
    lng?: number;
}

export class AppGuestBook implements IAppGuestBook {
    Id?: string;
    Name?: string;
    Description?: string;
    AppId?: number;

    constructor(data?: IAppGuestBook) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Id = data["Id"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.AppId = data["AppId"];
        }
    }

    static fromJS(data: any): AppGuestBook {
        let result = new AppGuestBook();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.Id;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["AppId"] = this.AppId;
        return data;
    }
}

export interface IAppGuestBook {
    Id?: string;
    Name?: string;
    Description?: string;
    AppId?: number;
}

export class AppGuestBookPost implements IAppGuestBookPost {
    Id?: string;
    Name?: string;
    Email?: string;
    Website?: string;
    Description?: string;
    CreatedDate?: Date;
    Public?: boolean;
    AppGuestBookId?: string;

    constructor(data?: IAppGuestBookPost) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Id = data["Id"];
            this.Name = data["Name"];
            this.Email = data["Email"];
            this.Website = data["Website"];
            this.Description = data["Description"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.Public = data["Public"];
            this.AppGuestBookId = data["AppGuestBookId"];
        }
    }

    static fromJS(data: any): AppGuestBookPost {
        let result = new AppGuestBookPost();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.Id;
        data["Name"] = this.Name;
        data["Email"] = this.Email;
        data["Website"] = this.Website;
        data["Description"] = this.Description;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["Public"] = this.Public;
        data["AppGuestBookId"] = this.AppGuestBookId;
        return data;
    }
}

export interface IAppGuestBookPost {
    Id?: string;
    Name?: string;
    Email?: string;
    Website?: string;
    Description?: string;
    CreatedDate?: Date;
    Public?: boolean;
    AppGuestBookId?: string;
}

export class ContinuationResultOfIEnumerableOfHistoryItem implements IContinuationResultOfIEnumerableOfHistoryItem {
    Result?: HistoryItem[];
    ContinuationToken?: string;

    constructor(data?: IContinuationResultOfIEnumerableOfHistoryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Result"] && data["Result"].constructor === Array) {
                this.Result = [];
                for (let item of data["Result"])
                    this.Result.push(HistoryItem.fromJS(item));
            }
            this.ContinuationToken = data["ContinuationToken"];
        }
    }

    static fromJS(data: any): ContinuationResultOfIEnumerableOfHistoryItem {
        let result = new ContinuationResultOfIEnumerableOfHistoryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Result && this.Result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.Result)
                data["Result"].push(item.toJSON());
        }
        data["ContinuationToken"] = this.ContinuationToken;
        return data;
    }
}

export interface IContinuationResultOfIEnumerableOfHistoryItem {
    Result?: HistoryItem[];
    ContinuationToken?: string;
}

export class HistoryItem implements IHistoryItem {
    id?: string;
    Description?: string;
    FileUrls?: string[];
    Path?: string;
    CreatedByName?: string;
    CreatedDate?: Date;
    CreatedBy?: number;
    IsDeleted?: boolean;
    PostType?: string;

    constructor(data?: IHistoryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Description = data["Description"];
            if (data["FileUrls"] && data["FileUrls"].constructor === Array) {
                this.FileUrls = [];
                for (let item of data["FileUrls"])
                    this.FileUrls.push(item);
            }
            this.Path = data["Path"];
            this.CreatedByName = data["CreatedByName"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.CreatedBy = data["CreatedBy"];
            this.IsDeleted = data["IsDeleted"];
            this.PostType = data["PostType"];
        }
    }

    static fromJS(data: any): HistoryItem {
        let result = new HistoryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Description"] = this.Description;
        if (this.FileUrls && this.FileUrls.constructor === Array) {
            data["FileUrls"] = [];
            for (let item of this.FileUrls)
                data["FileUrls"].push(item);
        }
        data["Path"] = this.Path;
        data["CreatedByName"] = this.CreatedByName;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["CreatedBy"] = this.CreatedBy;
        data["IsDeleted"] = this.IsDeleted;
        data["PostType"] = this.PostType;
        return data;
    }
}

export interface IHistoryItem {
    id?: string;
    Description?: string;
    FileUrls?: string[];
    Path?: string;
    CreatedByName?: string;
    CreatedDate?: Date;
    CreatedBy?: number;
    IsDeleted?: boolean;
    PostType?: string;
}

export class ImportFortnoxCustomersSettings implements IImportFortnoxCustomersSettings {
    TermsOfPaymentId?: string;
    UpdateOnExistingAdockaContact?: boolean;
    OnlyActiveFortoxCustomers?: boolean;

    constructor(data?: IImportFortnoxCustomersSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.UpdateOnExistingAdockaContact = data["UpdateOnExistingAdockaContact"];
            this.OnlyActiveFortoxCustomers = data["OnlyActiveFortoxCustomers"];
        }
    }

    static fromJS(data: any): ImportFortnoxCustomersSettings {
        let result = new ImportFortnoxCustomersSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["UpdateOnExistingAdockaContact"] = this.UpdateOnExistingAdockaContact;
        data["OnlyActiveFortoxCustomers"] = this.OnlyActiveFortoxCustomers;
        return data;
    }
}

export interface IImportFortnoxCustomersSettings {
    TermsOfPaymentId?: string;
    UpdateOnExistingAdockaContact?: boolean;
    OnlyActiveFortoxCustomers?: boolean;
}

export class ImportJobAdvanced implements IImportJobAdvanced {
    id?: string;
    Name?: string;
    WorkerCode?: string;
    SqlDataFileUrl?: string;
    ItemType?: string;
    ImportJobType?: string;
    RmdDataFiles?: RmdDataFiles;

    constructor(data?: IImportJobAdvanced) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.WorkerCode = data["WorkerCode"];
            this.SqlDataFileUrl = data["SqlDataFileUrl"];
            this.ItemType = data["ItemType"];
            this.ImportJobType = data["ImportJobType"];
            this.RmdDataFiles = data["RmdDataFiles"] ? RmdDataFiles.fromJS(data["RmdDataFiles"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ImportJobAdvanced {
        let result = new ImportJobAdvanced();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["WorkerCode"] = this.WorkerCode;
        data["SqlDataFileUrl"] = this.SqlDataFileUrl;
        data["ItemType"] = this.ItemType;
        data["ImportJobType"] = this.ImportJobType;
        data["RmdDataFiles"] = this.RmdDataFiles ? this.RmdDataFiles.toJSON() : <any>undefined;
        return data;
    }
}

export interface IImportJobAdvanced {
    id?: string;
    Name?: string;
    WorkerCode?: string;
    SqlDataFileUrl?: string;
    ItemType?: string;
    ImportJobType?: string;
    RmdDataFiles?: RmdDataFiles;
}

export class RmdDataFiles implements IRmdDataFiles {
    RmdCandidateCdnUrl?: string;
    RmdCandidateCertificationCdnUrl?: string;
    RmdCandidateEducationCdnUrl?: string;
    RmdCandidateExperienceCdnUrl?: string;
    RmdCandidateLanguageCdnUrl?: string;
    RmdCandidateReferenceCdnUrl?: string;
    RmdCandidateReferenceCheckCdnUrl?: string;
    RmdCandidateReferenceSkillsCdnUrl?: string;

    constructor(data?: IRmdDataFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.RmdCandidateCdnUrl = data["RmdCandidateCdnUrl"];
            this.RmdCandidateCertificationCdnUrl = data["RmdCandidateCertificationCdnUrl"];
            this.RmdCandidateEducationCdnUrl = data["RmdCandidateEducationCdnUrl"];
            this.RmdCandidateExperienceCdnUrl = data["RmdCandidateExperienceCdnUrl"];
            this.RmdCandidateLanguageCdnUrl = data["RmdCandidateLanguageCdnUrl"];
            this.RmdCandidateReferenceCdnUrl = data["RmdCandidateReferenceCdnUrl"];
            this.RmdCandidateReferenceCheckCdnUrl = data["RmdCandidateReferenceCheckCdnUrl"];
            this.RmdCandidateReferenceSkillsCdnUrl = data["RmdCandidateReferenceSkillsCdnUrl"];
        }
    }

    static fromJS(data: any): RmdDataFiles {
        let result = new RmdDataFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RmdCandidateCdnUrl"] = this.RmdCandidateCdnUrl;
        data["RmdCandidateCertificationCdnUrl"] = this.RmdCandidateCertificationCdnUrl;
        data["RmdCandidateEducationCdnUrl"] = this.RmdCandidateEducationCdnUrl;
        data["RmdCandidateExperienceCdnUrl"] = this.RmdCandidateExperienceCdnUrl;
        data["RmdCandidateLanguageCdnUrl"] = this.RmdCandidateLanguageCdnUrl;
        data["RmdCandidateReferenceCdnUrl"] = this.RmdCandidateReferenceCdnUrl;
        data["RmdCandidateReferenceCheckCdnUrl"] = this.RmdCandidateReferenceCheckCdnUrl;
        data["RmdCandidateReferenceSkillsCdnUrl"] = this.RmdCandidateReferenceSkillsCdnUrl;
        return data;
    }
}

export interface IRmdDataFiles {
    RmdCandidateCdnUrl?: string;
    RmdCandidateCertificationCdnUrl?: string;
    RmdCandidateEducationCdnUrl?: string;
    RmdCandidateExperienceCdnUrl?: string;
    RmdCandidateLanguageCdnUrl?: string;
    RmdCandidateReferenceCdnUrl?: string;
    RmdCandidateReferenceCheckCdnUrl?: string;
    RmdCandidateReferenceSkillsCdnUrl?: string;
}

export class ImportJobContactMapping implements IImportJobContactMapping {
    id?: string;
    ExternalContactId?: string;
    AdockaContactId?: string;
    ImportJobId?: string;

    constructor(data?: IImportJobContactMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ExternalContactId = data["ExternalContactId"];
            this.AdockaContactId = data["AdockaContactId"];
            this.ImportJobId = data["ImportJobId"];
        }
    }

    static fromJS(data: any): ImportJobContactMapping {
        let result = new ImportJobContactMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ExternalContactId"] = this.ExternalContactId;
        data["AdockaContactId"] = this.AdockaContactId;
        data["ImportJobId"] = this.ImportJobId;
        return data;
    }
}

export interface IImportJobContactMapping {
    id?: string;
    ExternalContactId?: string;
    AdockaContactId?: string;
    ImportJobId?: string;
}

export class ItemList implements IItemList {
    id?: string;
    Name?: string;
    OwnerPersonId?: number;
    OwnerPersonName?: string;
    ItemTypeName?: string;
    CreatedBy?: number;

    constructor(data?: IItemList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.OwnerPersonId = data["OwnerPersonId"];
            this.OwnerPersonName = data["OwnerPersonName"];
            this.ItemTypeName = data["ItemTypeName"];
            this.CreatedBy = data["CreatedBy"];
        }
    }

    static fromJS(data: any): ItemList {
        let result = new ItemList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["OwnerPersonId"] = this.OwnerPersonId;
        data["OwnerPersonName"] = this.OwnerPersonName;
        data["ItemTypeName"] = this.ItemTypeName;
        data["CreatedBy"] = this.CreatedBy;
        return data;
    }
}

export interface IItemList {
    id?: string;
    Name?: string;
    OwnerPersonId?: number;
    OwnerPersonName?: string;
    ItemTypeName?: string;
    CreatedBy?: number;
}

export class ItemListPerson implements IItemListPerson {
    id?: string;
    ItemListId?: string;
    PersonId?: number;
    SocialSecurityNo?: string;
    ImageUrl?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    BusinessSocialSecurityNo?: string;
    BusinessName?: string;
    BusinessStreetName?: string;
    BusinessPostNo?: string;
    BusinessCity?: string;
    BranchOffice?: string;
    Department?: string;
    CellPhone?: string;
    Email?: string;
    ExtraEmail?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    TermsOfPaymentQtyDaysId?: number;
    Phone?: string;
    Doorcode?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    Reference?: string;
    ShippingReference?: string;
    OurPersonId?: number;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    ExternalSubscriptionId?: string;
    ExternalAddressSelector?: string;
    ExternalFortnoxCustomerNo?: string;
    ReferredByPersonId?: number;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    QtyRelatedDocuments?: number;
    PendingDelete?: boolean;
    Comment?: string;
    ShippingComment?: string;

    constructor(data?: IItemListPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ItemListId = data["ItemListId"];
            this.PersonId = data["PersonId"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.ImageUrl = data["ImageUrl"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.ShippingCountry = data["ShippingCountry"];
            this.BusinessSocialSecurityNo = data["BusinessSocialSecurityNo"];
            this.BusinessName = data["BusinessName"];
            this.BusinessStreetName = data["BusinessStreetName"];
            this.BusinessPostNo = data["BusinessPostNo"];
            this.BusinessCity = data["BusinessCity"];
            this.BranchOffice = data["BranchOffice"];
            this.Department = data["Department"];
            this.CellPhone = data["CellPhone"];
            this.Email = data["Email"];
            this.ExtraEmail = data["ExtraEmail"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.WayOfDeliveryId = data["WayOfDeliveryId"];
            this.OurReference = data["OurReference"];
            this.YourReference = data["YourReference"];
            this.TermsOfPaymentQtyDaysId = data["TermsOfPaymentQtyDaysId"];
            this.Phone = data["Phone"];
            this.Doorcode = data["Doorcode"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.Reference = data["Reference"];
            this.ShippingReference = data["ShippingReference"];
            this.OurPersonId = data["OurPersonId"];
            this.ShippingLongitude = data["ShippingLongitude"];
            this.ShippingLatitude = data["ShippingLatitude"];
            this.ExternalSubscriptionId = data["ExternalSubscriptionId"];
            this.ExternalAddressSelector = data["ExternalAddressSelector"];
            this.ExternalFortnoxCustomerNo = data["ExternalFortnoxCustomerNo"];
            this.ReferredByPersonId = data["ReferredByPersonId"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.ResponsibleName = data["ResponsibleName"];
            this.QtyRelatedDocuments = data["QtyRelatedDocuments"];
            this.PendingDelete = data["PendingDelete"];
            this.Comment = data["Comment"];
            this.ShippingComment = data["ShippingComment"];
        }
    }

    static fromJS(data: any): ItemListPerson {
        let result = new ItemListPerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ItemListId"] = this.ItemListId;
        data["PersonId"] = this.PersonId;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["ImageUrl"] = this.ImageUrl;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["ShippingCountry"] = this.ShippingCountry;
        data["BusinessSocialSecurityNo"] = this.BusinessSocialSecurityNo;
        data["BusinessName"] = this.BusinessName;
        data["BusinessStreetName"] = this.BusinessStreetName;
        data["BusinessPostNo"] = this.BusinessPostNo;
        data["BusinessCity"] = this.BusinessCity;
        data["BranchOffice"] = this.BranchOffice;
        data["Department"] = this.Department;
        data["CellPhone"] = this.CellPhone;
        data["Email"] = this.Email;
        data["ExtraEmail"] = this.ExtraEmail;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["WayOfDeliveryId"] = this.WayOfDeliveryId;
        data["OurReference"] = this.OurReference;
        data["YourReference"] = this.YourReference;
        data["TermsOfPaymentQtyDaysId"] = this.TermsOfPaymentQtyDaysId;
        data["Phone"] = this.Phone;
        data["Doorcode"] = this.Doorcode;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["Reference"] = this.Reference;
        data["ShippingReference"] = this.ShippingReference;
        data["OurPersonId"] = this.OurPersonId;
        data["ShippingLongitude"] = this.ShippingLongitude;
        data["ShippingLatitude"] = this.ShippingLatitude;
        data["ExternalSubscriptionId"] = this.ExternalSubscriptionId;
        data["ExternalAddressSelector"] = this.ExternalAddressSelector;
        data["ExternalFortnoxCustomerNo"] = this.ExternalFortnoxCustomerNo;
        data["ReferredByPersonId"] = this.ReferredByPersonId;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["ResponsibleName"] = this.ResponsibleName;
        data["QtyRelatedDocuments"] = this.QtyRelatedDocuments;
        data["PendingDelete"] = this.PendingDelete;
        data["Comment"] = this.Comment;
        data["ShippingComment"] = this.ShippingComment;
        return data;
    }
}

export interface IItemListPerson {
    id?: string;
    ItemListId?: string;
    PersonId?: number;
    SocialSecurityNo?: string;
    ImageUrl?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    BusinessSocialSecurityNo?: string;
    BusinessName?: string;
    BusinessStreetName?: string;
    BusinessPostNo?: string;
    BusinessCity?: string;
    BranchOffice?: string;
    Department?: string;
    CellPhone?: string;
    Email?: string;
    ExtraEmail?: string;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    TermsOfPaymentQtyDaysId?: number;
    Phone?: string;
    Doorcode?: string;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    Reference?: string;
    ShippingReference?: string;
    OurPersonId?: number;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    ExternalSubscriptionId?: string;
    ExternalAddressSelector?: string;
    ExternalFortnoxCustomerNo?: string;
    ReferredByPersonId?: number;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    QtyRelatedDocuments?: number;
    PendingDelete?: boolean;
    Comment?: string;
    ShippingComment?: string;
}

export class ItemsSelection implements IItemsSelection {
    id?: string;
    Ids?: string[];

    constructor(data?: IItemsSelection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["Ids"] && data["Ids"].constructor === Array) {
                this.Ids = [];
                for (let item of data["Ids"])
                    this.Ids.push(item);
            }
        }
    }

    static fromJS(data: any): ItemsSelection {
        let result = new ItemsSelection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.Ids && this.Ids.constructor === Array) {
            data["Ids"] = [];
            for (let item of this.Ids)
                data["Ids"].push(item);
        }
        return data;
    }
}

export interface IItemsSelection {
    id?: string;
    Ids?: string[];
}

export class ItemTag implements IItemTag {
    id?: string;
    TagName?: string;
    ItemType?: string;
    ItemId?: string;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    CreatedBy?: number;
    UpdatedBy?: number;
    CreatedByName?: string;

    constructor(data?: IItemTag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.TagName = data["TagName"];
            this.ItemType = data["ItemType"];
            this.ItemId = data["ItemId"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.CreatedBy = data["CreatedBy"];
            this.UpdatedBy = data["UpdatedBy"];
            this.CreatedByName = data["CreatedByName"];
        }
    }

    static fromJS(data: any): ItemTag {
        let result = new ItemTag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["TagName"] = this.TagName;
        data["ItemType"] = this.ItemType;
        data["ItemId"] = this.ItemId;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["CreatedBy"] = this.CreatedBy;
        data["UpdatedBy"] = this.UpdatedBy;
        data["CreatedByName"] = this.CreatedByName;
        return data;
    }
}

export interface IItemTag {
    id?: string;
    TagName?: string;
    ItemType?: string;
    ItemId?: string;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    CreatedBy?: number;
    UpdatedBy?: number;
    CreatedByName?: string;
}

export class KnowledgeOfSystemOption implements IKnowledgeOfSystemOption {
    KnowledgeOfSystemOptionId?: number;
    Name?: string;

    constructor(data?: IKnowledgeOfSystemOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.KnowledgeOfSystemOptionId = data["KnowledgeOfSystemOptionId"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): KnowledgeOfSystemOption {
        let result = new KnowledgeOfSystemOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["KnowledgeOfSystemOptionId"] = this.KnowledgeOfSystemOptionId;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IKnowledgeOfSystemOption {
    KnowledgeOfSystemOptionId?: number;
    Name?: string;
}

export class TermsOfService implements ITermsOfService {
    id?: string;
    Name?: string;
    Description?: string;
    AppId?: string;
    AppName?: string;
    VersionNr?: string;

    constructor(data?: ITermsOfService) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.AppId = data["AppId"];
            this.AppName = data["AppName"];
            this.VersionNr = data["VersionNr"];
        }
    }

    static fromJS(data: any): TermsOfService {
        let result = new TermsOfService();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["AppId"] = this.AppId;
        data["AppName"] = this.AppName;
        data["VersionNr"] = this.VersionNr;
        return data;
    }
}

export interface ITermsOfService {
    id?: string;
    Name?: string;
    Description?: string;
    AppId?: string;
    AppName?: string;
    VersionNr?: string;
}

export class PrivacyPolicy implements IPrivacyPolicy {
    id?: string;
    Name?: string;
    Description?: string;
    AppId?: string;
    AppName?: string;
    VersionNr?: string;

    constructor(data?: IPrivacyPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.AppId = data["AppId"];
            this.AppName = data["AppName"];
            this.VersionNr = data["VersionNr"];
        }
    }

    static fromJS(data: any): PrivacyPolicy {
        let result = new PrivacyPolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["AppId"] = this.AppId;
        data["AppName"] = this.AppName;
        data["VersionNr"] = this.VersionNr;
        return data;
    }
}

export interface IPrivacyPolicy {
    id?: string;
    Name?: string;
    Description?: string;
    AppId?: string;
    AppName?: string;
    VersionNr?: string;
}

export class TupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString implements ITupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString {
    Item1?: SendMessageForTermsAcceptance[];
    Item2?: string;

    constructor(data?: ITupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Item1"] && data["Item1"].constructor === Array) {
                this.Item1 = [];
                for (let item of data["Item1"])
                    this.Item1.push(SendMessageForTermsAcceptance.fromJS(item));
            }
            this.Item2 = data["Item2"];
        }
    }

    static fromJS(data: any): TupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString {
        let result = new TupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Item1 && this.Item1.constructor === Array) {
            data["Item1"] = [];
            for (let item of this.Item1)
                data["Item1"].push(item.toJSON());
        }
        data["Item2"] = this.Item2;
        return data;
    }
}

export interface ITupleOfIEnumerableOfSendMessageForTermsAcceptanceAndString {
    Item1?: SendMessageForTermsAcceptance[];
    Item2?: string;
}

export class SendMessageForTermsAcceptance implements ISendMessageForTermsAcceptance {
    id?: string;
    AllConsultants?: boolean;
    AllContacts?: boolean;
    AllCustomers?: boolean;
    Subject?: string;
    Body?: string;
    IsCanceled?: boolean;
    TermsOfServiceId?: string;
    PrivacyPolicyId?: string;
    ActivatedDate?: Date;
    FromAddress?: string;
    FromName?: string;

    constructor(data?: ISendMessageForTermsAcceptance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.AllConsultants = data["AllConsultants"];
            this.AllContacts = data["AllContacts"];
            this.AllCustomers = data["AllCustomers"];
            this.Subject = data["Subject"];
            this.Body = data["Body"];
            this.IsCanceled = data["IsCanceled"];
            this.TermsOfServiceId = data["TermsOfServiceId"];
            this.PrivacyPolicyId = data["PrivacyPolicyId"];
            this.ActivatedDate = data["ActivatedDate"] ? new Date(data["ActivatedDate"].toString()) : <any>undefined;
            this.FromAddress = data["FromAddress"];
            this.FromName = data["FromName"];
        }
    }

    static fromJS(data: any): SendMessageForTermsAcceptance {
        let result = new SendMessageForTermsAcceptance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["AllConsultants"] = this.AllConsultants;
        data["AllContacts"] = this.AllContacts;
        data["AllCustomers"] = this.AllCustomers;
        data["Subject"] = this.Subject;
        data["Body"] = this.Body;
        data["IsCanceled"] = this.IsCanceled;
        data["TermsOfServiceId"] = this.TermsOfServiceId;
        data["PrivacyPolicyId"] = this.PrivacyPolicyId;
        data["ActivatedDate"] = this.ActivatedDate ? this.ActivatedDate.toISOString() : <any>undefined;
        data["FromAddress"] = this.FromAddress;
        data["FromName"] = this.FromName;
        return data;
    }
}

export interface ISendMessageForTermsAcceptance {
    id?: string;
    AllConsultants?: boolean;
    AllContacts?: boolean;
    AllCustomers?: boolean;
    Subject?: string;
    Body?: string;
    IsCanceled?: boolean;
    TermsOfServiceId?: string;
    PrivacyPolicyId?: string;
    ActivatedDate?: Date;
    FromAddress?: string;
    FromName?: string;
}

export class SendMessageForTermsAcceptancePerson implements ISendMessageForTermsAcceptancePerson {
    id?: string;
    PersonId?: string;
    Name?: string;
    Email?: string;
    Sent?: boolean;
    SendException?: string;
    ActivatedDate?: Date;
    AcceptedTerms?: boolean;
    SendMessageForTermsAcceptanceId?: string;

    constructor(data?: ISendMessageForTermsAcceptancePerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.PersonId = data["PersonId"];
            this.Name = data["Name"];
            this.Email = data["Email"];
            this.Sent = data["Sent"];
            this.SendException = data["SendException"];
            this.ActivatedDate = data["ActivatedDate"] ? new Date(data["ActivatedDate"].toString()) : <any>undefined;
            this.AcceptedTerms = data["AcceptedTerms"];
            this.SendMessageForTermsAcceptanceId = data["SendMessageForTermsAcceptanceId"];
        }
    }

    static fromJS(data: any): SendMessageForTermsAcceptancePerson {
        let result = new SendMessageForTermsAcceptancePerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["PersonId"] = this.PersonId;
        data["Name"] = this.Name;
        data["Email"] = this.Email;
        data["Sent"] = this.Sent;
        data["SendException"] = this.SendException;
        data["ActivatedDate"] = this.ActivatedDate ? this.ActivatedDate.toISOString() : <any>undefined;
        data["AcceptedTerms"] = this.AcceptedTerms;
        data["SendMessageForTermsAcceptanceId"] = this.SendMessageForTermsAcceptanceId;
        return data;
    }
}

export interface ISendMessageForTermsAcceptancePerson {
    id?: string;
    PersonId?: string;
    Name?: string;
    Email?: string;
    Sent?: boolean;
    SendException?: string;
    ActivatedDate?: Date;
    AcceptedTerms?: boolean;
    SendMessageForTermsAcceptanceId?: string;
}

export class TupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString implements ITupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString {
    Item1?: SendMessageForTermsAcceptancePerson[];
    Item2?: string;

    constructor(data?: ITupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Item1"] && data["Item1"].constructor === Array) {
                this.Item1 = [];
                for (let item of data["Item1"])
                    this.Item1.push(SendMessageForTermsAcceptancePerson.fromJS(item));
            }
            this.Item2 = data["Item2"];
        }
    }

    static fromJS(data: any): TupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString {
        let result = new TupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Item1 && this.Item1.constructor === Array) {
            data["Item1"] = [];
            for (let item of this.Item1)
                data["Item1"].push(item.toJSON());
        }
        data["Item2"] = this.Item2;
        return data;
    }
}

export interface ITupleOfIEnumerableOfSendMessageForTermsAcceptancePersonAndString {
    Item1?: SendMessageForTermsAcceptancePerson[];
    Item2?: string;
}

export class News implements INews {
    id?: string;
    Title?: string;
    Description?: string;
    Date?: Date;
    ApplicationId?: number;
    CreatedByName?: string;
    Public?: boolean;
    Context?: Context;

    constructor(data?: INews) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Title = data["Title"];
            this.Description = data["Description"];
            this.Date = data["Date"] ? new Date(data["Date"].toString()) : <any>undefined;
            this.ApplicationId = data["ApplicationId"];
            this.CreatedByName = data["CreatedByName"];
            this.Public = data["Public"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): News {
        let result = new News();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        data["Date"] = this.Date ? this.Date.toISOString() : <any>undefined;
        data["ApplicationId"] = this.ApplicationId;
        data["CreatedByName"] = this.CreatedByName;
        data["Public"] = this.Public;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface INews {
    id?: string;
    Title?: string;
    Description?: string;
    Date?: Date;
    ApplicationId?: number;
    CreatedByName?: string;
    Public?: boolean;
    Context?: Context;
}

export class ApiIntegration implements IApiIntegration {
    id?: string;
    ApiToken?: string;
    IntegrationType?: ApiIntegrationType;

    constructor(data?: IApiIntegration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ApiToken = data["ApiToken"];
            this.IntegrationType = data["IntegrationType"] ? ApiIntegrationType.fromJS(data["IntegrationType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiIntegration {
        let result = new ApiIntegration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ApiToken"] = this.ApiToken;
        data["IntegrationType"] = this.IntegrationType ? this.IntegrationType.toJSON() : <any>undefined;
        return data;
    }
}

export interface IApiIntegration {
    id?: string;
    ApiToken?: string;
    IntegrationType?: ApiIntegrationType;
}

export class ApiIntegrationType implements IApiIntegrationType {
    Name?: string;
    UniqueId?: string;

    constructor(data?: IApiIntegrationType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Name = data["Name"];
            this.UniqueId = data["UniqueId"];
        }
    }

    static fromJS(data: any): ApiIntegrationType {
        let result = new ApiIntegrationType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.Name;
        data["UniqueId"] = this.UniqueId;
        return data;
    }
}

export interface IApiIntegrationType {
    Name?: string;
    UniqueId?: string;
}

export class OneflowAgreementTemplate implements IOneflowAgreementTemplate {
    id?: number;
    Agreement?: OneflowAgreement;

    constructor(data?: IOneflowAgreementTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Agreement = data["Agreement"] ? OneflowAgreement.fromJS(data["Agreement"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OneflowAgreementTemplate {
        let result = new OneflowAgreementTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Agreement"] = this.Agreement ? this.Agreement.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOneflowAgreementTemplate {
    id?: number;
    Agreement?: OneflowAgreement;
}

export class OneflowAgreement implements IOneflowAgreement {
    id?: number;
    name?: string;

    constructor(data?: IOneflowAgreement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): OneflowAgreement {
        let result = new OneflowAgreement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IOneflowAgreement {
    id?: number;
    name?: string;
}

export class OneflowPosition implements IOneflowPosition {
    id?: number;
    fullname?: string;
    phone_number?: string;
    title?: string;
    Account?: OneflowAccount;
    User?: OneflowUser;

    constructor(data?: IOneflowPosition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.fullname = data["fullname"];
            this.phone_number = data["phone_number"];
            this.title = data["title"];
            this.Account = data["Account"] ? OneflowAccount.fromJS(data["Account"]) : <any>undefined;
            this.User = data["User"] ? OneflowUser.fromJS(data["User"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OneflowPosition {
        let result = new OneflowPosition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullname"] = this.fullname;
        data["phone_number"] = this.phone_number;
        data["title"] = this.title;
        data["Account"] = this.Account ? this.Account.toJSON() : <any>undefined;
        data["User"] = this.User ? this.User.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOneflowPosition {
    id?: number;
    fullname?: string;
    phone_number?: string;
    title?: string;
    Account?: OneflowAccount;
    User?: OneflowUser;
}

export class OneflowAccount implements IOneflowAccount {
    id?: number;
    name?: string;
    orgnr?: string;
    country?: string;

    constructor(data?: IOneflowAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.orgnr = data["orgnr"];
            this.country = data["country"];
        }
    }

    static fromJS(data: any): OneflowAccount {
        let result = new OneflowAccount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["orgnr"] = this.orgnr;
        data["country"] = this.country;
        return data;
    }
}

export interface IOneflowAccount {
    id?: number;
    name?: string;
    orgnr?: string;
    country?: string;
}

export class OneflowUser implements IOneflowUser {
    id?: number;
    email?: string;

    constructor(data?: IOneflowUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.email = data["email"];
        }
    }

    static fromJS(data: any): OneflowUser {
        let result = new OneflowUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        return data;
    }
}

export interface IOneflowUser {
    id?: number;
    email?: string;
}

export class OneflowPositionSearchModel implements IOneflowPositionSearchModel {
    user_id?: number;
    email?: string;
    active?: boolean;

    constructor(data?: IOneflowPositionSearchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user_id = data["user_id"];
            this.email = data["email"];
            this.active = data["active"];
        }
    }

    static fromJS(data: any): OneflowPositionSearchModel {
        let result = new OneflowPositionSearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user_id"] = this.user_id;
        data["email"] = this.email;
        data["active"] = this.active;
        return data;
    }
}

export interface IOneflowPositionSearchModel {
    user_id?: number;
    email?: string;
    active?: boolean;
}

export class OneflowAdockaAgreement implements IOneflowAdockaAgreement {
    id?: string;
    OneflowId?: number;
    Name?: string;
    Description?: string;
    CreatedBy?: number;
    CreatedByName?: string;
    CreatedDate?: Date;
    AdockaConnections?: ItemObject[];

    constructor(data?: IOneflowAdockaAgreement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.OneflowId = data["OneflowId"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.CreatedBy = data["CreatedBy"];
            this.CreatedByName = data["CreatedByName"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            if (data["AdockaConnections"] && data["AdockaConnections"].constructor === Array) {
                this.AdockaConnections = [];
                for (let item of data["AdockaConnections"])
                    this.AdockaConnections.push(ItemObject.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OneflowAdockaAgreement {
        let result = new OneflowAdockaAgreement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["OneflowId"] = this.OneflowId;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["CreatedBy"] = this.CreatedBy;
        data["CreatedByName"] = this.CreatedByName;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        if (this.AdockaConnections && this.AdockaConnections.constructor === Array) {
            data["AdockaConnections"] = [];
            for (let item of this.AdockaConnections)
                data["AdockaConnections"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOneflowAdockaAgreement {
    id?: string;
    OneflowId?: number;
    Name?: string;
    Description?: string;
    CreatedBy?: number;
    CreatedByName?: string;
    CreatedDate?: Date;
    AdockaConnections?: ItemObject[];
}

export class ContinuationResultOfIEnumerableOfOneflowAdockaAgreement implements IContinuationResultOfIEnumerableOfOneflowAdockaAgreement {
    Result?: OneflowAdockaAgreement[];
    ContinuationToken?: string;

    constructor(data?: IContinuationResultOfIEnumerableOfOneflowAdockaAgreement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Result"] && data["Result"].constructor === Array) {
                this.Result = [];
                for (let item of data["Result"])
                    this.Result.push(OneflowAdockaAgreement.fromJS(item));
            }
            this.ContinuationToken = data["ContinuationToken"];
        }
    }

    static fromJS(data: any): ContinuationResultOfIEnumerableOfOneflowAdockaAgreement {
        let result = new ContinuationResultOfIEnumerableOfOneflowAdockaAgreement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Result && this.Result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.Result)
                data["Result"].push(item.toJSON());
        }
        data["ContinuationToken"] = this.ContinuationToken;
        return data;
    }
}

export interface IContinuationResultOfIEnumerableOfOneflowAdockaAgreement {
    Result?: OneflowAdockaAgreement[];
    ContinuationToken?: string;
}

export class CreateOneflowAgreementModel implements ICreateOneflowAgreementModel {
    name?: string;
    source_id?: number;
    position_id?: number;
    parties?: OneflowAgreementParty[];
    data?: OneflowAgreementData[];
    AdockaConnections?: ItemObject[];

    constructor(data?: ICreateOneflowAgreementModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.source_id = data["source_id"];
            this.position_id = data["position_id"];
            if (data["parties"] && data["parties"].constructor === Array) {
                this.parties = [];
                for (let item of data["parties"])
                    this.parties.push(OneflowAgreementParty.fromJS(item));
            }
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(OneflowAgreementData.fromJS(item));
            }
            if (data["AdockaConnections"] && data["AdockaConnections"].constructor === Array) {
                this.AdockaConnections = [];
                for (let item of data["AdockaConnections"])
                    this.AdockaConnections.push(ItemObject.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOneflowAgreementModel {
        let result = new CreateOneflowAgreementModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["source_id"] = this.source_id;
        data["position_id"] = this.position_id;
        if (this.parties && this.parties.constructor === Array) {
            data["parties"] = [];
            for (let item of this.parties)
                data["parties"].push(item.toJSON());
        }
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (this.AdockaConnections && this.AdockaConnections.constructor === Array) {
            data["AdockaConnections"] = [];
            for (let item of this.AdockaConnections)
                data["AdockaConnections"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateOneflowAgreementModel {
    name?: string;
    source_id?: number;
    position_id?: number;
    parties?: OneflowAgreementParty[];
    data?: OneflowAgreementData[];
    AdockaConnections?: ItemObject[];
}

export class OneflowAgreementParty implements IOneflowAgreementParty {
    self?: number;
    consumer?: number;
    name?: string;
    country?: string;
    orgnr?: string;
    phone_number?: string;
    participants?: OneflowAgreementParticipant[];

    constructor(data?: IOneflowAgreementParty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.self = data["self"];
            this.consumer = data["consumer"];
            this.name = data["name"];
            this.country = data["country"];
            this.orgnr = data["orgnr"];
            this.phone_number = data["phone_number"];
            if (data["participants"] && data["participants"].constructor === Array) {
                this.participants = [];
                for (let item of data["participants"])
                    this.participants.push(OneflowAgreementParticipant.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OneflowAgreementParty {
        let result = new OneflowAgreementParty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["self"] = this.self;
        data["consumer"] = this.consumer;
        data["name"] = this.name;
        data["country"] = this.country;
        data["orgnr"] = this.orgnr;
        data["phone_number"] = this.phone_number;
        if (this.participants && this.participants.constructor === Array) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOneflowAgreementParty {
    self?: number;
    consumer?: number;
    name?: string;
    country?: string;
    orgnr?: string;
    phone_number?: string;
    participants?: OneflowAgreementParticipant[];
}

export class OneflowAgreementData implements IOneflowAgreementData {
    key?: string;
    value?: AgreementDataValue;

    constructor(data?: IOneflowAgreementData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.key = data["key"];
            this.value = data["value"] ? AgreementDataValue.fromJS(data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OneflowAgreementData {
        let result = new OneflowAgreementData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOneflowAgreementData {
    key?: string;
    value?: AgreementDataValue;
}

export class OneflowAgreementParticipant implements IOneflowAgreementParticipant {
    self?: number;
    position_id?: number;
    type?: number;
    fullname?: string;
    title?: string;
    email?: string;
    phone_number?: string;
    sign_method?: number;
    delivery_channel?: number;

    constructor(data?: IOneflowAgreementParticipant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.self = data["self"];
            this.position_id = data["position_id"];
            this.type = data["type"];
            this.fullname = data["fullname"];
            this.title = data["title"];
            this.email = data["email"];
            this.phone_number = data["phone_number"];
            this.sign_method = data["sign_method"];
            this.delivery_channel = data["delivery_channel"];
        }
    }

    static fromJS(data: any): OneflowAgreementParticipant {
        let result = new OneflowAgreementParticipant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["self"] = this.self;
        data["position_id"] = this.position_id;
        data["type"] = this.type;
        data["fullname"] = this.fullname;
        data["title"] = this.title;
        data["email"] = this.email;
        data["phone_number"] = this.phone_number;
        data["sign_method"] = this.sign_method;
        data["delivery_channel"] = this.delivery_channel;
        return data;
    }
}

export interface IOneflowAgreementParticipant {
    self?: number;
    position_id?: number;
    type?: number;
    fullname?: string;
    title?: string;
    email?: string;
    phone_number?: string;
    sign_method?: number;
    delivery_channel?: number;
}

export class AgreementDataValue implements IAgreementDataValue {
    external_key?: string;
    value?: string;

    constructor(data?: IAgreementDataValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.external_key = data["external_key"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): AgreementDataValue {
        let result = new AgreementDataValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["external_key"] = this.external_key;
        data["value"] = this.value;
        return data;
    }
}

export interface IAgreementDataValue {
    external_key?: string;
    value?: string;
}

export class BuyOrder implements IBuyOrder {
    OrderDate?: DateEpoch;
    OrderId?: string;
    ExternalTransactionId?: string;
    Verified?: boolean;
    VerifiedComment?: string;
    SubscriptionOrDeliveriesGenerated?: boolean;
    ReceiptOrInvoiceId?: number;
    id?: string;
    PersonId?: number;
    LegalPersonTypeId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    Name?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    Doorcode?: string;
    Email?: string;
    CellPhone?: string;
    Phone?: string;
    ExternalSubscriptionId?: string;
    ExternalAddressSelector?: string;
    TermsOfPaymentId?: string;
    TermsOfPaymentName?: string;
    TermsOfPaymentPrice?: number;
    TermsOfPaymentVat?: number;
    TermsOfPaymentPriceInclVat?: number;
    TermsOfDeliveryId?: string;
    TermsOfDeliveryName?: string;
    TermsOfDeliveryPrice?: number;
    TermsOfDeliveryVat?: number;
    TermsOfDeliveryPriceInclVat?: number;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    OrderComment?: string;
    AcceptedTerms?: boolean;
    ShippingTag?: string;
    ReferredByPersonId?: number;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    TotalVat?: number;
    AcceptTermsOfServiceId?: string;
    AcceptPrivacyPolicyId?: string;
    Products?: AdockaShoppingCartProduct[];
    PromoCodes?: AdockaShoppingCartPromoCode[];
    ShoppingCartProducts?: AdockaShoppingCartProduct[];

    constructor(data?: IBuyOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OrderDate = data["OrderDate"] ? DateEpoch.fromJS(data["OrderDate"]) : <any>undefined;
            this.OrderId = data["OrderId"];
            this.ExternalTransactionId = data["ExternalTransactionId"];
            this.Verified = data["Verified"];
            this.VerifiedComment = data["VerifiedComment"];
            this.SubscriptionOrDeliveriesGenerated = data["SubscriptionOrDeliveriesGenerated"];
            this.ReceiptOrInvoiceId = data["ReceiptOrInvoiceId"];
            this.id = data["id"];
            this.PersonId = data["PersonId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.Name = data["Name"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingName = data["ShippingName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.ShippingCountry = data["ShippingCountry"];
            this.Doorcode = data["Doorcode"];
            this.Email = data["Email"];
            this.CellPhone = data["CellPhone"];
            this.Phone = data["Phone"];
            this.ExternalSubscriptionId = data["ExternalSubscriptionId"];
            this.ExternalAddressSelector = data["ExternalAddressSelector"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfPaymentName = data["TermsOfPaymentName"];
            this.TermsOfPaymentPrice = data["TermsOfPaymentPrice"];
            this.TermsOfPaymentVat = data["TermsOfPaymentVat"];
            this.TermsOfPaymentPriceInclVat = data["TermsOfPaymentPriceInclVat"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.TermsOfDeliveryName = data["TermsOfDeliveryName"];
            this.TermsOfDeliveryPrice = data["TermsOfDeliveryPrice"];
            this.TermsOfDeliveryVat = data["TermsOfDeliveryVat"];
            this.TermsOfDeliveryPriceInclVat = data["TermsOfDeliveryPriceInclVat"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.OrderComment = data["OrderComment"];
            this.AcceptedTerms = data["AcceptedTerms"];
            this.ShippingTag = data["ShippingTag"];
            this.ReferredByPersonId = data["ReferredByPersonId"];
            this.OrderValueExclVat = data["OrderValueExclVat"];
            this.OrderValueInclVat = data["OrderValueInclVat"];
            this.OrderVat = data["OrderVat"];
            this.Discount = data["Discount"];
            this.DiscountVat = data["DiscountVat"];
            this.DiscountInclVat = data["DiscountInclVat"];
            this.DiscountDescription = data["DiscountDescription"];
            this.TotalValueExclVat = data["TotalValueExclVat"];
            this.TotalValueInclVat = data["TotalValueInclVat"];
            this.TotalVat = data["TotalVat"];
            this.AcceptTermsOfServiceId = data["AcceptTermsOfServiceId"];
            this.AcceptPrivacyPolicyId = data["AcceptPrivacyPolicyId"];
            if (data["Products"] && data["Products"].constructor === Array) {
                this.Products = [];
                for (let item of data["Products"])
                    this.Products.push(AdockaShoppingCartProduct.fromJS(item));
            }
            if (data["PromoCodes"] && data["PromoCodes"].constructor === Array) {
                this.PromoCodes = [];
                for (let item of data["PromoCodes"])
                    this.PromoCodes.push(AdockaShoppingCartPromoCode.fromJS(item));
            }
            if (data["ShoppingCartProducts"] && data["ShoppingCartProducts"].constructor === Array) {
                this.ShoppingCartProducts = [];
                for (let item of data["ShoppingCartProducts"])
                    this.ShoppingCartProducts.push(AdockaShoppingCartProduct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BuyOrder {
        let result = new BuyOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderDate"] = this.OrderDate ? this.OrderDate.toJSON() : <any>undefined;
        data["OrderId"] = this.OrderId;
        data["ExternalTransactionId"] = this.ExternalTransactionId;
        data["Verified"] = this.Verified;
        data["VerifiedComment"] = this.VerifiedComment;
        data["SubscriptionOrDeliveriesGenerated"] = this.SubscriptionOrDeliveriesGenerated;
        data["ReceiptOrInvoiceId"] = this.ReceiptOrInvoiceId;
        data["id"] = this.id;
        data["PersonId"] = this.PersonId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["Name"] = this.Name;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingName"] = this.ShippingName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["ShippingCountry"] = this.ShippingCountry;
        data["Doorcode"] = this.Doorcode;
        data["Email"] = this.Email;
        data["CellPhone"] = this.CellPhone;
        data["Phone"] = this.Phone;
        data["ExternalSubscriptionId"] = this.ExternalSubscriptionId;
        data["ExternalAddressSelector"] = this.ExternalAddressSelector;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfPaymentName"] = this.TermsOfPaymentName;
        data["TermsOfPaymentPrice"] = this.TermsOfPaymentPrice;
        data["TermsOfPaymentVat"] = this.TermsOfPaymentVat;
        data["TermsOfPaymentPriceInclVat"] = this.TermsOfPaymentPriceInclVat;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["TermsOfDeliveryName"] = this.TermsOfDeliveryName;
        data["TermsOfDeliveryPrice"] = this.TermsOfDeliveryPrice;
        data["TermsOfDeliveryVat"] = this.TermsOfDeliveryVat;
        data["TermsOfDeliveryPriceInclVat"] = this.TermsOfDeliveryPriceInclVat;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["OrderComment"] = this.OrderComment;
        data["AcceptedTerms"] = this.AcceptedTerms;
        data["ShippingTag"] = this.ShippingTag;
        data["ReferredByPersonId"] = this.ReferredByPersonId;
        data["OrderValueExclVat"] = this.OrderValueExclVat;
        data["OrderValueInclVat"] = this.OrderValueInclVat;
        data["OrderVat"] = this.OrderVat;
        data["Discount"] = this.Discount;
        data["DiscountVat"] = this.DiscountVat;
        data["DiscountInclVat"] = this.DiscountInclVat;
        data["DiscountDescription"] = this.DiscountDescription;
        data["TotalValueExclVat"] = this.TotalValueExclVat;
        data["TotalValueInclVat"] = this.TotalValueInclVat;
        data["TotalVat"] = this.TotalVat;
        data["AcceptTermsOfServiceId"] = this.AcceptTermsOfServiceId;
        data["AcceptPrivacyPolicyId"] = this.AcceptPrivacyPolicyId;
        if (this.Products && this.Products.constructor === Array) {
            data["Products"] = [];
            for (let item of this.Products)
                data["Products"].push(item.toJSON());
        }
        if (this.PromoCodes && this.PromoCodes.constructor === Array) {
            data["PromoCodes"] = [];
            for (let item of this.PromoCodes)
                data["PromoCodes"].push(item.toJSON());
        }
        if (this.ShoppingCartProducts && this.ShoppingCartProducts.constructor === Array) {
            data["ShoppingCartProducts"] = [];
            for (let item of this.ShoppingCartProducts)
                data["ShoppingCartProducts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBuyOrder {
    OrderDate?: DateEpoch;
    OrderId?: string;
    ExternalTransactionId?: string;
    Verified?: boolean;
    VerifiedComment?: string;
    SubscriptionOrDeliveriesGenerated?: boolean;
    ReceiptOrInvoiceId?: number;
    id?: string;
    PersonId?: number;
    LegalPersonTypeId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    Name?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    Doorcode?: string;
    Email?: string;
    CellPhone?: string;
    Phone?: string;
    ExternalSubscriptionId?: string;
    ExternalAddressSelector?: string;
    TermsOfPaymentId?: string;
    TermsOfPaymentName?: string;
    TermsOfPaymentPrice?: number;
    TermsOfPaymentVat?: number;
    TermsOfPaymentPriceInclVat?: number;
    TermsOfDeliveryId?: string;
    TermsOfDeliveryName?: string;
    TermsOfDeliveryPrice?: number;
    TermsOfDeliveryVat?: number;
    TermsOfDeliveryPriceInclVat?: number;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    OrderComment?: string;
    AcceptedTerms?: boolean;
    ShippingTag?: string;
    ReferredByPersonId?: number;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    TotalVat?: number;
    AcceptTermsOfServiceId?: string;
    AcceptPrivacyPolicyId?: string;
    Products?: AdockaShoppingCartProduct[];
    PromoCodes?: AdockaShoppingCartPromoCode[];
    ShoppingCartProducts?: AdockaShoppingCartProduct[];
}

export class AdockaShoppingCartProduct implements IAdockaShoppingCartProduct {
    Qty?: number;
    ItemNameUrlFriendly?: string;
    DeliveryDate?: Date;
    SubscriptionEndDate?: Date;
    ProductSizeId?: number;
    ProductSizeName?: string;
    ProductColorId?: number;
    ProductColorName?: string;
    ProductId?: number;
    ProductSubscriptionOptionId?: number;
    ProductSubscriptionOptionName?: string;
    CurrentTotalValueExclVat?: number;
    CurrentTotalValueInclVat?: number;
    CustomProductId?: number;
    Name?: string;
    DisplayName?: string;
    ShortName?: string;
    ShortDescription?: string;
    ImageUrl?: string;
    Vat?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    WeightDescription?: string;
    BuyPrice?: number;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    CategoryId?: number;
    MetaHashTags?: string;
    MetaHashTagsArray?: string[];
    CountryId?: string;
    CurrencyId?: string;
    QtyDeliveries?: number;
    DealPrice?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    TotalVat?: number;

    constructor(data?: IAdockaShoppingCartProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Qty = data["Qty"];
            this.ItemNameUrlFriendly = data["ItemNameUrlFriendly"];
            this.DeliveryDate = data["DeliveryDate"] ? new Date(data["DeliveryDate"].toString()) : <any>undefined;
            this.SubscriptionEndDate = data["SubscriptionEndDate"] ? new Date(data["SubscriptionEndDate"].toString()) : <any>undefined;
            this.ProductSizeId = data["ProductSizeId"];
            this.ProductSizeName = data["ProductSizeName"];
            this.ProductColorId = data["ProductColorId"];
            this.ProductColorName = data["ProductColorName"];
            this.ProductId = data["ProductId"];
            this.ProductSubscriptionOptionId = data["ProductSubscriptionOptionId"];
            this.ProductSubscriptionOptionName = data["ProductSubscriptionOptionName"];
            this.CurrentTotalValueExclVat = data["CurrentTotalValueExclVat"];
            this.CurrentTotalValueInclVat = data["CurrentTotalValueInclVat"];
            this.CustomProductId = data["CustomProductId"];
            this.Name = data["Name"];
            this.DisplayName = data["DisplayName"];
            this.ShortName = data["ShortName"];
            this.ShortDescription = data["ShortDescription"];
            this.ImageUrl = data["ImageUrl"];
            this.Vat = data["Vat"];
            this.Uom = data["Uom"];
            this.SalesQuantity = data["SalesQuantity"];
            this.PackageSize = data["PackageSize"];
            this.WeightDescription = data["WeightDescription"];
            this.BuyPrice = data["BuyPrice"];
            this.Size = data["Size"];
            this.Color = data["Color"];
            this.SellingPrice = data["SellingPrice"];
            this.GroupedByProductId = data["GroupedByProductId"];
            this.CategoryId = data["CategoryId"];
            this.MetaHashTags = data["MetaHashTags"];
            if (data["MetaHashTagsArray"] && data["MetaHashTagsArray"].constructor === Array) {
                this.MetaHashTagsArray = [];
                for (let item of data["MetaHashTagsArray"])
                    this.MetaHashTagsArray.push(item);
            }
            this.CountryId = data["CountryId"];
            this.CurrencyId = data["CurrencyId"];
            this.QtyDeliveries = data["QtyDeliveries"];
            this.DealPrice = data["DealPrice"];
            this.CurrentSellingPrice = data["CurrentSellingPrice"];
            this.CurrentSellingPriceInclVat = data["CurrentSellingPriceInclVat"];
            this.TotalVat = data["TotalVat"];
        }
    }

    static fromJS(data: any): AdockaShoppingCartProduct {
        let result = new AdockaShoppingCartProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Qty"] = this.Qty;
        data["ItemNameUrlFriendly"] = this.ItemNameUrlFriendly;
        data["DeliveryDate"] = this.DeliveryDate ? this.DeliveryDate.toISOString() : <any>undefined;
        data["SubscriptionEndDate"] = this.SubscriptionEndDate ? this.SubscriptionEndDate.toISOString() : <any>undefined;
        data["ProductSizeId"] = this.ProductSizeId;
        data["ProductSizeName"] = this.ProductSizeName;
        data["ProductColorId"] = this.ProductColorId;
        data["ProductColorName"] = this.ProductColorName;
        data["ProductId"] = this.ProductId;
        data["ProductSubscriptionOptionId"] = this.ProductSubscriptionOptionId;
        data["ProductSubscriptionOptionName"] = this.ProductSubscriptionOptionName;
        data["CurrentTotalValueExclVat"] = this.CurrentTotalValueExclVat;
        data["CurrentTotalValueInclVat"] = this.CurrentTotalValueInclVat;
        data["CustomProductId"] = this.CustomProductId;
        data["Name"] = this.Name;
        data["DisplayName"] = this.DisplayName;
        data["ShortName"] = this.ShortName;
        data["ShortDescription"] = this.ShortDescription;
        data["ImageUrl"] = this.ImageUrl;
        data["Vat"] = this.Vat;
        data["Uom"] = this.Uom;
        data["SalesQuantity"] = this.SalesQuantity;
        data["PackageSize"] = this.PackageSize;
        data["WeightDescription"] = this.WeightDescription;
        data["BuyPrice"] = this.BuyPrice;
        data["Size"] = this.Size;
        data["Color"] = this.Color;
        data["SellingPrice"] = this.SellingPrice;
        data["GroupedByProductId"] = this.GroupedByProductId;
        data["CategoryId"] = this.CategoryId;
        data["MetaHashTags"] = this.MetaHashTags;
        if (this.MetaHashTagsArray && this.MetaHashTagsArray.constructor === Array) {
            data["MetaHashTagsArray"] = [];
            for (let item of this.MetaHashTagsArray)
                data["MetaHashTagsArray"].push(item);
        }
        data["CountryId"] = this.CountryId;
        data["CurrencyId"] = this.CurrencyId;
        data["QtyDeliveries"] = this.QtyDeliveries;
        data["DealPrice"] = this.DealPrice;
        data["CurrentSellingPrice"] = this.CurrentSellingPrice;
        data["CurrentSellingPriceInclVat"] = this.CurrentSellingPriceInclVat;
        data["TotalVat"] = this.TotalVat;
        return data;
    }
}

export interface IAdockaShoppingCartProduct {
    Qty?: number;
    ItemNameUrlFriendly?: string;
    DeliveryDate?: Date;
    SubscriptionEndDate?: Date;
    ProductSizeId?: number;
    ProductSizeName?: string;
    ProductColorId?: number;
    ProductColorName?: string;
    ProductId?: number;
    ProductSubscriptionOptionId?: number;
    ProductSubscriptionOptionName?: string;
    CurrentTotalValueExclVat?: number;
    CurrentTotalValueInclVat?: number;
    CustomProductId?: number;
    Name?: string;
    DisplayName?: string;
    ShortName?: string;
    ShortDescription?: string;
    ImageUrl?: string;
    Vat?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    WeightDescription?: string;
    BuyPrice?: number;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    CategoryId?: number;
    MetaHashTags?: string;
    MetaHashTagsArray?: string[];
    CountryId?: string;
    CurrencyId?: string;
    QtyDeliveries?: number;
    DealPrice?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    TotalVat?: number;
}

export class AdockaShoppingCartPromoCode implements IAdockaShoppingCartPromoCode {
    PromoCodeId?: number;
    TheCode?: string;
    Description?: string;
    ValidThru?: Date;
    Value?: number;
    IsRelativeValue?: boolean;
    CurrencyId?: string;

    constructor(data?: IAdockaShoppingCartPromoCode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PromoCodeId = data["PromoCodeId"];
            this.TheCode = data["TheCode"];
            this.Description = data["Description"];
            this.ValidThru = data["ValidThru"] ? new Date(data["ValidThru"].toString()) : <any>undefined;
            this.Value = data["Value"];
            this.IsRelativeValue = data["IsRelativeValue"];
            this.CurrencyId = data["CurrencyId"];
        }
    }

    static fromJS(data: any): AdockaShoppingCartPromoCode {
        let result = new AdockaShoppingCartPromoCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PromoCodeId"] = this.PromoCodeId;
        data["TheCode"] = this.TheCode;
        data["Description"] = this.Description;
        data["ValidThru"] = this.ValidThru ? this.ValidThru.toISOString() : <any>undefined;
        data["Value"] = this.Value;
        data["IsRelativeValue"] = this.IsRelativeValue;
        data["CurrencyId"] = this.CurrencyId;
        return data;
    }
}

export interface IAdockaShoppingCartPromoCode {
    PromoCodeId?: number;
    TheCode?: string;
    Description?: string;
    ValidThru?: Date;
    Value?: number;
    IsRelativeValue?: boolean;
    CurrencyId?: string;
}

export class OrdersListResult implements IOrdersListResult {
    ServerTick?: number;
    ServerDate?: Date;
    Orders?: BuyOrder[];

    constructor(data?: IOrdersListResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ServerTick = data["ServerTick"];
            this.ServerDate = data["ServerDate"] ? new Date(data["ServerDate"].toString()) : <any>undefined;
            if (data["Orders"] && data["Orders"].constructor === Array) {
                this.Orders = [];
                for (let item of data["Orders"])
                    this.Orders.push(BuyOrder.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrdersListResult {
        let result = new OrdersListResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ServerTick"] = this.ServerTick;
        data["ServerDate"] = this.ServerDate ? this.ServerDate.toISOString() : <any>undefined;
        if (this.Orders && this.Orders.constructor === Array) {
            data["Orders"] = [];
            for (let item of this.Orders)
                data["Orders"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOrdersListResult {
    ServerTick?: number;
    ServerDate?: Date;
    Orders?: BuyOrder[];
}

export class PlainOrderTransactionDetails implements IPlainOrderTransactionDetails {
    OrderDate?: DateEpoch;
    OrderId?: string;
    Verified?: boolean;
    VerifiedComment?: string;
    LegalPersonTypeId?: number;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    TotalVat?: number;
    Products?: AdockaShoppingCartProduct[];

    constructor(data?: IPlainOrderTransactionDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OrderDate = data["OrderDate"] ? DateEpoch.fromJS(data["OrderDate"]) : <any>undefined;
            this.OrderId = data["OrderId"];
            this.Verified = data["Verified"];
            this.VerifiedComment = data["VerifiedComment"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.OrderValueExclVat = data["OrderValueExclVat"];
            this.OrderValueInclVat = data["OrderValueInclVat"];
            this.OrderVat = data["OrderVat"];
            this.Discount = data["Discount"];
            this.DiscountVat = data["DiscountVat"];
            this.DiscountInclVat = data["DiscountInclVat"];
            this.DiscountDescription = data["DiscountDescription"];
            this.TotalValueExclVat = data["TotalValueExclVat"];
            this.TotalValueInclVat = data["TotalValueInclVat"];
            this.TotalVat = data["TotalVat"];
            if (data["Products"] && data["Products"].constructor === Array) {
                this.Products = [];
                for (let item of data["Products"])
                    this.Products.push(AdockaShoppingCartProduct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlainOrderTransactionDetails {
        let result = new PlainOrderTransactionDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OrderDate"] = this.OrderDate ? this.OrderDate.toJSON() : <any>undefined;
        data["OrderId"] = this.OrderId;
        data["Verified"] = this.Verified;
        data["VerifiedComment"] = this.VerifiedComment;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["OrderValueExclVat"] = this.OrderValueExclVat;
        data["OrderValueInclVat"] = this.OrderValueInclVat;
        data["OrderVat"] = this.OrderVat;
        data["Discount"] = this.Discount;
        data["DiscountVat"] = this.DiscountVat;
        data["DiscountInclVat"] = this.DiscountInclVat;
        data["DiscountDescription"] = this.DiscountDescription;
        data["TotalValueExclVat"] = this.TotalValueExclVat;
        data["TotalValueInclVat"] = this.TotalValueInclVat;
        data["TotalVat"] = this.TotalVat;
        if (this.Products && this.Products.constructor === Array) {
            data["Products"] = [];
            for (let item of this.Products)
                data["Products"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPlainOrderTransactionDetails {
    OrderDate?: DateEpoch;
    OrderId?: string;
    Verified?: boolean;
    VerifiedComment?: string;
    LegalPersonTypeId?: number;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    OrderValueExclVat?: number;
    OrderValueInclVat?: number;
    OrderVat?: number;
    Discount?: number;
    DiscountVat?: number;
    DiscountInclVat?: number;
    DiscountDescription?: string;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    TotalVat?: number;
    Products?: AdockaShoppingCartProduct[];
}

export class PaymentsSearchModel implements IPaymentsSearchModel {
    SearchStr?: string;
    CreatedByPersonId?: number;
    Editable?: boolean;
    TermsOfPaymentId?: string;
    IsPayed?: boolean;
    Skip?: number;
    Take?: number;

    constructor(data?: IPaymentsSearchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SearchStr = data["SearchStr"];
            this.CreatedByPersonId = data["CreatedByPersonId"];
            this.Editable = data["Editable"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.IsPayed = data["IsPayed"];
            this.Skip = data["Skip"];
            this.Take = data["Take"];
        }
    }

    static fromJS(data: any): PaymentsSearchModel {
        let result = new PaymentsSearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchStr"] = this.SearchStr;
        data["CreatedByPersonId"] = this.CreatedByPersonId;
        data["Editable"] = this.Editable;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["IsPayed"] = this.IsPayed;
        data["Skip"] = this.Skip;
        data["Take"] = this.Take;
        return data;
    }
}

export interface IPaymentsSearchModel {
    SearchStr?: string;
    CreatedByPersonId?: number;
    Editable?: boolean;
    TermsOfPaymentId?: string;
    IsPayed?: boolean;
    Skip?: number;
    Take?: number;
}

export class PaymentsResultModel implements IPaymentsResultModel {
    Skip?: number;
    Take?: number;
    TotalNrResult?: number;
    TotalNrPages?: number;
    Result?: InvoiceNoProducts[];

    constructor(data?: IPaymentsResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Skip = data["Skip"];
            this.Take = data["Take"];
            this.TotalNrResult = data["TotalNrResult"];
            this.TotalNrPages = data["TotalNrPages"];
            if (data["Result"] && data["Result"].constructor === Array) {
                this.Result = [];
                for (let item of data["Result"])
                    this.Result.push(InvoiceNoProducts.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaymentsResultModel {
        let result = new PaymentsResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Skip"] = this.Skip;
        data["Take"] = this.Take;
        data["TotalNrResult"] = this.TotalNrResult;
        data["TotalNrPages"] = this.TotalNrPages;
        if (this.Result && this.Result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.Result)
                data["Result"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPaymentsResultModel {
    Skip?: number;
    Take?: number;
    TotalNrResult?: number;
    TotalNrPages?: number;
    Result?: InvoiceNoProducts[];
}

export class InvoiceNoProducts implements IInvoiceNoProducts {
    InvoiceId?: number;
    InvoiceDate?: Date;
    Comment?: string;
    PersonId?: number;
    InvoiceStatusId?: number;
    OrderId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    OrderCountry?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    CellPhone?: string;
    Email?: string;
    RoleId?: number;
    ProjectId?: number;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    CostCenter?: string;
    DeliveryDate?: Date;
    YourOrderId?: string;
    InvoiceCost?: number;
    Phone?: string;
    Doorcode?: string;
    TermsOfPaymentQtyDaysId?: number;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    OurInvoiceId?: number;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    Reference?: string;
    ShippingReference?: string;
    PrintTemplateId?: number;
    InvoiceActionSentByEmail?: Date;
    InvoiceActionPrinted?: Date;
    InvoiceActionSold?: Date;
    OwnesByPersonId?: number;
    InvoiceActionPayedDate?: Date;
    InvoiceActionPayedAmount?: number;
    ReminderActionSentByEmail?: Date;
    Reminder2ActionSentByEmail?: Date;
    ReminderActionPrinted?: Date;
    ReminderAction2Printed?: Date;
    InvoiceActionOnHold?: Date;
    InvoiceActionCanceled?: Date;
    ExternalAddressSelector?: string;
    ExternalOrderId?: string;
    ExternalProjectNo?: string;
    ReferredByPersonId?: number;
    QtyInvoicePayments?: number;
    Balance?: number;
    FullyPaid?: boolean;
    CreatedDate?: Date;
    ShippingComment?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    InvoiceCostInclVat?: number;
    InvoiceValueExclVat?: number;
    InvoiceValueInclVat?: number;
    InvoiceVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    TotalVat?: number;
    Editable?: boolean;
    Context?: Context;

    constructor(data?: IInvoiceNoProducts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.InvoiceId = data["InvoiceId"];
            this.InvoiceDate = data["InvoiceDate"] ? new Date(data["InvoiceDate"].toString()) : <any>undefined;
            this.Comment = data["Comment"];
            this.PersonId = data["PersonId"];
            this.InvoiceStatusId = data["InvoiceStatusId"];
            this.OrderId = data["OrderId"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.OrderCountry = data["OrderCountry"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.ShippingCountry = data["ShippingCountry"];
            this.CellPhone = data["CellPhone"];
            this.Email = data["Email"];
            this.RoleId = data["RoleId"];
            this.ProjectId = data["ProjectId"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.WayOfDeliveryId = data["WayOfDeliveryId"];
            this.OurReference = data["OurReference"];
            this.YourReference = data["YourReference"];
            this.CostCenter = data["CostCenter"];
            this.DeliveryDate = data["DeliveryDate"] ? new Date(data["DeliveryDate"].toString()) : <any>undefined;
            this.YourOrderId = data["YourOrderId"];
            this.InvoiceCost = data["InvoiceCost"];
            this.Phone = data["Phone"];
            this.Doorcode = data["Doorcode"];
            this.TermsOfPaymentQtyDaysId = data["TermsOfPaymentQtyDaysId"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.OurInvoiceId = data["OurInvoiceId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.Reference = data["Reference"];
            this.ShippingReference = data["ShippingReference"];
            this.PrintTemplateId = data["PrintTemplateId"];
            this.InvoiceActionSentByEmail = data["InvoiceActionSentByEmail"] ? new Date(data["InvoiceActionSentByEmail"].toString()) : <any>undefined;
            this.InvoiceActionPrinted = data["InvoiceActionPrinted"] ? new Date(data["InvoiceActionPrinted"].toString()) : <any>undefined;
            this.InvoiceActionSold = data["InvoiceActionSold"] ? new Date(data["InvoiceActionSold"].toString()) : <any>undefined;
            this.OwnesByPersonId = data["OwnesByPersonId"];
            this.InvoiceActionPayedDate = data["InvoiceActionPayedDate"] ? new Date(data["InvoiceActionPayedDate"].toString()) : <any>undefined;
            this.InvoiceActionPayedAmount = data["InvoiceActionPayedAmount"];
            this.ReminderActionSentByEmail = data["ReminderActionSentByEmail"] ? new Date(data["ReminderActionSentByEmail"].toString()) : <any>undefined;
            this.Reminder2ActionSentByEmail = data["Reminder2ActionSentByEmail"] ? new Date(data["Reminder2ActionSentByEmail"].toString()) : <any>undefined;
            this.ReminderActionPrinted = data["ReminderActionPrinted"] ? new Date(data["ReminderActionPrinted"].toString()) : <any>undefined;
            this.ReminderAction2Printed = data["ReminderAction2Printed"] ? new Date(data["ReminderAction2Printed"].toString()) : <any>undefined;
            this.InvoiceActionOnHold = data["InvoiceActionOnHold"] ? new Date(data["InvoiceActionOnHold"].toString()) : <any>undefined;
            this.InvoiceActionCanceled = data["InvoiceActionCanceled"] ? new Date(data["InvoiceActionCanceled"].toString()) : <any>undefined;
            this.ExternalAddressSelector = data["ExternalAddressSelector"];
            this.ExternalOrderId = data["ExternalOrderId"];
            this.ExternalProjectNo = data["ExternalProjectNo"];
            this.ReferredByPersonId = data["ReferredByPersonId"];
            this.QtyInvoicePayments = data["QtyInvoicePayments"];
            this.Balance = data["Balance"];
            this.FullyPaid = data["FullyPaid"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.ShippingComment = data["ShippingComment"];
            this.ShippingLongitude = data["ShippingLongitude"];
            this.ShippingLatitude = data["ShippingLatitude"];
            this.InvoiceCostInclVat = data["InvoiceCostInclVat"];
            this.InvoiceValueExclVat = data["InvoiceValueExclVat"];
            this.InvoiceValueInclVat = data["InvoiceValueInclVat"];
            this.InvoiceVat = data["InvoiceVat"];
            this.TotalValueExclVat = data["TotalValueExclVat"];
            this.TotalValueInclVat = data["TotalValueInclVat"];
            this.TotalVat = data["TotalVat"];
            this.Editable = data["Editable"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InvoiceNoProducts {
        let result = new InvoiceNoProducts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["InvoiceId"] = this.InvoiceId;
        data["InvoiceDate"] = this.InvoiceDate ? this.InvoiceDate.toISOString() : <any>undefined;
        data["Comment"] = this.Comment;
        data["PersonId"] = this.PersonId;
        data["InvoiceStatusId"] = this.InvoiceStatusId;
        data["OrderId"] = this.OrderId;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["OrderCountry"] = this.OrderCountry;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["ShippingCountry"] = this.ShippingCountry;
        data["CellPhone"] = this.CellPhone;
        data["Email"] = this.Email;
        data["RoleId"] = this.RoleId;
        data["ProjectId"] = this.ProjectId;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["WayOfDeliveryId"] = this.WayOfDeliveryId;
        data["OurReference"] = this.OurReference;
        data["YourReference"] = this.YourReference;
        data["CostCenter"] = this.CostCenter;
        data["DeliveryDate"] = this.DeliveryDate ? this.DeliveryDate.toISOString() : <any>undefined;
        data["YourOrderId"] = this.YourOrderId;
        data["InvoiceCost"] = this.InvoiceCost;
        data["Phone"] = this.Phone;
        data["Doorcode"] = this.Doorcode;
        data["TermsOfPaymentQtyDaysId"] = this.TermsOfPaymentQtyDaysId;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["OurInvoiceId"] = this.OurInvoiceId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["Reference"] = this.Reference;
        data["ShippingReference"] = this.ShippingReference;
        data["PrintTemplateId"] = this.PrintTemplateId;
        data["InvoiceActionSentByEmail"] = this.InvoiceActionSentByEmail ? this.InvoiceActionSentByEmail.toISOString() : <any>undefined;
        data["InvoiceActionPrinted"] = this.InvoiceActionPrinted ? this.InvoiceActionPrinted.toISOString() : <any>undefined;
        data["InvoiceActionSold"] = this.InvoiceActionSold ? this.InvoiceActionSold.toISOString() : <any>undefined;
        data["OwnesByPersonId"] = this.OwnesByPersonId;
        data["InvoiceActionPayedDate"] = this.InvoiceActionPayedDate ? this.InvoiceActionPayedDate.toISOString() : <any>undefined;
        data["InvoiceActionPayedAmount"] = this.InvoiceActionPayedAmount;
        data["ReminderActionSentByEmail"] = this.ReminderActionSentByEmail ? this.ReminderActionSentByEmail.toISOString() : <any>undefined;
        data["Reminder2ActionSentByEmail"] = this.Reminder2ActionSentByEmail ? this.Reminder2ActionSentByEmail.toISOString() : <any>undefined;
        data["ReminderActionPrinted"] = this.ReminderActionPrinted ? this.ReminderActionPrinted.toISOString() : <any>undefined;
        data["ReminderAction2Printed"] = this.ReminderAction2Printed ? this.ReminderAction2Printed.toISOString() : <any>undefined;
        data["InvoiceActionOnHold"] = this.InvoiceActionOnHold ? this.InvoiceActionOnHold.toISOString() : <any>undefined;
        data["InvoiceActionCanceled"] = this.InvoiceActionCanceled ? this.InvoiceActionCanceled.toISOString() : <any>undefined;
        data["ExternalAddressSelector"] = this.ExternalAddressSelector;
        data["ExternalOrderId"] = this.ExternalOrderId;
        data["ExternalProjectNo"] = this.ExternalProjectNo;
        data["ReferredByPersonId"] = this.ReferredByPersonId;
        data["QtyInvoicePayments"] = this.QtyInvoicePayments;
        data["Balance"] = this.Balance;
        data["FullyPaid"] = this.FullyPaid;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["ShippingComment"] = this.ShippingComment;
        data["ShippingLongitude"] = this.ShippingLongitude;
        data["ShippingLatitude"] = this.ShippingLatitude;
        data["InvoiceCostInclVat"] = this.InvoiceCostInclVat;
        data["InvoiceValueExclVat"] = this.InvoiceValueExclVat;
        data["InvoiceValueInclVat"] = this.InvoiceValueInclVat;
        data["InvoiceVat"] = this.InvoiceVat;
        data["TotalValueExclVat"] = this.TotalValueExclVat;
        data["TotalValueInclVat"] = this.TotalValueInclVat;
        data["TotalVat"] = this.TotalVat;
        data["Editable"] = this.Editable;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IInvoiceNoProducts {
    InvoiceId?: number;
    InvoiceDate?: Date;
    Comment?: string;
    PersonId?: number;
    InvoiceStatusId?: number;
    OrderId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    OrderCountry?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    CellPhone?: string;
    Email?: string;
    RoleId?: number;
    ProjectId?: number;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    CostCenter?: string;
    DeliveryDate?: Date;
    YourOrderId?: string;
    InvoiceCost?: number;
    Phone?: string;
    Doorcode?: string;
    TermsOfPaymentQtyDaysId?: number;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    OurInvoiceId?: number;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    Reference?: string;
    ShippingReference?: string;
    PrintTemplateId?: number;
    InvoiceActionSentByEmail?: Date;
    InvoiceActionPrinted?: Date;
    InvoiceActionSold?: Date;
    OwnesByPersonId?: number;
    InvoiceActionPayedDate?: Date;
    InvoiceActionPayedAmount?: number;
    ReminderActionSentByEmail?: Date;
    Reminder2ActionSentByEmail?: Date;
    ReminderActionPrinted?: Date;
    ReminderAction2Printed?: Date;
    InvoiceActionOnHold?: Date;
    InvoiceActionCanceled?: Date;
    ExternalAddressSelector?: string;
    ExternalOrderId?: string;
    ExternalProjectNo?: string;
    ReferredByPersonId?: number;
    QtyInvoicePayments?: number;
    Balance?: number;
    FullyPaid?: boolean;
    CreatedDate?: Date;
    ShippingComment?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    InvoiceCostInclVat?: number;
    InvoiceValueExclVat?: number;
    InvoiceValueInclVat?: number;
    InvoiceVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    TotalVat?: number;
    Editable?: boolean;
    Context?: Context;
}

export class Invoice implements IInvoice {
    InvoiceProducts?: InvoiceProduct[];
    InvoiceId?: number;
    InvoiceDate?: Date;
    Comment?: string;
    PersonId?: number;
    InvoiceStatusId?: number;
    OrderId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    OrderCountry?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    CellPhone?: string;
    Email?: string;
    RoleId?: number;
    ProjectId?: number;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    CostCenter?: string;
    DeliveryDate?: Date;
    YourOrderId?: string;
    InvoiceCost?: number;
    Phone?: string;
    Doorcode?: string;
    TermsOfPaymentQtyDaysId?: number;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    OurInvoiceId?: number;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    Reference?: string;
    ShippingReference?: string;
    PrintTemplateId?: number;
    InvoiceActionSentByEmail?: Date;
    InvoiceActionPrinted?: Date;
    InvoiceActionSold?: Date;
    OwnesByPersonId?: number;
    InvoiceActionPayedDate?: Date;
    InvoiceActionPayedAmount?: number;
    ReminderActionSentByEmail?: Date;
    Reminder2ActionSentByEmail?: Date;
    ReminderActionPrinted?: Date;
    ReminderAction2Printed?: Date;
    InvoiceActionOnHold?: Date;
    InvoiceActionCanceled?: Date;
    ExternalAddressSelector?: string;
    ExternalOrderId?: string;
    ExternalProjectNo?: string;
    ReferredByPersonId?: number;
    QtyInvoicePayments?: number;
    Balance?: number;
    FullyPaid?: boolean;
    CreatedDate?: Date;
    ShippingComment?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    InvoiceCostInclVat?: number;
    InvoiceValueExclVat?: number;
    InvoiceValueInclVat?: number;
    InvoiceVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    TotalVat?: number;
    Editable?: boolean;
    Context?: Context;

    constructor(data?: IInvoice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["InvoiceProducts"] && data["InvoiceProducts"].constructor === Array) {
                this.InvoiceProducts = [];
                for (let item of data["InvoiceProducts"])
                    this.InvoiceProducts.push(InvoiceProduct.fromJS(item));
            }
            this.InvoiceId = data["InvoiceId"];
            this.InvoiceDate = data["InvoiceDate"] ? new Date(data["InvoiceDate"].toString()) : <any>undefined;
            this.Comment = data["Comment"];
            this.PersonId = data["PersonId"];
            this.InvoiceStatusId = data["InvoiceStatusId"];
            this.OrderId = data["OrderId"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.StreetName = data["StreetName"];
            this.PostNo = data["PostNo"];
            this.City = data["City"];
            this.OrderCountry = data["OrderCountry"];
            this.ShippingFirstName = data["ShippingFirstName"];
            this.ShippingLastName = data["ShippingLastName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.ShippingCountry = data["ShippingCountry"];
            this.CellPhone = data["CellPhone"];
            this.Email = data["Email"];
            this.RoleId = data["RoleId"];
            this.ProjectId = data["ProjectId"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.TermsOfDeliveryId = data["TermsOfDeliveryId"];
            this.WayOfDeliveryId = data["WayOfDeliveryId"];
            this.OurReference = data["OurReference"];
            this.YourReference = data["YourReference"];
            this.CostCenter = data["CostCenter"];
            this.DeliveryDate = data["DeliveryDate"] ? new Date(data["DeliveryDate"].toString()) : <any>undefined;
            this.YourOrderId = data["YourOrderId"];
            this.InvoiceCost = data["InvoiceCost"];
            this.Phone = data["Phone"];
            this.Doorcode = data["Doorcode"];
            this.TermsOfPaymentQtyDaysId = data["TermsOfPaymentQtyDaysId"];
            this.CountryId = data["CountryId"];
            this.LanguageId = data["LanguageId"];
            this.CurrencyId = data["CurrencyId"];
            this.OurInvoiceId = data["OurInvoiceId"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.Reference = data["Reference"];
            this.ShippingReference = data["ShippingReference"];
            this.PrintTemplateId = data["PrintTemplateId"];
            this.InvoiceActionSentByEmail = data["InvoiceActionSentByEmail"] ? new Date(data["InvoiceActionSentByEmail"].toString()) : <any>undefined;
            this.InvoiceActionPrinted = data["InvoiceActionPrinted"] ? new Date(data["InvoiceActionPrinted"].toString()) : <any>undefined;
            this.InvoiceActionSold = data["InvoiceActionSold"] ? new Date(data["InvoiceActionSold"].toString()) : <any>undefined;
            this.OwnesByPersonId = data["OwnesByPersonId"];
            this.InvoiceActionPayedDate = data["InvoiceActionPayedDate"] ? new Date(data["InvoiceActionPayedDate"].toString()) : <any>undefined;
            this.InvoiceActionPayedAmount = data["InvoiceActionPayedAmount"];
            this.ReminderActionSentByEmail = data["ReminderActionSentByEmail"] ? new Date(data["ReminderActionSentByEmail"].toString()) : <any>undefined;
            this.Reminder2ActionSentByEmail = data["Reminder2ActionSentByEmail"] ? new Date(data["Reminder2ActionSentByEmail"].toString()) : <any>undefined;
            this.ReminderActionPrinted = data["ReminderActionPrinted"] ? new Date(data["ReminderActionPrinted"].toString()) : <any>undefined;
            this.ReminderAction2Printed = data["ReminderAction2Printed"] ? new Date(data["ReminderAction2Printed"].toString()) : <any>undefined;
            this.InvoiceActionOnHold = data["InvoiceActionOnHold"] ? new Date(data["InvoiceActionOnHold"].toString()) : <any>undefined;
            this.InvoiceActionCanceled = data["InvoiceActionCanceled"] ? new Date(data["InvoiceActionCanceled"].toString()) : <any>undefined;
            this.ExternalAddressSelector = data["ExternalAddressSelector"];
            this.ExternalOrderId = data["ExternalOrderId"];
            this.ExternalProjectNo = data["ExternalProjectNo"];
            this.ReferredByPersonId = data["ReferredByPersonId"];
            this.QtyInvoicePayments = data["QtyInvoicePayments"];
            this.Balance = data["Balance"];
            this.FullyPaid = data["FullyPaid"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.ShippingComment = data["ShippingComment"];
            this.ShippingLongitude = data["ShippingLongitude"];
            this.ShippingLatitude = data["ShippingLatitude"];
            this.InvoiceCostInclVat = data["InvoiceCostInclVat"];
            this.InvoiceValueExclVat = data["InvoiceValueExclVat"];
            this.InvoiceValueInclVat = data["InvoiceValueInclVat"];
            this.InvoiceVat = data["InvoiceVat"];
            this.TotalValueExclVat = data["TotalValueExclVat"];
            this.TotalValueInclVat = data["TotalValueInclVat"];
            this.TotalVat = data["TotalVat"];
            this.Editable = data["Editable"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Invoice {
        let result = new Invoice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.InvoiceProducts && this.InvoiceProducts.constructor === Array) {
            data["InvoiceProducts"] = [];
            for (let item of this.InvoiceProducts)
                data["InvoiceProducts"].push(item.toJSON());
        }
        data["InvoiceId"] = this.InvoiceId;
        data["InvoiceDate"] = this.InvoiceDate ? this.InvoiceDate.toISOString() : <any>undefined;
        data["Comment"] = this.Comment;
        data["PersonId"] = this.PersonId;
        data["InvoiceStatusId"] = this.InvoiceStatusId;
        data["OrderId"] = this.OrderId;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["StreetName"] = this.StreetName;
        data["PostNo"] = this.PostNo;
        data["City"] = this.City;
        data["OrderCountry"] = this.OrderCountry;
        data["ShippingFirstName"] = this.ShippingFirstName;
        data["ShippingLastName"] = this.ShippingLastName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["ShippingCountry"] = this.ShippingCountry;
        data["CellPhone"] = this.CellPhone;
        data["Email"] = this.Email;
        data["RoleId"] = this.RoleId;
        data["ProjectId"] = this.ProjectId;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["TermsOfDeliveryId"] = this.TermsOfDeliveryId;
        data["WayOfDeliveryId"] = this.WayOfDeliveryId;
        data["OurReference"] = this.OurReference;
        data["YourReference"] = this.YourReference;
        data["CostCenter"] = this.CostCenter;
        data["DeliveryDate"] = this.DeliveryDate ? this.DeliveryDate.toISOString() : <any>undefined;
        data["YourOrderId"] = this.YourOrderId;
        data["InvoiceCost"] = this.InvoiceCost;
        data["Phone"] = this.Phone;
        data["Doorcode"] = this.Doorcode;
        data["TermsOfPaymentQtyDaysId"] = this.TermsOfPaymentQtyDaysId;
        data["CountryId"] = this.CountryId;
        data["LanguageId"] = this.LanguageId;
        data["CurrencyId"] = this.CurrencyId;
        data["OurInvoiceId"] = this.OurInvoiceId;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["Reference"] = this.Reference;
        data["ShippingReference"] = this.ShippingReference;
        data["PrintTemplateId"] = this.PrintTemplateId;
        data["InvoiceActionSentByEmail"] = this.InvoiceActionSentByEmail ? this.InvoiceActionSentByEmail.toISOString() : <any>undefined;
        data["InvoiceActionPrinted"] = this.InvoiceActionPrinted ? this.InvoiceActionPrinted.toISOString() : <any>undefined;
        data["InvoiceActionSold"] = this.InvoiceActionSold ? this.InvoiceActionSold.toISOString() : <any>undefined;
        data["OwnesByPersonId"] = this.OwnesByPersonId;
        data["InvoiceActionPayedDate"] = this.InvoiceActionPayedDate ? this.InvoiceActionPayedDate.toISOString() : <any>undefined;
        data["InvoiceActionPayedAmount"] = this.InvoiceActionPayedAmount;
        data["ReminderActionSentByEmail"] = this.ReminderActionSentByEmail ? this.ReminderActionSentByEmail.toISOString() : <any>undefined;
        data["Reminder2ActionSentByEmail"] = this.Reminder2ActionSentByEmail ? this.Reminder2ActionSentByEmail.toISOString() : <any>undefined;
        data["ReminderActionPrinted"] = this.ReminderActionPrinted ? this.ReminderActionPrinted.toISOString() : <any>undefined;
        data["ReminderAction2Printed"] = this.ReminderAction2Printed ? this.ReminderAction2Printed.toISOString() : <any>undefined;
        data["InvoiceActionOnHold"] = this.InvoiceActionOnHold ? this.InvoiceActionOnHold.toISOString() : <any>undefined;
        data["InvoiceActionCanceled"] = this.InvoiceActionCanceled ? this.InvoiceActionCanceled.toISOString() : <any>undefined;
        data["ExternalAddressSelector"] = this.ExternalAddressSelector;
        data["ExternalOrderId"] = this.ExternalOrderId;
        data["ExternalProjectNo"] = this.ExternalProjectNo;
        data["ReferredByPersonId"] = this.ReferredByPersonId;
        data["QtyInvoicePayments"] = this.QtyInvoicePayments;
        data["Balance"] = this.Balance;
        data["FullyPaid"] = this.FullyPaid;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["ShippingComment"] = this.ShippingComment;
        data["ShippingLongitude"] = this.ShippingLongitude;
        data["ShippingLatitude"] = this.ShippingLatitude;
        data["InvoiceCostInclVat"] = this.InvoiceCostInclVat;
        data["InvoiceValueExclVat"] = this.InvoiceValueExclVat;
        data["InvoiceValueInclVat"] = this.InvoiceValueInclVat;
        data["InvoiceVat"] = this.InvoiceVat;
        data["TotalValueExclVat"] = this.TotalValueExclVat;
        data["TotalValueInclVat"] = this.TotalValueInclVat;
        data["TotalVat"] = this.TotalVat;
        data["Editable"] = this.Editable;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IInvoice {
    InvoiceProducts?: InvoiceProduct[];
    InvoiceId?: number;
    InvoiceDate?: Date;
    Comment?: string;
    PersonId?: number;
    InvoiceStatusId?: number;
    OrderId?: number;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    StreetName?: string;
    PostNo?: string;
    City?: string;
    OrderCountry?: string;
    ShippingFirstName?: string;
    ShippingLastName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    CellPhone?: string;
    Email?: string;
    RoleId?: number;
    ProjectId?: number;
    TermsOfPaymentId?: string;
    TermsOfDeliveryId?: string;
    WayOfDeliveryId?: string;
    OurReference?: string;
    YourReference?: string;
    CostCenter?: string;
    DeliveryDate?: Date;
    YourOrderId?: string;
    InvoiceCost?: number;
    Phone?: string;
    Doorcode?: string;
    TermsOfPaymentQtyDaysId?: number;
    CountryId?: string;
    LanguageId?: string;
    CurrencyId?: string;
    OurInvoiceId?: number;
    LegalPersonTypeId?: number;
    Name?: string;
    ShippingName?: string;
    Reference?: string;
    ShippingReference?: string;
    PrintTemplateId?: number;
    InvoiceActionSentByEmail?: Date;
    InvoiceActionPrinted?: Date;
    InvoiceActionSold?: Date;
    OwnesByPersonId?: number;
    InvoiceActionPayedDate?: Date;
    InvoiceActionPayedAmount?: number;
    ReminderActionSentByEmail?: Date;
    Reminder2ActionSentByEmail?: Date;
    ReminderActionPrinted?: Date;
    ReminderAction2Printed?: Date;
    InvoiceActionOnHold?: Date;
    InvoiceActionCanceled?: Date;
    ExternalAddressSelector?: string;
    ExternalOrderId?: string;
    ExternalProjectNo?: string;
    ReferredByPersonId?: number;
    QtyInvoicePayments?: number;
    Balance?: number;
    FullyPaid?: boolean;
    CreatedDate?: Date;
    ShippingComment?: string;
    ShippingLongitude?: string;
    ShippingLatitude?: string;
    InvoiceCostInclVat?: number;
    InvoiceValueExclVat?: number;
    InvoiceValueInclVat?: number;
    InvoiceVat?: number;
    TotalValueExclVat?: number;
    TotalValueInclVat?: number;
    TotalVat?: number;
    Editable?: boolean;
    Context?: Context;
}

export class InvoiceProduct implements IInvoiceProduct {
    InvoiceProductId?: number;
    Qty?: number;
    InvoiceId?: number;
    ProductId?: number;
    CustomProductId?: number;
    ArticleNo?: string;
    Name?: string;
    ShortName?: string;
    Description?: string;
    ImageUrl?: string;
    Vat?: number;
    LeadTime?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    RecommendedPrice?: number;
    StandardPrice?: number;
    BuyPrice?: number;
    EanId?: number;
    Brand?: string;
    ManufacturerName?: string;
    ManufacturerItemId?: string;
    EnvironmentCode?: string;
    EnvironmentDescriprion?: string;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    Visible?: boolean;
    CategoryId?: number;
    Meta_Title?: string;
    Meta_Description?: string;
    Meta_Keywords?: string;
    ItemNameUrlFriendly?: string;
    VideoTag?: string;
    UpdatedDate?: Date;
    CreatedDate?: Date;
    CompanyId?: number;
    ProductSizeProductSizeId?: number;
    ProductColorProductColorId?: number;
    ProductImageProductImageId?: number;
    DealFromDate?: Date;
    DealToDate?: Date;
    DealPrice?: number;
    DealMinBuyQty?: number;
    ShortDescription?: string;
    CostCenter?: string;
    AccountNumber?: string;
    ProjectNo?: string;
    SellingPriceInclVat?: number;
    ValueExclVat?: number;
    ValueInclVat?: number;
    Context?: Context;

    constructor(data?: IInvoiceProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.InvoiceProductId = data["InvoiceProductId"];
            this.Qty = data["Qty"];
            this.InvoiceId = data["InvoiceId"];
            this.ProductId = data["ProductId"];
            this.CustomProductId = data["CustomProductId"];
            this.ArticleNo = data["ArticleNo"];
            this.Name = data["Name"];
            this.ShortName = data["ShortName"];
            this.Description = data["Description"];
            this.ImageUrl = data["ImageUrl"];
            this.Vat = data["Vat"];
            this.LeadTime = data["LeadTime"];
            this.Uom = data["Uom"];
            this.SalesQuantity = data["SalesQuantity"];
            this.PackageSize = data["PackageSize"];
            this.RecommendedPrice = data["RecommendedPrice"];
            this.StandardPrice = data["StandardPrice"];
            this.BuyPrice = data["BuyPrice"];
            this.EanId = data["EanId"];
            this.Brand = data["Brand"];
            this.ManufacturerName = data["ManufacturerName"];
            this.ManufacturerItemId = data["ManufacturerItemId"];
            this.EnvironmentCode = data["EnvironmentCode"];
            this.EnvironmentDescriprion = data["EnvironmentDescriprion"];
            this.Size = data["Size"];
            this.Color = data["Color"];
            this.SellingPrice = data["SellingPrice"];
            this.GroupedByProductId = data["GroupedByProductId"];
            this.Visible = data["Visible"];
            this.CategoryId = data["CategoryId"];
            this.Meta_Title = data["Meta_Title"];
            this.Meta_Description = data["Meta_Description"];
            this.Meta_Keywords = data["Meta_Keywords"];
            this.ItemNameUrlFriendly = data["ItemNameUrlFriendly"];
            this.VideoTag = data["VideoTag"];
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.CompanyId = data["CompanyId"];
            this.ProductSizeProductSizeId = data["ProductSizeProductSizeId"];
            this.ProductColorProductColorId = data["ProductColorProductColorId"];
            this.ProductImageProductImageId = data["ProductImageProductImageId"];
            this.DealFromDate = data["DealFromDate"] ? new Date(data["DealFromDate"].toString()) : <any>undefined;
            this.DealToDate = data["DealToDate"] ? new Date(data["DealToDate"].toString()) : <any>undefined;
            this.DealPrice = data["DealPrice"];
            this.DealMinBuyQty = data["DealMinBuyQty"];
            this.ShortDescription = data["ShortDescription"];
            this.CostCenter = data["CostCenter"];
            this.AccountNumber = data["AccountNumber"];
            this.ProjectNo = data["ProjectNo"];
            this.SellingPriceInclVat = data["SellingPriceInclVat"];
            this.ValueExclVat = data["ValueExclVat"];
            this.ValueInclVat = data["ValueInclVat"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InvoiceProduct {
        let result = new InvoiceProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["InvoiceProductId"] = this.InvoiceProductId;
        data["Qty"] = this.Qty;
        data["InvoiceId"] = this.InvoiceId;
        data["ProductId"] = this.ProductId;
        data["CustomProductId"] = this.CustomProductId;
        data["ArticleNo"] = this.ArticleNo;
        data["Name"] = this.Name;
        data["ShortName"] = this.ShortName;
        data["Description"] = this.Description;
        data["ImageUrl"] = this.ImageUrl;
        data["Vat"] = this.Vat;
        data["LeadTime"] = this.LeadTime;
        data["Uom"] = this.Uom;
        data["SalesQuantity"] = this.SalesQuantity;
        data["PackageSize"] = this.PackageSize;
        data["RecommendedPrice"] = this.RecommendedPrice;
        data["StandardPrice"] = this.StandardPrice;
        data["BuyPrice"] = this.BuyPrice;
        data["EanId"] = this.EanId;
        data["Brand"] = this.Brand;
        data["ManufacturerName"] = this.ManufacturerName;
        data["ManufacturerItemId"] = this.ManufacturerItemId;
        data["EnvironmentCode"] = this.EnvironmentCode;
        data["EnvironmentDescriprion"] = this.EnvironmentDescriprion;
        data["Size"] = this.Size;
        data["Color"] = this.Color;
        data["SellingPrice"] = this.SellingPrice;
        data["GroupedByProductId"] = this.GroupedByProductId;
        data["Visible"] = this.Visible;
        data["CategoryId"] = this.CategoryId;
        data["Meta_Title"] = this.Meta_Title;
        data["Meta_Description"] = this.Meta_Description;
        data["Meta_Keywords"] = this.Meta_Keywords;
        data["ItemNameUrlFriendly"] = this.ItemNameUrlFriendly;
        data["VideoTag"] = this.VideoTag;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["CompanyId"] = this.CompanyId;
        data["ProductSizeProductSizeId"] = this.ProductSizeProductSizeId;
        data["ProductColorProductColorId"] = this.ProductColorProductColorId;
        data["ProductImageProductImageId"] = this.ProductImageProductImageId;
        data["DealFromDate"] = this.DealFromDate ? this.DealFromDate.toISOString() : <any>undefined;
        data["DealToDate"] = this.DealToDate ? this.DealToDate.toISOString() : <any>undefined;
        data["DealPrice"] = this.DealPrice;
        data["DealMinBuyQty"] = this.DealMinBuyQty;
        data["ShortDescription"] = this.ShortDescription;
        data["CostCenter"] = this.CostCenter;
        data["AccountNumber"] = this.AccountNumber;
        data["ProjectNo"] = this.ProjectNo;
        data["SellingPriceInclVat"] = this.SellingPriceInclVat;
        data["ValueExclVat"] = this.ValueExclVat;
        data["ValueInclVat"] = this.ValueInclVat;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IInvoiceProduct {
    InvoiceProductId?: number;
    Qty?: number;
    InvoiceId?: number;
    ProductId?: number;
    CustomProductId?: number;
    ArticleNo?: string;
    Name?: string;
    ShortName?: string;
    Description?: string;
    ImageUrl?: string;
    Vat?: number;
    LeadTime?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    RecommendedPrice?: number;
    StandardPrice?: number;
    BuyPrice?: number;
    EanId?: number;
    Brand?: string;
    ManufacturerName?: string;
    ManufacturerItemId?: string;
    EnvironmentCode?: string;
    EnvironmentDescriprion?: string;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    Visible?: boolean;
    CategoryId?: number;
    Meta_Title?: string;
    Meta_Description?: string;
    Meta_Keywords?: string;
    ItemNameUrlFriendly?: string;
    VideoTag?: string;
    UpdatedDate?: Date;
    CreatedDate?: Date;
    CompanyId?: number;
    ProductSizeProductSizeId?: number;
    ProductColorProductColorId?: number;
    ProductImageProductImageId?: number;
    DealFromDate?: Date;
    DealToDate?: Date;
    DealPrice?: number;
    DealMinBuyQty?: number;
    ShortDescription?: string;
    CostCenter?: string;
    AccountNumber?: string;
    ProjectNo?: string;
    SellingPriceInclVat?: number;
    ValueExclVat?: number;
    ValueInclVat?: number;
    Context?: Context;
}

export class SendGroupInvoiceModel implements ISendGroupInvoiceModel {
    Customer?: InvoiceCustomer;
    Invoices?: InvoiceNoProducts[];

    constructor(data?: ISendGroupInvoiceModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Customer = data["Customer"] ? InvoiceCustomer.fromJS(data["Customer"]) : <any>undefined;
            if (data["Invoices"] && data["Invoices"].constructor === Array) {
                this.Invoices = [];
                for (let item of data["Invoices"])
                    this.Invoices.push(InvoiceNoProducts.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SendGroupInvoiceModel {
        let result = new SendGroupInvoiceModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Customer"] = this.Customer ? this.Customer.toJSON() : <any>undefined;
        if (this.Invoices && this.Invoices.constructor === Array) {
            data["Invoices"] = [];
            for (let item of this.Invoices)
                data["Invoices"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISendGroupInvoiceModel {
    Customer?: InvoiceCustomer;
    Invoices?: InvoiceNoProducts[];
}

export class InvoiceCustomer implements IInvoiceCustomer {
    PersonId?: string;
    Name?: string;
    TermsOfPaymentId?: string;

    constructor(data?: IInvoiceCustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PersonId = data["PersonId"];
            this.Name = data["Name"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
        }
    }

    static fromJS(data: any): InvoiceCustomer {
        let result = new InvoiceCustomer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PersonId"] = this.PersonId;
        data["Name"] = this.Name;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        return data;
    }
}

export interface IInvoiceCustomer {
    PersonId?: string;
    Name?: string;
    TermsOfPaymentId?: string;
}

export class SearchModel implements ISearchModel {
    SearchStr?: string;
    SearchTags?: string[];
    SearchWeeks?: WeekModel[];
    SearchCountyCouncilName?: string;
    SearchPreferedCountyCouncilName?: string;
    SearchKnowledgeOfSystemOptionName?: string;
    ItemType?: string;
    Skip?: number;
    Take?: number;
    ResponsiblePersonId?: number;
    OnlyQualityFullfilled?: boolean;
    ContactFilters?: string[];
    YearSpanFilter?: YearSpanFilter[];
    AreaOfExpertise?: string;
    ReminderDate?: Date;
    CountryId?: string;
    AvailableForWorkInCountries?: string[];
    SortOrder?: string;

    constructor(data?: ISearchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SearchStr = data["SearchStr"];
            if (data["SearchTags"] && data["SearchTags"].constructor === Array) {
                this.SearchTags = [];
                for (let item of data["SearchTags"])
                    this.SearchTags.push(item);
            }
            if (data["SearchWeeks"] && data["SearchWeeks"].constructor === Array) {
                this.SearchWeeks = [];
                for (let item of data["SearchWeeks"])
                    this.SearchWeeks.push(WeekModel.fromJS(item));
            }
            this.SearchCountyCouncilName = data["SearchCountyCouncilName"];
            this.SearchPreferedCountyCouncilName = data["SearchPreferedCountyCouncilName"];
            this.SearchKnowledgeOfSystemOptionName = data["SearchKnowledgeOfSystemOptionName"];
            this.ItemType = data["ItemType"];
            this.Skip = data["Skip"];
            this.Take = data["Take"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.OnlyQualityFullfilled = data["OnlyQualityFullfilled"];
            if (data["ContactFilters"] && data["ContactFilters"].constructor === Array) {
                this.ContactFilters = [];
                for (let item of data["ContactFilters"])
                    this.ContactFilters.push(item);
            }
            if (data["YearSpanFilter"] && data["YearSpanFilter"].constructor === Array) {
                this.YearSpanFilter = [];
                for (let item of data["YearSpanFilter"])
                    this.YearSpanFilter.push(YearSpanFilter.fromJS(item));
            }
            this.AreaOfExpertise = data["AreaOfExpertise"];
            this.ReminderDate = data["ReminderDate"] ? new Date(data["ReminderDate"].toString()) : <any>undefined;
            this.CountryId = data["CountryId"];
            if (data["AvailableForWorkInCountries"] && data["AvailableForWorkInCountries"].constructor === Array) {
                this.AvailableForWorkInCountries = [];
                for (let item of data["AvailableForWorkInCountries"])
                    this.AvailableForWorkInCountries.push(item);
            }
            this.SortOrder = data["SortOrder"];
        }
    }

    static fromJS(data: any): SearchModel {
        let result = new SearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchStr"] = this.SearchStr;
        if (this.SearchTags && this.SearchTags.constructor === Array) {
            data["SearchTags"] = [];
            for (let item of this.SearchTags)
                data["SearchTags"].push(item);
        }
        if (this.SearchWeeks && this.SearchWeeks.constructor === Array) {
            data["SearchWeeks"] = [];
            for (let item of this.SearchWeeks)
                data["SearchWeeks"].push(item.toJSON());
        }
        data["SearchCountyCouncilName"] = this.SearchCountyCouncilName;
        data["SearchPreferedCountyCouncilName"] = this.SearchPreferedCountyCouncilName;
        data["SearchKnowledgeOfSystemOptionName"] = this.SearchKnowledgeOfSystemOptionName;
        data["ItemType"] = this.ItemType;
        data["Skip"] = this.Skip;
        data["Take"] = this.Take;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["OnlyQualityFullfilled"] = this.OnlyQualityFullfilled;
        if (this.ContactFilters && this.ContactFilters.constructor === Array) {
            data["ContactFilters"] = [];
            for (let item of this.ContactFilters)
                data["ContactFilters"].push(item);
        }
        if (this.YearSpanFilter && this.YearSpanFilter.constructor === Array) {
            data["YearSpanFilter"] = [];
            for (let item of this.YearSpanFilter)
                data["YearSpanFilter"].push(item.toJSON());
        }
        data["AreaOfExpertise"] = this.AreaOfExpertise;
        data["ReminderDate"] = this.ReminderDate ? this.ReminderDate.toISOString() : <any>undefined;
        data["CountryId"] = this.CountryId;
        if (this.AvailableForWorkInCountries && this.AvailableForWorkInCountries.constructor === Array) {
            data["AvailableForWorkInCountries"] = [];
            for (let item of this.AvailableForWorkInCountries)
                data["AvailableForWorkInCountries"].push(item);
        }
        data["SortOrder"] = this.SortOrder;
        return data;
    }
}

export interface ISearchModel {
    SearchStr?: string;
    SearchTags?: string[];
    SearchWeeks?: WeekModel[];
    SearchCountyCouncilName?: string;
    SearchPreferedCountyCouncilName?: string;
    SearchKnowledgeOfSystemOptionName?: string;
    ItemType?: string;
    Skip?: number;
    Take?: number;
    ResponsiblePersonId?: number;
    OnlyQualityFullfilled?: boolean;
    ContactFilters?: string[];
    YearSpanFilter?: YearSpanFilter[];
    AreaOfExpertise?: string;
    ReminderDate?: Date;
    CountryId?: string;
    AvailableForWorkInCountries?: string[];
    SortOrder?: string;
}

export class WeekModel implements IWeekModel {
    WeekStart?: Date;
    WeekFinish?: Date;
    Year?: number;
    Week?: number;

    constructor(data?: IWeekModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WeekStart = data["WeekStart"] ? new Date(data["WeekStart"].toString()) : <any>undefined;
            this.WeekFinish = data["WeekFinish"] ? new Date(data["WeekFinish"].toString()) : <any>undefined;
            this.Year = data["Year"];
            this.Week = data["Week"];
        }
    }

    static fromJS(data: any): WeekModel {
        let result = new WeekModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WeekStart"] = this.WeekStart ? this.WeekStart.toISOString() : <any>undefined;
        data["WeekFinish"] = this.WeekFinish ? this.WeekFinish.toISOString() : <any>undefined;
        data["Year"] = this.Year;
        data["Week"] = this.Week;
        return data;
    }
}

export interface IWeekModel {
    WeekStart?: Date;
    WeekFinish?: Date;
    Year?: number;
    Week?: number;
}

export class YearSpanFilter implements IYearSpanFilter {
    YearSpanFilterId?: number;
    Name?: string;
    MoreThanAge?: number;
    LessThanAge?: number;
    ItemType?: string;

    constructor(data?: IYearSpanFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.YearSpanFilterId = data["YearSpanFilterId"];
            this.Name = data["Name"];
            this.MoreThanAge = data["MoreThanAge"];
            this.LessThanAge = data["LessThanAge"];
            this.ItemType = data["ItemType"];
        }
    }

    static fromJS(data: any): YearSpanFilter {
        let result = new YearSpanFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["YearSpanFilterId"] = this.YearSpanFilterId;
        data["Name"] = this.Name;
        data["MoreThanAge"] = this.MoreThanAge;
        data["LessThanAge"] = this.LessThanAge;
        data["ItemType"] = this.ItemType;
        return data;
    }
}

export interface IYearSpanFilter {
    YearSpanFilterId?: number;
    Name?: string;
    MoreThanAge?: number;
    LessThanAge?: number;
    ItemType?: string;
}

export class PersonSearchResult implements IPersonSearchResult {
    InfoMessage?: string;
    Result?: Person[];
    SearchStr?: string;
    TotalNrResult?: number;
    Skip?: number;
    Take?: number;

    constructor(data?: IPersonSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.InfoMessage = data["InfoMessage"];
            if (data["Result"] && data["Result"].constructor === Array) {
                this.Result = [];
                for (let item of data["Result"])
                    this.Result.push(Person.fromJS(item));
            }
            this.SearchStr = data["SearchStr"];
            this.TotalNrResult = data["TotalNrResult"];
            this.Skip = data["Skip"];
            this.Take = data["Take"];
        }
    }

    static fromJS(data: any): PersonSearchResult {
        let result = new PersonSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["InfoMessage"] = this.InfoMessage;
        if (this.Result && this.Result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.Result)
                data["Result"].push(item.toJSON());
        }
        data["SearchStr"] = this.SearchStr;
        data["TotalNrResult"] = this.TotalNrResult;
        data["Skip"] = this.Skip;
        data["Take"] = this.Take;
        return data;
    }
}

export interface IPersonSearchResult {
    InfoMessage?: string;
    Result?: Person[];
    SearchStr?: string;
    TotalNrResult?: number;
    Skip?: number;
    Take?: number;
}

export class EmailSenderModel implements IEmailSenderModel {
    FromAddress?: string;
    FromName?: string;

    constructor(data?: IEmailSenderModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.FromAddress = data["FromAddress"];
            this.FromName = data["FromName"];
        }
    }

    static fromJS(data: any): EmailSenderModel {
        let result = new EmailSenderModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FromAddress"] = this.FromAddress;
        data["FromName"] = this.FromName;
        return data;
    }
}

export interface IEmailSenderModel {
    FromAddress?: string;
    FromName?: string;
}

export class ValidateContactDeleteResponse implements IValidateContactDeleteResponse {
    OkToDelete?: boolean;
    ValidateSummary?: PersonDeleteRequestFailSummary;

    constructor(data?: IValidateContactDeleteResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OkToDelete = data["OkToDelete"];
            this.ValidateSummary = data["ValidateSummary"] ? PersonDeleteRequestFailSummary.fromJS(data["ValidateSummary"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ValidateContactDeleteResponse {
        let result = new ValidateContactDeleteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OkToDelete"] = this.OkToDelete;
        data["ValidateSummary"] = this.ValidateSummary ? this.ValidateSummary.toJSON() : <any>undefined;
        return data;
    }
}

export interface IValidateContactDeleteResponse {
    OkToDelete?: boolean;
    ValidateSummary?: PersonDeleteRequestFailSummary;
}

export class PersonDeleteRequestFailSummary implements IPersonDeleteRequestFailSummary {
    id?: string;
    PersonId?: string;
    Name?: string;
    ItemType?: string;
    TryToDeleteByName?: string;
    FailureDescriptions?: string[];

    constructor(data?: IPersonDeleteRequestFailSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.PersonId = data["PersonId"];
            this.Name = data["Name"];
            this.ItemType = data["ItemType"];
            this.TryToDeleteByName = data["TryToDeleteByName"];
            if (data["FailureDescriptions"] && data["FailureDescriptions"].constructor === Array) {
                this.FailureDescriptions = [];
                for (let item of data["FailureDescriptions"])
                    this.FailureDescriptions.push(item);
            }
        }
    }

    static fromJS(data: any): PersonDeleteRequestFailSummary {
        let result = new PersonDeleteRequestFailSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["PersonId"] = this.PersonId;
        data["Name"] = this.Name;
        data["ItemType"] = this.ItemType;
        data["TryToDeleteByName"] = this.TryToDeleteByName;
        if (this.FailureDescriptions && this.FailureDescriptions.constructor === Array) {
            data["FailureDescriptions"] = [];
            for (let item of this.FailureDescriptions)
                data["FailureDescriptions"].push(item);
        }
        return data;
    }
}

export interface IPersonDeleteRequestFailSummary {
    id?: string;
    PersonId?: string;
    Name?: string;
    ItemType?: string;
    TryToDeleteByName?: string;
    FailureDescriptions?: string[];
}

export class PersonCompact implements IPersonCompact {
    PersonId?: number;
    Name?: string;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    CreatedBy?: number;
    UpdatedBy?: number;
    IsDeleted?: boolean;
    UpdatedByName?: string;

    constructor(data?: IPersonCompact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PersonId = data["PersonId"];
            this.Name = data["Name"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.CreatedBy = data["CreatedBy"];
            this.UpdatedBy = data["UpdatedBy"];
            this.IsDeleted = data["IsDeleted"];
            this.UpdatedByName = data["UpdatedByName"];
        }
    }

    static fromJS(data: any): PersonCompact {
        let result = new PersonCompact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PersonId"] = this.PersonId;
        data["Name"] = this.Name;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["CreatedBy"] = this.CreatedBy;
        data["UpdatedBy"] = this.UpdatedBy;
        data["IsDeleted"] = this.IsDeleted;
        data["UpdatedByName"] = this.UpdatedByName;
        return data;
    }
}

export interface IPersonCompact {
    PersonId?: number;
    Name?: string;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    CreatedBy?: number;
    UpdatedBy?: number;
    IsDeleted?: boolean;
    UpdatedByName?: string;
}

export class TupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString implements ITupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString {
    Item1?: PersonDeleteRequestFailSummary[];
    Item2?: string;

    constructor(data?: ITupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Item1"] && data["Item1"].constructor === Array) {
                this.Item1 = [];
                for (let item of data["Item1"])
                    this.Item1.push(PersonDeleteRequestFailSummary.fromJS(item));
            }
            this.Item2 = data["Item2"];
        }
    }

    static fromJS(data: any): TupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString {
        let result = new TupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Item1 && this.Item1.constructor === Array) {
            data["Item1"] = [];
            for (let item of this.Item1)
                data["Item1"].push(item.toJSON());
        }
        data["Item2"] = this.Item2;
        return data;
    }
}

export interface ITupleOfIEnumerableOfPersonDeleteRequestFailSummaryAndString {
    Item1?: PersonDeleteRequestFailSummary[];
    Item2?: string;
}

export class CustomPersonFieldSerchModel implements ICustomPersonFieldSerchModel {
    PersonId?: number;
    ItemType?: string;
    CountryIds?: string[];

    constructor(data?: ICustomPersonFieldSerchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PersonId = data["PersonId"];
            this.ItemType = data["ItemType"];
            if (data["CountryIds"] && data["CountryIds"].constructor === Array) {
                this.CountryIds = [];
                for (let item of data["CountryIds"])
                    this.CountryIds.push(item);
            }
        }
    }

    static fromJS(data: any): CustomPersonFieldSerchModel {
        let result = new CustomPersonFieldSerchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PersonId"] = this.PersonId;
        data["ItemType"] = this.ItemType;
        if (this.CountryIds && this.CountryIds.constructor === Array) {
            data["CountryIds"] = [];
            for (let item of this.CountryIds)
                data["CountryIds"].push(item);
        }
        return data;
    }
}

export interface ICustomPersonFieldSerchModel {
    PersonId?: number;
    ItemType?: string;
    CountryIds?: string[];
}

export class PersonalDataConsent implements IPersonalDataConsent {
    id?: string;
    Comment?: string;
    LegalReference?: string;
    Confirmed?: boolean;
    ConfirmedDate?: Date;
    ConfirmedByPersonId?: string;
    ConfirmedByPersonName?: string;
    PersonId?: string;
    PersonalDataConsentSettingId?: string;
    PersonalDataConsentSetting?: PersonalDataConsentSetting;

    constructor(data?: IPersonalDataConsent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Comment = data["Comment"];
            this.LegalReference = data["LegalReference"];
            this.Confirmed = data["Confirmed"];
            this.ConfirmedDate = data["ConfirmedDate"] ? new Date(data["ConfirmedDate"].toString()) : <any>undefined;
            this.ConfirmedByPersonId = data["ConfirmedByPersonId"];
            this.ConfirmedByPersonName = data["ConfirmedByPersonName"];
            this.PersonId = data["PersonId"];
            this.PersonalDataConsentSettingId = data["PersonalDataConsentSettingId"];
            this.PersonalDataConsentSetting = data["PersonalDataConsentSetting"] ? PersonalDataConsentSetting.fromJS(data["PersonalDataConsentSetting"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonalDataConsent {
        let result = new PersonalDataConsent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Comment"] = this.Comment;
        data["LegalReference"] = this.LegalReference;
        data["Confirmed"] = this.Confirmed;
        data["ConfirmedDate"] = this.ConfirmedDate ? this.ConfirmedDate.toISOString() : <any>undefined;
        data["ConfirmedByPersonId"] = this.ConfirmedByPersonId;
        data["ConfirmedByPersonName"] = this.ConfirmedByPersonName;
        data["PersonId"] = this.PersonId;
        data["PersonalDataConsentSettingId"] = this.PersonalDataConsentSettingId;
        data["PersonalDataConsentSetting"] = this.PersonalDataConsentSetting ? this.PersonalDataConsentSetting.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPersonalDataConsent {
    id?: string;
    Comment?: string;
    LegalReference?: string;
    Confirmed?: boolean;
    ConfirmedDate?: Date;
    ConfirmedByPersonId?: string;
    ConfirmedByPersonName?: string;
    PersonId?: string;
    PersonalDataConsentSettingId?: string;
    PersonalDataConsentSetting?: PersonalDataConsentSetting;
}

export class PersonalDataConsentSetting implements IPersonalDataConsentSetting {
    id?: string;
    Name?: string;
    Description?: string;
    MaturesQtyMonths?: number;
    CountryId?: string;
    ConfirmAutomaticWhenPrivacyPolicyAcceptance?: boolean;

    constructor(data?: IPersonalDataConsentSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.MaturesQtyMonths = data["MaturesQtyMonths"];
            this.CountryId = data["CountryId"];
            this.ConfirmAutomaticWhenPrivacyPolicyAcceptance = data["ConfirmAutomaticWhenPrivacyPolicyAcceptance"];
        }
    }

    static fromJS(data: any): PersonalDataConsentSetting {
        let result = new PersonalDataConsentSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["MaturesQtyMonths"] = this.MaturesQtyMonths;
        data["CountryId"] = this.CountryId;
        data["ConfirmAutomaticWhenPrivacyPolicyAcceptance"] = this.ConfirmAutomaticWhenPrivacyPolicyAcceptance;
        return data;
    }
}

export interface IPersonalDataConsentSetting {
    id?: string;
    Name?: string;
    Description?: string;
    MaturesQtyMonths?: number;
    CountryId?: string;
    ConfirmAutomaticWhenPrivacyPolicyAcceptance?: boolean;
}

export class PersonLanguage implements IPersonLanguage {
    PersonLanguageId?: number;
    Name?: string;
    Description?: string;
    Rating?: number;
    PersonId?: number;
    Context?: Context;

    constructor(data?: IPersonLanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PersonLanguageId = data["PersonLanguageId"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.Rating = data["Rating"];
            this.PersonId = data["PersonId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonLanguage {
        let result = new PersonLanguage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PersonLanguageId"] = this.PersonLanguageId;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["Rating"] = this.Rating;
        data["PersonId"] = this.PersonId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPersonLanguage {
    PersonLanguageId?: number;
    Name?: string;
    Description?: string;
    Rating?: number;
    PersonId?: number;
    Context?: Context;
}

export class PersonProfession implements IPersonProfession {
    PersonProfessionId?: number;
    Name?: string;
    Rating?: number;
    PersonId?: number;
    Context?: Context;

    constructor(data?: IPersonProfession) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PersonProfessionId = data["PersonProfessionId"];
            this.Name = data["Name"];
            this.Rating = data["Rating"];
            this.PersonId = data["PersonId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonProfession {
        let result = new PersonProfession();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PersonProfessionId"] = this.PersonProfessionId;
        data["Name"] = this.Name;
        data["Rating"] = this.Rating;
        data["PersonId"] = this.PersonId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPersonProfession {
    PersonProfessionId?: number;
    Name?: string;
    Rating?: number;
    PersonId?: number;
    Context?: Context;
}

export class ProductCategoriesMapping implements IProductCategoriesMapping {
    id?: string;
    ProductId?: number;
    CategoryId?: number;
    CategoryName?: string;

    constructor(data?: IProductCategoriesMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ProductId = data["ProductId"];
            this.CategoryId = data["CategoryId"];
            this.CategoryName = data["CategoryName"];
        }
    }

    static fromJS(data: any): ProductCategoriesMapping {
        let result = new ProductCategoriesMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ProductId"] = this.ProductId;
        data["CategoryId"] = this.CategoryId;
        data["CategoryName"] = this.CategoryName;
        return data;
    }
}

export interface IProductCategoriesMapping {
    id?: string;
    ProductId?: number;
    CategoryId?: number;
    CategoryName?: string;
}

export class ProductDetails implements IProductDetails {
    ProductImages?: ProductImage[];
    ProductColors?: ProductColor[];
    ProductSizes?: ProductSize[];
    AllPossibleProductColors?: ProductColor[];
    AllPossibleProductSizes?: ProductSize[];
    PromotionLists?: PromotionList[];
    PackageProducts?: PackageProduct[];
    DailyOrderCapacity?: ProductDeliveryCapacity[];
    CustomFields?: CustomProductField[];
    ProductId?: number;
    Description?: string;
    CustomerMessage?: string;
    LeadTime?: number;
    RecommendedPrice?: number;
    StandardPrice?: number;
    EanId?: number;
    Brand?: string;
    ManufacturerName?: string;
    ManufacturerItemId?: string;
    EnvironmentCode?: string;
    EnvironmentDescriprion?: string;
    Visible?: boolean;
    Meta_Title?: string;
    Meta_Description?: string;
    Meta_Keywords?: string;
    UrlFriendlyName?: string;
    VideoTag?: string;
    DealFromDate?: Date;
    DealToDate?: Date;
    DealMinBuyQty?: number;
    ServiceUrl?: string;
    CustomProductId?: number;
    Name?: string;
    DisplayName?: string;
    ShortName?: string;
    ShortDescription?: string;
    ImageUrl?: string;
    Vat?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    WeightDescription?: string;
    BuyPrice?: number;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    CategoryId?: number;
    MetaHashTags?: string;
    MetaHashTagsArray?: string[];
    CountryId?: string;
    CurrencyId?: string;
    QtyDeliveries?: number;
    DealPrice?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    TotalVat?: number;

    constructor(data?: IProductDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["ProductImages"] && data["ProductImages"].constructor === Array) {
                this.ProductImages = [];
                for (let item of data["ProductImages"])
                    this.ProductImages.push(ProductImage.fromJS(item));
            }
            if (data["ProductColors"] && data["ProductColors"].constructor === Array) {
                this.ProductColors = [];
                for (let item of data["ProductColors"])
                    this.ProductColors.push(ProductColor.fromJS(item));
            }
            if (data["ProductSizes"] && data["ProductSizes"].constructor === Array) {
                this.ProductSizes = [];
                for (let item of data["ProductSizes"])
                    this.ProductSizes.push(ProductSize.fromJS(item));
            }
            if (data["AllPossibleProductColors"] && data["AllPossibleProductColors"].constructor === Array) {
                this.AllPossibleProductColors = [];
                for (let item of data["AllPossibleProductColors"])
                    this.AllPossibleProductColors.push(ProductColor.fromJS(item));
            }
            if (data["AllPossibleProductSizes"] && data["AllPossibleProductSizes"].constructor === Array) {
                this.AllPossibleProductSizes = [];
                for (let item of data["AllPossibleProductSizes"])
                    this.AllPossibleProductSizes.push(ProductSize.fromJS(item));
            }
            if (data["PromotionLists"] && data["PromotionLists"].constructor === Array) {
                this.PromotionLists = [];
                for (let item of data["PromotionLists"])
                    this.PromotionLists.push(PromotionList.fromJS(item));
            }
            if (data["PackageProducts"] && data["PackageProducts"].constructor === Array) {
                this.PackageProducts = [];
                for (let item of data["PackageProducts"])
                    this.PackageProducts.push(PackageProduct.fromJS(item));
            }
            if (data["DailyOrderCapacity"] && data["DailyOrderCapacity"].constructor === Array) {
                this.DailyOrderCapacity = [];
                for (let item of data["DailyOrderCapacity"])
                    this.DailyOrderCapacity.push(ProductDeliveryCapacity.fromJS(item));
            }
            if (data["CustomFields"] && data["CustomFields"].constructor === Array) {
                this.CustomFields = [];
                for (let item of data["CustomFields"])
                    this.CustomFields.push(CustomProductField.fromJS(item));
            }
            this.ProductId = data["ProductId"];
            this.Description = data["Description"];
            this.CustomerMessage = data["CustomerMessage"];
            this.LeadTime = data["LeadTime"];
            this.RecommendedPrice = data["RecommendedPrice"];
            this.StandardPrice = data["StandardPrice"];
            this.EanId = data["EanId"];
            this.Brand = data["Brand"];
            this.ManufacturerName = data["ManufacturerName"];
            this.ManufacturerItemId = data["ManufacturerItemId"];
            this.EnvironmentCode = data["EnvironmentCode"];
            this.EnvironmentDescriprion = data["EnvironmentDescriprion"];
            this.Visible = data["Visible"];
            this.Meta_Title = data["Meta_Title"];
            this.Meta_Description = data["Meta_Description"];
            this.Meta_Keywords = data["Meta_Keywords"];
            this.UrlFriendlyName = data["UrlFriendlyName"];
            this.VideoTag = data["VideoTag"];
            this.DealFromDate = data["DealFromDate"] ? new Date(data["DealFromDate"].toString()) : <any>undefined;
            this.DealToDate = data["DealToDate"] ? new Date(data["DealToDate"].toString()) : <any>undefined;
            this.DealMinBuyQty = data["DealMinBuyQty"];
            this.ServiceUrl = data["ServiceUrl"];
            this.CustomProductId = data["CustomProductId"];
            this.Name = data["Name"];
            this.DisplayName = data["DisplayName"];
            this.ShortName = data["ShortName"];
            this.ShortDescription = data["ShortDescription"];
            this.ImageUrl = data["ImageUrl"];
            this.Vat = data["Vat"];
            this.Uom = data["Uom"];
            this.SalesQuantity = data["SalesQuantity"];
            this.PackageSize = data["PackageSize"];
            this.WeightDescription = data["WeightDescription"];
            this.BuyPrice = data["BuyPrice"];
            this.Size = data["Size"];
            this.Color = data["Color"];
            this.SellingPrice = data["SellingPrice"];
            this.GroupedByProductId = data["GroupedByProductId"];
            this.CategoryId = data["CategoryId"];
            this.MetaHashTags = data["MetaHashTags"];
            if (data["MetaHashTagsArray"] && data["MetaHashTagsArray"].constructor === Array) {
                this.MetaHashTagsArray = [];
                for (let item of data["MetaHashTagsArray"])
                    this.MetaHashTagsArray.push(item);
            }
            this.CountryId = data["CountryId"];
            this.CurrencyId = data["CurrencyId"];
            this.QtyDeliveries = data["QtyDeliveries"];
            this.DealPrice = data["DealPrice"];
            this.CurrentSellingPrice = data["CurrentSellingPrice"];
            this.CurrentSellingPriceInclVat = data["CurrentSellingPriceInclVat"];
            this.TotalVat = data["TotalVat"];
        }
    }

    static fromJS(data: any): ProductDetails {
        let result = new ProductDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.ProductImages && this.ProductImages.constructor === Array) {
            data["ProductImages"] = [];
            for (let item of this.ProductImages)
                data["ProductImages"].push(item.toJSON());
        }
        if (this.ProductColors && this.ProductColors.constructor === Array) {
            data["ProductColors"] = [];
            for (let item of this.ProductColors)
                data["ProductColors"].push(item.toJSON());
        }
        if (this.ProductSizes && this.ProductSizes.constructor === Array) {
            data["ProductSizes"] = [];
            for (let item of this.ProductSizes)
                data["ProductSizes"].push(item.toJSON());
        }
        if (this.AllPossibleProductColors && this.AllPossibleProductColors.constructor === Array) {
            data["AllPossibleProductColors"] = [];
            for (let item of this.AllPossibleProductColors)
                data["AllPossibleProductColors"].push(item.toJSON());
        }
        if (this.AllPossibleProductSizes && this.AllPossibleProductSizes.constructor === Array) {
            data["AllPossibleProductSizes"] = [];
            for (let item of this.AllPossibleProductSizes)
                data["AllPossibleProductSizes"].push(item.toJSON());
        }
        if (this.PromotionLists && this.PromotionLists.constructor === Array) {
            data["PromotionLists"] = [];
            for (let item of this.PromotionLists)
                data["PromotionLists"].push(item.toJSON());
        }
        if (this.PackageProducts && this.PackageProducts.constructor === Array) {
            data["PackageProducts"] = [];
            for (let item of this.PackageProducts)
                data["PackageProducts"].push(item.toJSON());
        }
        if (this.DailyOrderCapacity && this.DailyOrderCapacity.constructor === Array) {
            data["DailyOrderCapacity"] = [];
            for (let item of this.DailyOrderCapacity)
                data["DailyOrderCapacity"].push(item.toJSON());
        }
        if (this.CustomFields && this.CustomFields.constructor === Array) {
            data["CustomFields"] = [];
            for (let item of this.CustomFields)
                data["CustomFields"].push(item.toJSON());
        }
        data["ProductId"] = this.ProductId;
        data["Description"] = this.Description;
        data["CustomerMessage"] = this.CustomerMessage;
        data["LeadTime"] = this.LeadTime;
        data["RecommendedPrice"] = this.RecommendedPrice;
        data["StandardPrice"] = this.StandardPrice;
        data["EanId"] = this.EanId;
        data["Brand"] = this.Brand;
        data["ManufacturerName"] = this.ManufacturerName;
        data["ManufacturerItemId"] = this.ManufacturerItemId;
        data["EnvironmentCode"] = this.EnvironmentCode;
        data["EnvironmentDescriprion"] = this.EnvironmentDescriprion;
        data["Visible"] = this.Visible;
        data["Meta_Title"] = this.Meta_Title;
        data["Meta_Description"] = this.Meta_Description;
        data["Meta_Keywords"] = this.Meta_Keywords;
        data["UrlFriendlyName"] = this.UrlFriendlyName;
        data["VideoTag"] = this.VideoTag;
        data["DealFromDate"] = this.DealFromDate ? this.DealFromDate.toISOString() : <any>undefined;
        data["DealToDate"] = this.DealToDate ? this.DealToDate.toISOString() : <any>undefined;
        data["DealMinBuyQty"] = this.DealMinBuyQty;
        data["ServiceUrl"] = this.ServiceUrl;
        data["CustomProductId"] = this.CustomProductId;
        data["Name"] = this.Name;
        data["DisplayName"] = this.DisplayName;
        data["ShortName"] = this.ShortName;
        data["ShortDescription"] = this.ShortDescription;
        data["ImageUrl"] = this.ImageUrl;
        data["Vat"] = this.Vat;
        data["Uom"] = this.Uom;
        data["SalesQuantity"] = this.SalesQuantity;
        data["PackageSize"] = this.PackageSize;
        data["WeightDescription"] = this.WeightDescription;
        data["BuyPrice"] = this.BuyPrice;
        data["Size"] = this.Size;
        data["Color"] = this.Color;
        data["SellingPrice"] = this.SellingPrice;
        data["GroupedByProductId"] = this.GroupedByProductId;
        data["CategoryId"] = this.CategoryId;
        data["MetaHashTags"] = this.MetaHashTags;
        if (this.MetaHashTagsArray && this.MetaHashTagsArray.constructor === Array) {
            data["MetaHashTagsArray"] = [];
            for (let item of this.MetaHashTagsArray)
                data["MetaHashTagsArray"].push(item);
        }
        data["CountryId"] = this.CountryId;
        data["CurrencyId"] = this.CurrencyId;
        data["QtyDeliveries"] = this.QtyDeliveries;
        data["DealPrice"] = this.DealPrice;
        data["CurrentSellingPrice"] = this.CurrentSellingPrice;
        data["CurrentSellingPriceInclVat"] = this.CurrentSellingPriceInclVat;
        data["TotalVat"] = this.TotalVat;
        return data;
    }
}

export interface IProductDetails {
    ProductImages?: ProductImage[];
    ProductColors?: ProductColor[];
    ProductSizes?: ProductSize[];
    AllPossibleProductColors?: ProductColor[];
    AllPossibleProductSizes?: ProductSize[];
    PromotionLists?: PromotionList[];
    PackageProducts?: PackageProduct[];
    DailyOrderCapacity?: ProductDeliveryCapacity[];
    CustomFields?: CustomProductField[];
    ProductId?: number;
    Description?: string;
    CustomerMessage?: string;
    LeadTime?: number;
    RecommendedPrice?: number;
    StandardPrice?: number;
    EanId?: number;
    Brand?: string;
    ManufacturerName?: string;
    ManufacturerItemId?: string;
    EnvironmentCode?: string;
    EnvironmentDescriprion?: string;
    Visible?: boolean;
    Meta_Title?: string;
    Meta_Description?: string;
    Meta_Keywords?: string;
    UrlFriendlyName?: string;
    VideoTag?: string;
    DealFromDate?: Date;
    DealToDate?: Date;
    DealMinBuyQty?: number;
    ServiceUrl?: string;
    CustomProductId?: number;
    Name?: string;
    DisplayName?: string;
    ShortName?: string;
    ShortDescription?: string;
    ImageUrl?: string;
    Vat?: number;
    Uom?: string;
    SalesQuantity?: number;
    PackageSize?: number;
    WeightDescription?: string;
    BuyPrice?: number;
    Size?: string;
    Color?: string;
    SellingPrice?: number;
    GroupedByProductId?: number;
    CategoryId?: number;
    MetaHashTags?: string;
    MetaHashTagsArray?: string[];
    CountryId?: string;
    CurrencyId?: string;
    QtyDeliveries?: number;
    DealPrice?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    TotalVat?: number;
}

export class ProductImage implements IProductImage {
    ProductImageId?: number;
    Name?: string;
    Url?: string;
    ProductId?: number;

    constructor(data?: IProductImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ProductImageId = data["ProductImageId"];
            this.Name = data["Name"];
            this.Url = data["Url"];
            this.ProductId = data["ProductId"];
        }
    }

    static fromJS(data: any): ProductImage {
        let result = new ProductImage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProductImageId"] = this.ProductImageId;
        data["Name"] = this.Name;
        data["Url"] = this.Url;
        data["ProductId"] = this.ProductId;
        return data;
    }
}

export interface IProductImage {
    ProductImageId?: number;
    Name?: string;
    Url?: string;
    ProductId?: number;
}

export class ProductColor implements IProductColor {
    ProductColorId?: number;
    Name?: string;

    constructor(data?: IProductColor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ProductColorId = data["ProductColorId"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): ProductColor {
        let result = new ProductColor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProductColorId"] = this.ProductColorId;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IProductColor {
    ProductColorId?: number;
    Name?: string;
}

export class ProductSize implements IProductSize {
    ProductSizeId?: number;
    Name?: string;

    constructor(data?: IProductSize) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ProductSizeId = data["ProductSizeId"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): ProductSize {
        let result = new ProductSize();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProductSizeId"] = this.ProductSizeId;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IProductSize {
    ProductSizeId?: number;
    Name?: string;
}

export class PromotionList implements IPromotionList {
    PromotionListId?: number;
    Name?: string;
    Products?: Product[];

    constructor(data?: IPromotionList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PromotionListId = data["PromotionListId"];
            this.Name = data["Name"];
            if (data["Products"] && data["Products"].constructor === Array) {
                this.Products = [];
                for (let item of data["Products"])
                    this.Products.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PromotionList {
        let result = new PromotionList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PromotionListId"] = this.PromotionListId;
        data["Name"] = this.Name;
        if (this.Products && this.Products.constructor === Array) {
            data["Products"] = [];
            for (let item of this.Products)
                data["Products"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPromotionList {
    PromotionListId?: number;
    Name?: string;
    Products?: Product[];
}

export class PackageProduct implements IPackageProduct {
    PackageProductId?: number;
    Product?: Product;
    IncludedProduct?: Product;
    IncludedProductQty?: number;
    IncludedProductDelayOrderDays?: number;

    constructor(data?: IPackageProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PackageProductId = data["PackageProductId"];
            this.Product = data["Product"] ? Product.fromJS(data["Product"]) : <any>undefined;
            this.IncludedProduct = data["IncludedProduct"] ? Product.fromJS(data["IncludedProduct"]) : <any>undefined;
            this.IncludedProductQty = data["IncludedProductQty"];
            this.IncludedProductDelayOrderDays = data["IncludedProductDelayOrderDays"];
        }
    }

    static fromJS(data: any): PackageProduct {
        let result = new PackageProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PackageProductId"] = this.PackageProductId;
        data["Product"] = this.Product ? this.Product.toJSON() : <any>undefined;
        data["IncludedProduct"] = this.IncludedProduct ? this.IncludedProduct.toJSON() : <any>undefined;
        data["IncludedProductQty"] = this.IncludedProductQty;
        data["IncludedProductDelayOrderDays"] = this.IncludedProductDelayOrderDays;
        return data;
    }
}

export interface IPackageProduct {
    PackageProductId?: number;
    Product?: Product;
    IncludedProduct?: Product;
    IncludedProductQty?: number;
    IncludedProductDelayOrderDays?: number;
}

export class ProductDeliveryCapacity implements IProductDeliveryCapacity {
    ProductDeliveryCapacityId?: string;
    ProductId?: string;
    DayOfWeek?: number;
    Qty?: number;

    constructor(data?: IProductDeliveryCapacity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ProductDeliveryCapacityId = data["ProductDeliveryCapacityId"];
            this.ProductId = data["ProductId"];
            this.DayOfWeek = data["DayOfWeek"];
            this.Qty = data["Qty"];
        }
    }

    static fromJS(data: any): ProductDeliveryCapacity {
        let result = new ProductDeliveryCapacity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProductDeliveryCapacityId"] = this.ProductDeliveryCapacityId;
        data["ProductId"] = this.ProductId;
        data["DayOfWeek"] = this.DayOfWeek;
        data["Qty"] = this.Qty;
        return data;
    }
}

export interface IProductDeliveryCapacity {
    ProductDeliveryCapacityId?: string;
    ProductId?: string;
    DayOfWeek?: number;
    Qty?: number;
}

export class CustomProductField implements ICustomProductField {
    CustomProductFieldId?: number;
    ProductId?: number;
    Value?: string;
    CustomFieldId?: number;
    CustomField?: CustomField;
    Context?: Context;

    constructor(data?: ICustomProductField) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CustomProductFieldId = data["CustomProductFieldId"];
            this.ProductId = data["ProductId"];
            this.Value = data["Value"];
            this.CustomFieldId = data["CustomFieldId"];
            this.CustomField = data["CustomField"] ? CustomField.fromJS(data["CustomField"]) : <any>undefined;
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CustomProductField {
        let result = new CustomProductField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CustomProductFieldId"] = this.CustomProductFieldId;
        data["ProductId"] = this.ProductId;
        data["Value"] = this.Value;
        data["CustomFieldId"] = this.CustomFieldId;
        data["CustomField"] = this.CustomField ? this.CustomField.toJSON() : <any>undefined;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICustomProductField {
    CustomProductFieldId?: number;
    ProductId?: number;
    Value?: string;
    CustomFieldId?: number;
    CustomField?: CustomField;
    Context?: Context;
}

export class RatingComment implements IRatingComment {
    id?: string;
    Rating?: number;
    Comment?: string;
    Date?: Date;
    PersonId?: string;
    PersonName?: string;
    ForItemId?: string;
    ForItemType?: string;

    constructor(data?: IRatingComment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Rating = data["Rating"];
            this.Comment = data["Comment"];
            this.Date = data["Date"] ? new Date(data["Date"].toString()) : <any>undefined;
            this.PersonId = data["PersonId"];
            this.PersonName = data["PersonName"];
            this.ForItemId = data["ForItemId"];
            this.ForItemType = data["ForItemType"];
        }
    }

    static fromJS(data: any): RatingComment {
        let result = new RatingComment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Rating"] = this.Rating;
        data["Comment"] = this.Comment;
        data["Date"] = this.Date ? this.Date.toISOString() : <any>undefined;
        data["PersonId"] = this.PersonId;
        data["PersonName"] = this.PersonName;
        data["ForItemId"] = this.ForItemId;
        data["ForItemType"] = this.ForItemType;
        return data;
    }
}

export interface IRatingComment {
    id?: string;
    Rating?: number;
    Comment?: string;
    Date?: Date;
    PersonId?: string;
    PersonName?: string;
    ForItemId?: string;
    ForItemType?: string;
}

export class Recipe implements IRecipe {
    id?: string;
    Title?: string;
    ShortDescription?: string;
    Description?: string;
    InstrumentType?: string;
    ImageUrl?: string;
    Category?: string;
    MetaHashTags?: string;
    MetaHashTagsArray?: string[];
    UrlFriendlyName?: string;
    SellingPrice?: number;
    Vat?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    TotalVat?: number;
    Servings?: number;
    TimeDuration?: number;
    Public?: boolean;
    PublicUrl?: string;
    RecipeProducts?: RecipeProduct[];

    constructor(data?: IRecipe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Title = data["Title"];
            this.ShortDescription = data["ShortDescription"];
            this.Description = data["Description"];
            this.InstrumentType = data["InstrumentType"];
            this.ImageUrl = data["ImageUrl"];
            this.Category = data["Category"];
            this.MetaHashTags = data["MetaHashTags"];
            if (data["MetaHashTagsArray"] && data["MetaHashTagsArray"].constructor === Array) {
                this.MetaHashTagsArray = [];
                for (let item of data["MetaHashTagsArray"])
                    this.MetaHashTagsArray.push(item);
            }
            this.UrlFriendlyName = data["UrlFriendlyName"];
            this.SellingPrice = data["SellingPrice"];
            this.Vat = data["Vat"];
            this.CurrentSellingPrice = data["CurrentSellingPrice"];
            this.CurrentSellingPriceInclVat = data["CurrentSellingPriceInclVat"];
            this.TotalVat = data["TotalVat"];
            this.Servings = data["Servings"];
            this.TimeDuration = data["TimeDuration"];
            this.Public = data["Public"];
            this.PublicUrl = data["PublicUrl"];
            if (data["RecipeProducts"] && data["RecipeProducts"].constructor === Array) {
                this.RecipeProducts = [];
                for (let item of data["RecipeProducts"])
                    this.RecipeProducts.push(RecipeProduct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Recipe {
        let result = new Recipe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Title"] = this.Title;
        data["ShortDescription"] = this.ShortDescription;
        data["Description"] = this.Description;
        data["InstrumentType"] = this.InstrumentType;
        data["ImageUrl"] = this.ImageUrl;
        data["Category"] = this.Category;
        data["MetaHashTags"] = this.MetaHashTags;
        if (this.MetaHashTagsArray && this.MetaHashTagsArray.constructor === Array) {
            data["MetaHashTagsArray"] = [];
            for (let item of this.MetaHashTagsArray)
                data["MetaHashTagsArray"].push(item);
        }
        data["UrlFriendlyName"] = this.UrlFriendlyName;
        data["SellingPrice"] = this.SellingPrice;
        data["Vat"] = this.Vat;
        data["CurrentSellingPrice"] = this.CurrentSellingPrice;
        data["CurrentSellingPriceInclVat"] = this.CurrentSellingPriceInclVat;
        data["TotalVat"] = this.TotalVat;
        data["Servings"] = this.Servings;
        data["TimeDuration"] = this.TimeDuration;
        data["Public"] = this.Public;
        data["PublicUrl"] = this.PublicUrl;
        if (this.RecipeProducts && this.RecipeProducts.constructor === Array) {
            data["RecipeProducts"] = [];
            for (let item of this.RecipeProducts)
                data["RecipeProducts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRecipe {
    id?: string;
    Title?: string;
    ShortDescription?: string;
    Description?: string;
    InstrumentType?: string;
    ImageUrl?: string;
    Category?: string;
    MetaHashTags?: string;
    MetaHashTagsArray?: string[];
    UrlFriendlyName?: string;
    SellingPrice?: number;
    Vat?: number;
    CurrentSellingPrice?: number;
    CurrentSellingPriceInclVat?: number;
    TotalVat?: number;
    Servings?: number;
    TimeDuration?: number;
    Public?: boolean;
    PublicUrl?: string;
    RecipeProducts?: RecipeProduct[];
}

export class RecipeProduct implements IRecipeProduct {
    ProductId?: string;
    Name?: string;
    Qty?: number;
    Uom?: string;

    constructor(data?: IRecipeProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ProductId = data["ProductId"];
            this.Name = data["Name"];
            this.Qty = data["Qty"];
            this.Uom = data["Uom"];
        }
    }

    static fromJS(data: any): RecipeProduct {
        let result = new RecipeProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProductId"] = this.ProductId;
        data["Name"] = this.Name;
        data["Qty"] = this.Qty;
        data["Uom"] = this.Uom;
        return data;
    }
}

export interface IRecipeProduct {
    ProductId?: string;
    Name?: string;
    Qty?: number;
    Uom?: string;
}

export class RecruitPipe implements IRecruitPipe {
    ImageUrl?: string;
    ShortDescription?: string;
    From?: Date;
    To?: Date;
    ApplyBefore?: Date;
    QtyNeeded?: number;
    QtyApplicants?: number;
    CompetensesNeeded?: string[];
    PublishOnAppId?: number;
    Public?: boolean;
    PublicUrl?: string;
    PublicMultipleUrl?: string;
    Location?: string;
    JobType?: string;
    RoleOrLevel?: string;
    id?: string;
    Title?: string;
    Description?: string;

    constructor(data?: IRecruitPipe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ImageUrl = data["ImageUrl"];
            this.ShortDescription = data["ShortDescription"];
            this.From = data["From"] ? new Date(data["From"].toString()) : <any>undefined;
            this.To = data["To"] ? new Date(data["To"].toString()) : <any>undefined;
            this.ApplyBefore = data["ApplyBefore"] ? new Date(data["ApplyBefore"].toString()) : <any>undefined;
            this.QtyNeeded = data["QtyNeeded"];
            this.QtyApplicants = data["QtyApplicants"];
            if (data["CompetensesNeeded"] && data["CompetensesNeeded"].constructor === Array) {
                this.CompetensesNeeded = [];
                for (let item of data["CompetensesNeeded"])
                    this.CompetensesNeeded.push(item);
            }
            this.PublishOnAppId = data["PublishOnAppId"];
            this.Public = data["Public"];
            this.PublicUrl = data["PublicUrl"];
            this.PublicMultipleUrl = data["PublicMultipleUrl"];
            this.Location = data["Location"];
            this.JobType = data["JobType"];
            this.RoleOrLevel = data["RoleOrLevel"];
            this.id = data["id"];
            this.Title = data["Title"];
            this.Description = data["Description"];
        }
    }

    static fromJS(data: any): RecruitPipe {
        let result = new RecruitPipe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ImageUrl"] = this.ImageUrl;
        data["ShortDescription"] = this.ShortDescription;
        data["From"] = this.From ? this.From.toISOString() : <any>undefined;
        data["To"] = this.To ? this.To.toISOString() : <any>undefined;
        data["ApplyBefore"] = this.ApplyBefore ? this.ApplyBefore.toISOString() : <any>undefined;
        data["QtyNeeded"] = this.QtyNeeded;
        data["QtyApplicants"] = this.QtyApplicants;
        if (this.CompetensesNeeded && this.CompetensesNeeded.constructor === Array) {
            data["CompetensesNeeded"] = [];
            for (let item of this.CompetensesNeeded)
                data["CompetensesNeeded"].push(item);
        }
        data["PublishOnAppId"] = this.PublishOnAppId;
        data["Public"] = this.Public;
        data["PublicUrl"] = this.PublicUrl;
        data["PublicMultipleUrl"] = this.PublicMultipleUrl;
        data["Location"] = this.Location;
        data["JobType"] = this.JobType;
        data["RoleOrLevel"] = this.RoleOrLevel;
        data["id"] = this.id;
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        return data;
    }
}

export interface IRecruitPipe {
    ImageUrl?: string;
    ShortDescription?: string;
    From?: Date;
    To?: Date;
    ApplyBefore?: Date;
    QtyNeeded?: number;
    QtyApplicants?: number;
    CompetensesNeeded?: string[];
    PublishOnAppId?: number;
    Public?: boolean;
    PublicUrl?: string;
    PublicMultipleUrl?: string;
    Location?: string;
    JobType?: string;
    RoleOrLevel?: string;
    id?: string;
    Title?: string;
    Description?: string;
}

export class RecruitPipeSetting implements IRecruitPipeSetting {
    id?: string;
    Name?: string;
    Steps?: RecruitPipeSettingStep[];

    constructor(data?: IRecruitPipeSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            if (data["Steps"] && data["Steps"].constructor === Array) {
                this.Steps = [];
                for (let item of data["Steps"])
                    this.Steps.push(RecruitPipeSettingStep.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RecruitPipeSetting {
        let result = new RecruitPipeSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        if (this.Steps && this.Steps.constructor === Array) {
            data["Steps"] = [];
            for (let item of this.Steps)
                data["Steps"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRecruitPipeSetting {
    id?: string;
    Name?: string;
    Steps?: RecruitPipeSettingStep[];
}

export class RecruitPipeSettingStep implements IRecruitPipeSettingStep {
    Name?: string;
    SortOrder?: number;

    constructor(data?: IRecruitPipeSettingStep) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Name = data["Name"];
            this.SortOrder = data["SortOrder"];
        }
    }

    static fromJS(data: any): RecruitPipeSettingStep {
        let result = new RecruitPipeSettingStep();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.Name;
        data["SortOrder"] = this.SortOrder;
        return data;
    }
}

export interface IRecruitPipeSettingStep {
    Name?: string;
    SortOrder?: number;
}

export class RecruitPipeStep implements IRecruitPipeStep {
    id?: string;
    Name?: string;
    SortOrder?: number;
    Color?: string;
    PipeId?: string;

    constructor(data?: IRecruitPipeStep) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.SortOrder = data["SortOrder"];
            this.Color = data["Color"];
            this.PipeId = data["PipeId"];
        }
    }

    static fromJS(data: any): RecruitPipeStep {
        let result = new RecruitPipeStep();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["SortOrder"] = this.SortOrder;
        data["Color"] = this.Color;
        data["PipeId"] = this.PipeId;
        return data;
    }
}

export interface IRecruitPipeStep {
    id?: string;
    Name?: string;
    SortOrder?: number;
    Color?: string;
    PipeId?: string;
}

export class RecruitPipeStepItem implements IRecruitPipeStepItem {
    Rating?: number;
    id?: string;
    Title?: string;
    Description?: string;
    Color?: string;
    ConnectedItemId?: string;
    ConnectedItemType?: string;
    SortOrder?: number;
    PipeStepId?: string;
    PipeId?: string;

    constructor(data?: IRecruitPipeStepItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Rating = data["Rating"];
            this.id = data["id"];
            this.Title = data["Title"];
            this.Description = data["Description"];
            this.Color = data["Color"];
            this.ConnectedItemId = data["ConnectedItemId"];
            this.ConnectedItemType = data["ConnectedItemType"];
            this.SortOrder = data["SortOrder"];
            this.PipeStepId = data["PipeStepId"];
            this.PipeId = data["PipeId"];
        }
    }

    static fromJS(data: any): RecruitPipeStepItem {
        let result = new RecruitPipeStepItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Rating"] = this.Rating;
        data["id"] = this.id;
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        data["Color"] = this.Color;
        data["ConnectedItemId"] = this.ConnectedItemId;
        data["ConnectedItemType"] = this.ConnectedItemType;
        data["SortOrder"] = this.SortOrder;
        data["PipeStepId"] = this.PipeStepId;
        data["PipeId"] = this.PipeId;
        return data;
    }
}

export interface IRecruitPipeStepItem {
    Rating?: number;
    id?: string;
    Title?: string;
    Description?: string;
    Color?: string;
    ConnectedItemId?: string;
    ConnectedItemType?: string;
    SortOrder?: number;
    PipeStepId?: string;
    PipeId?: string;
}

export class Reference implements IReference {
    id?: string;
    Name?: string;
    CompanyName?: string;
    Email?: string;
    CellPhone?: string;
    Phone?: string;
    Description?: string;
    InternalNote?: string;
    ForId?: string;
    CreatedDate?: Date;
    UpdatedDate?: Date;

    constructor(data?: IReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.CompanyName = data["CompanyName"];
            this.Email = data["Email"];
            this.CellPhone = data["CellPhone"];
            this.Phone = data["Phone"];
            this.Description = data["Description"];
            this.InternalNote = data["InternalNote"];
            this.ForId = data["ForId"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Reference {
        let result = new Reference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["CompanyName"] = this.CompanyName;
        data["Email"] = this.Email;
        data["CellPhone"] = this.CellPhone;
        data["Phone"] = this.Phone;
        data["Description"] = this.Description;
        data["InternalNote"] = this.InternalNote;
        data["ForId"] = this.ForId;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IReference {
    id?: string;
    Name?: string;
    CompanyName?: string;
    Email?: string;
    CellPhone?: string;
    Phone?: string;
    Description?: string;
    InternalNote?: string;
    ForId?: string;
    CreatedDate?: Date;
    UpdatedDate?: Date;
}

export class ReferenceCheck implements IReferenceCheck {
    id?: string;
    Notes?: string;
    ForId?: string;
    CreatedDate?: Date;
    UpdatedDate?: Date;

    constructor(data?: IReferenceCheck) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Notes = data["Notes"];
            this.ForId = data["ForId"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ReferenceCheck {
        let result = new ReferenceCheck();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Notes"] = this.Notes;
        data["ForId"] = this.ForId;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IReferenceCheck {
    id?: string;
    Notes?: string;
    ForId?: string;
    CreatedDate?: Date;
    UpdatedDate?: Date;
}

export class ReferenceCheckTemplate implements IReferenceCheckTemplate {
    id?: string;
    Name?: string;
    Content?: string;

    constructor(data?: IReferenceCheckTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.Content = data["Content"];
        }
    }

    static fromJS(data: any): ReferenceCheckTemplate {
        let result = new ReferenceCheckTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["Content"] = this.Content;
        return data;
    }
}

export interface IReferenceCheckTemplate {
    id?: string;
    Name?: string;
    Content?: string;
}

export class Reminder implements IReminder {
    id?: string;
    ReminderTypeId?: string;
    ReminderDate?: Date;
    ReminderNotificationDate?: Date;
    Description?: string;
    MetaName?: string;
    MetaDescription?: string;
    MetaPhone?: string;
    MetaCellPhone?: string;
    MetaEmail?: string;
    IsAccomplished?: boolean;
    ReminderForItemType?: string;
    ItemId?: string;
    CreatedBy?: number;
    UpdatedBy?: number;
    RemindPersonId?: number;
    RemindPersonName?: string;
    Context?: Context;

    constructor(data?: IReminder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ReminderTypeId = data["ReminderTypeId"];
            this.ReminderDate = data["ReminderDate"] ? new Date(data["ReminderDate"].toString()) : <any>undefined;
            this.ReminderNotificationDate = data["ReminderNotificationDate"] ? new Date(data["ReminderNotificationDate"].toString()) : <any>undefined;
            this.Description = data["Description"];
            this.MetaName = data["MetaName"];
            this.MetaDescription = data["MetaDescription"];
            this.MetaPhone = data["MetaPhone"];
            this.MetaCellPhone = data["MetaCellPhone"];
            this.MetaEmail = data["MetaEmail"];
            this.IsAccomplished = data["IsAccomplished"];
            this.ReminderForItemType = data["ReminderForItemType"];
            this.ItemId = data["ItemId"];
            this.CreatedBy = data["CreatedBy"];
            this.UpdatedBy = data["UpdatedBy"];
            this.RemindPersonId = data["RemindPersonId"];
            this.RemindPersonName = data["RemindPersonName"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Reminder {
        let result = new Reminder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ReminderTypeId"] = this.ReminderTypeId;
        data["ReminderDate"] = this.ReminderDate ? this.ReminderDate.toISOString() : <any>undefined;
        data["ReminderNotificationDate"] = this.ReminderNotificationDate ? this.ReminderNotificationDate.toISOString() : <any>undefined;
        data["Description"] = this.Description;
        data["MetaName"] = this.MetaName;
        data["MetaDescription"] = this.MetaDescription;
        data["MetaPhone"] = this.MetaPhone;
        data["MetaCellPhone"] = this.MetaCellPhone;
        data["MetaEmail"] = this.MetaEmail;
        data["IsAccomplished"] = this.IsAccomplished;
        data["ReminderForItemType"] = this.ReminderForItemType;
        data["ItemId"] = this.ItemId;
        data["CreatedBy"] = this.CreatedBy;
        data["UpdatedBy"] = this.UpdatedBy;
        data["RemindPersonId"] = this.RemindPersonId;
        data["RemindPersonName"] = this.RemindPersonName;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IReminder {
    id?: string;
    ReminderTypeId?: string;
    ReminderDate?: Date;
    ReminderNotificationDate?: Date;
    Description?: string;
    MetaName?: string;
    MetaDescription?: string;
    MetaPhone?: string;
    MetaCellPhone?: string;
    MetaEmail?: string;
    IsAccomplished?: boolean;
    ReminderForItemType?: string;
    ItemId?: string;
    CreatedBy?: number;
    UpdatedBy?: number;
    RemindPersonId?: number;
    RemindPersonName?: string;
    Context?: Context;
}

export class SalePipe implements ISalePipe {
    Flavor?: string;
    CurrencyId?: string;
    id?: string;
    Title?: string;
    Description?: string;

    constructor(data?: ISalePipe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Flavor = data["Flavor"];
            this.CurrencyId = data["CurrencyId"];
            this.id = data["id"];
            this.Title = data["Title"];
            this.Description = data["Description"];
        }
    }

    static fromJS(data: any): SalePipe {
        let result = new SalePipe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Flavor"] = this.Flavor;
        data["CurrencyId"] = this.CurrencyId;
        data["id"] = this.id;
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        return data;
    }
}

export interface ISalePipe {
    Flavor?: string;
    CurrencyId?: string;
    id?: string;
    Title?: string;
    Description?: string;
}

export class SalePipeStats implements ISalePipeStats {
    Weights?: SalePipeWeight[];
    ValueItems?: SalePipeValueItem[];

    constructor(data?: ISalePipeStats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Weights"] && data["Weights"].constructor === Array) {
                this.Weights = [];
                for (let item of data["Weights"])
                    this.Weights.push(SalePipeWeight.fromJS(item));
            }
            if (data["ValueItems"] && data["ValueItems"].constructor === Array) {
                this.ValueItems = [];
                for (let item of data["ValueItems"])
                    this.ValueItems.push(SalePipeValueItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SalePipeStats {
        let result = new SalePipeStats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Weights && this.Weights.constructor === Array) {
            data["Weights"] = [];
            for (let item of this.Weights)
                data["Weights"].push(item.toJSON());
        }
        if (this.ValueItems && this.ValueItems.constructor === Array) {
            data["ValueItems"] = [];
            for (let item of this.ValueItems)
                data["ValueItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISalePipeStats {
    Weights?: SalePipeWeight[];
    ValueItems?: SalePipeValueItem[];
}

export class SalePipeWeight implements ISalePipeWeight {
    id?: string;
    Name?: string;
    WeightPercentage?: number;
    SortOrder?: number;

    constructor(data?: ISalePipeWeight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.WeightPercentage = data["WeightPercentage"];
            this.SortOrder = data["SortOrder"];
        }
    }

    static fromJS(data: any): SalePipeWeight {
        let result = new SalePipeWeight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["WeightPercentage"] = this.WeightPercentage;
        data["SortOrder"] = this.SortOrder;
        return data;
    }
}

export interface ISalePipeWeight {
    id?: string;
    Name?: string;
    WeightPercentage?: number;
    SortOrder?: number;
}

export class SalePipeValueItem implements ISalePipeValueItem {
    id?: string;
    Value?: number;
    WeightPercentage?: number;
    WeightedValue?: number;
    DealDate?: string;
    ResponsibleId?: string;
    PipeStepId?: string;

    constructor(data?: ISalePipeValueItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Value = data["Value"];
            this.WeightPercentage = data["WeightPercentage"];
            this.WeightedValue = data["WeightedValue"];
            this.DealDate = data["DealDate"];
            this.ResponsibleId = data["ResponsibleId"];
            this.PipeStepId = data["PipeStepId"];
        }
    }

    static fromJS(data: any): SalePipeValueItem {
        let result = new SalePipeValueItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Value"] = this.Value;
        data["WeightPercentage"] = this.WeightPercentage;
        data["WeightedValue"] = this.WeightedValue;
        data["DealDate"] = this.DealDate;
        data["ResponsibleId"] = this.ResponsibleId;
        data["PipeStepId"] = this.PipeStepId;
        return data;
    }
}

export interface ISalePipeValueItem {
    id?: string;
    Value?: number;
    WeightPercentage?: number;
    WeightedValue?: number;
    DealDate?: string;
    ResponsibleId?: string;
    PipeStepId?: string;
}

export class PipeMember implements IPipeMember {
    id?: string;
    Name?: string;
    PersonId?: string;
    IsInActivated?: boolean;
    IsAdmin?: boolean;
    PipeId?: string;

    constructor(data?: IPipeMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.PersonId = data["PersonId"];
            this.IsInActivated = data["IsInActivated"];
            this.IsAdmin = data["IsAdmin"];
            this.PipeId = data["PipeId"];
        }
    }

    static fromJS(data: any): PipeMember {
        let result = new PipeMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["PersonId"] = this.PersonId;
        data["IsInActivated"] = this.IsInActivated;
        data["IsAdmin"] = this.IsAdmin;
        data["PipeId"] = this.PipeId;
        return data;
    }
}

export interface IPipeMember {
    id?: string;
    Name?: string;
    PersonId?: string;
    IsInActivated?: boolean;
    IsAdmin?: boolean;
    PipeId?: string;
}

export class SalePipeStep implements ISalePipeStep {
    WeightPercentage?: number;
    id?: string;
    Name?: string;
    SortOrder?: number;
    Color?: string;
    PipeId?: string;

    constructor(data?: ISalePipeStep) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WeightPercentage = data["WeightPercentage"];
            this.id = data["id"];
            this.Name = data["Name"];
            this.SortOrder = data["SortOrder"];
            this.Color = data["Color"];
            this.PipeId = data["PipeId"];
        }
    }

    static fromJS(data: any): SalePipeStep {
        let result = new SalePipeStep();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WeightPercentage"] = this.WeightPercentage;
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["SortOrder"] = this.SortOrder;
        data["Color"] = this.Color;
        data["PipeId"] = this.PipeId;
        return data;
    }
}

export interface ISalePipeStep {
    WeightPercentage?: number;
    id?: string;
    Name?: string;
    SortOrder?: number;
    Color?: string;
    PipeId?: string;
}

export class SalePipeStepItem implements ISalePipeStepItem {
    ProfilePicUrl?: string;
    Name?: string;
    FirstName?: string;
    LastName?: string;
    Email?: string;
    CellPhone?: string;
    LegalPersonTypeId?: string;
    ResponsibleId?: string;
    Value?: number;
    DealDate?: string;
    AreaOfExpertises?: string[];
    id?: string;
    Title?: string;
    Description?: string;
    Color?: string;
    ConnectedItemId?: string;
    ConnectedItemType?: string;
    SortOrder?: number;
    PipeStepId?: string;
    PipeId?: string;

    constructor(data?: ISalePipeStepItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ProfilePicUrl = data["ProfilePicUrl"];
            this.Name = data["Name"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.Email = data["Email"];
            this.CellPhone = data["CellPhone"];
            this.LegalPersonTypeId = data["LegalPersonTypeId"];
            this.ResponsibleId = data["ResponsibleId"];
            this.Value = data["Value"];
            this.DealDate = data["DealDate"];
            if (data["AreaOfExpertises"] && data["AreaOfExpertises"].constructor === Array) {
                this.AreaOfExpertises = [];
                for (let item of data["AreaOfExpertises"])
                    this.AreaOfExpertises.push(item);
            }
            this.id = data["id"];
            this.Title = data["Title"];
            this.Description = data["Description"];
            this.Color = data["Color"];
            this.ConnectedItemId = data["ConnectedItemId"];
            this.ConnectedItemType = data["ConnectedItemType"];
            this.SortOrder = data["SortOrder"];
            this.PipeStepId = data["PipeStepId"];
            this.PipeId = data["PipeId"];
        }
    }

    static fromJS(data: any): SalePipeStepItem {
        let result = new SalePipeStepItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProfilePicUrl"] = this.ProfilePicUrl;
        data["Name"] = this.Name;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["Email"] = this.Email;
        data["CellPhone"] = this.CellPhone;
        data["LegalPersonTypeId"] = this.LegalPersonTypeId;
        data["ResponsibleId"] = this.ResponsibleId;
        data["Value"] = this.Value;
        data["DealDate"] = this.DealDate;
        if (this.AreaOfExpertises && this.AreaOfExpertises.constructor === Array) {
            data["AreaOfExpertises"] = [];
            for (let item of this.AreaOfExpertises)
                data["AreaOfExpertises"].push(item);
        }
        data["id"] = this.id;
        data["Title"] = this.Title;
        data["Description"] = this.Description;
        data["Color"] = this.Color;
        data["ConnectedItemId"] = this.ConnectedItemId;
        data["ConnectedItemType"] = this.ConnectedItemType;
        data["SortOrder"] = this.SortOrder;
        data["PipeStepId"] = this.PipeStepId;
        data["PipeId"] = this.PipeId;
        return data;
    }
}

export interface ISalePipeStepItem {
    ProfilePicUrl?: string;
    Name?: string;
    FirstName?: string;
    LastName?: string;
    Email?: string;
    CellPhone?: string;
    LegalPersonTypeId?: string;
    ResponsibleId?: string;
    Value?: number;
    DealDate?: string;
    AreaOfExpertises?: string[];
    id?: string;
    Title?: string;
    Description?: string;
    Color?: string;
    ConnectedItemId?: string;
    ConnectedItemType?: string;
    SortOrder?: number;
    PipeStepId?: string;
    PipeId?: string;
}

export class ContinuationResultOfIEnumerableOfSecureMessage implements IContinuationResultOfIEnumerableOfSecureMessage {
    Result?: SecureMessage[];
    ContinuationToken?: string;

    constructor(data?: IContinuationResultOfIEnumerableOfSecureMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Result"] && data["Result"].constructor === Array) {
                this.Result = [];
                for (let item of data["Result"])
                    this.Result.push(SecureMessage.fromJS(item));
            }
            this.ContinuationToken = data["ContinuationToken"];
        }
    }

    static fromJS(data: any): ContinuationResultOfIEnumerableOfSecureMessage {
        let result = new ContinuationResultOfIEnumerableOfSecureMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Result && this.Result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.Result)
                data["Result"].push(item.toJSON());
        }
        data["ContinuationToken"] = this.ContinuationToken;
        return data;
    }
}

export interface IContinuationResultOfIEnumerableOfSecureMessage {
    Result?: SecureMessage[];
    ContinuationToken?: string;
}

export class SecureMessage implements ISecureMessage {
    id?: string;
    Email?: EmailStandard;
    IsOneTime?: boolean;
    ExpireAfterQtyMinutes?: number;
    PinCode?: string;
    QtyTimeOpened?: number;
    IsTempDeleted?: boolean;

    constructor(data?: ISecureMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Email = data["Email"] ? EmailStandard.fromJS(data["Email"]) : <any>undefined;
            this.IsOneTime = data["IsOneTime"];
            this.ExpireAfterQtyMinutes = data["ExpireAfterQtyMinutes"];
            this.PinCode = data["PinCode"];
            this.QtyTimeOpened = data["QtyTimeOpened"];
            this.IsTempDeleted = data["IsTempDeleted"];
        }
    }

    static fromJS(data: any): SecureMessage {
        let result = new SecureMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Email"] = this.Email ? this.Email.toJSON() : <any>undefined;
        data["IsOneTime"] = this.IsOneTime;
        data["ExpireAfterQtyMinutes"] = this.ExpireAfterQtyMinutes;
        data["PinCode"] = this.PinCode;
        data["QtyTimeOpened"] = this.QtyTimeOpened;
        data["IsTempDeleted"] = this.IsTempDeleted;
        return data;
    }
}

export interface ISecureMessage {
    id?: string;
    Email?: EmailStandard;
    IsOneTime?: boolean;
    ExpireAfterQtyMinutes?: number;
    PinCode?: string;
    QtyTimeOpened?: number;
    IsTempDeleted?: boolean;
}

export class MonacoLiquidModelPropertyCompletion implements IMonacoLiquidModelPropertyCompletion {
    label?: string;
    kind?: number;
    documentation?: string;
    insertText?: string;
    typename?: string;

    constructor(data?: IMonacoLiquidModelPropertyCompletion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.kind = data["kind"];
            this.documentation = data["documentation"];
            this.insertText = data["insertText"];
            this.typename = data["typename"];
        }
    }

    static fromJS(data: any): MonacoLiquidModelPropertyCompletion {
        let result = new MonacoLiquidModelPropertyCompletion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["kind"] = this.kind;
        data["documentation"] = this.documentation;
        data["insertText"] = this.insertText;
        data["typename"] = this.typename;
        return data;
    }
}

export interface IMonacoLiquidModelPropertyCompletion {
    label?: string;
    kind?: number;
    documentation?: string;
    insertText?: string;
    typename?: string;
}

export class EventSubscriberInputEmailTemplate implements IEventSubscriberInputEmailTemplate {
    id?: string;
    TemplateId?: number;
    ForEventSubscriberDescriptionId?: string;

    constructor(data?: IEventSubscriberInputEmailTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.TemplateId = data["TemplateId"];
            this.ForEventSubscriberDescriptionId = data["ForEventSubscriberDescriptionId"];
        }
    }

    static fromJS(data: any): EventSubscriberInputEmailTemplate {
        let result = new EventSubscriberInputEmailTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["TemplateId"] = this.TemplateId;
        data["ForEventSubscriberDescriptionId"] = this.ForEventSubscriberDescriptionId;
        return data;
    }
}

export interface IEventSubscriberInputEmailTemplate {
    id?: string;
    TemplateId?: number;
    ForEventSubscriberDescriptionId?: string;
}

export class PersonalDataManagementSetting implements IPersonalDataManagementSetting {
    id?: string;
    ResponsiblePersonId?: string;
    ResponsiblePersonName?: string;
    LogExternalExportOfPersonalData?: boolean;
    FindInactiveContacts?: boolean;
    QtyMonthsToCountAsInactive?: number;
    ActivityOnInactiveContacts?: number;
    InactiveContactsActivityOptions?: KeyValueModel[];

    constructor(data?: IPersonalDataManagementSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.ResponsiblePersonName = data["ResponsiblePersonName"];
            this.LogExternalExportOfPersonalData = data["LogExternalExportOfPersonalData"];
            this.FindInactiveContacts = data["FindInactiveContacts"];
            this.QtyMonthsToCountAsInactive = data["QtyMonthsToCountAsInactive"];
            this.ActivityOnInactiveContacts = data["ActivityOnInactiveContacts"];
            if (data["InactiveContactsActivityOptions"] && data["InactiveContactsActivityOptions"].constructor === Array) {
                this.InactiveContactsActivityOptions = [];
                for (let item of data["InactiveContactsActivityOptions"])
                    this.InactiveContactsActivityOptions.push(KeyValueModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonalDataManagementSetting {
        let result = new PersonalDataManagementSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["ResponsiblePersonName"] = this.ResponsiblePersonName;
        data["LogExternalExportOfPersonalData"] = this.LogExternalExportOfPersonalData;
        data["FindInactiveContacts"] = this.FindInactiveContacts;
        data["QtyMonthsToCountAsInactive"] = this.QtyMonthsToCountAsInactive;
        data["ActivityOnInactiveContacts"] = this.ActivityOnInactiveContacts;
        if (this.InactiveContactsActivityOptions && this.InactiveContactsActivityOptions.constructor === Array) {
            data["InactiveContactsActivityOptions"] = [];
            for (let item of this.InactiveContactsActivityOptions)
                data["InactiveContactsActivityOptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPersonalDataManagementSetting {
    id?: string;
    ResponsiblePersonId?: string;
    ResponsiblePersonName?: string;
    LogExternalExportOfPersonalData?: boolean;
    FindInactiveContacts?: boolean;
    QtyMonthsToCountAsInactive?: number;
    ActivityOnInactiveContacts?: number;
    InactiveContactsActivityOptions?: KeyValueModel[];
}

export class KeyValueModel implements IKeyValueModel {
    Key?: number;
    Value?: string;

    constructor(data?: IKeyValueModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Key = data["Key"];
            this.Value = data["Value"];
        }
    }

    static fromJS(data: any): KeyValueModel {
        let result = new KeyValueModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Key"] = this.Key;
        data["Value"] = this.Value;
        return data;
    }
}

export interface IKeyValueModel {
    Key?: number;
    Value?: string;
}

export class SettingsModel implements ISettingsModel {
    Services?: SystemService[];
    ProductColors?: ProductColor[];
    ProductSizes?: ProductSize[];
    Logo?: CdnFile;
    TermsOfPayments?: TermsOfPayment[];

    constructor(data?: ISettingsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Services"] && data["Services"].constructor === Array) {
                this.Services = [];
                for (let item of data["Services"])
                    this.Services.push(SystemService.fromJS(item));
            }
            if (data["ProductColors"] && data["ProductColors"].constructor === Array) {
                this.ProductColors = [];
                for (let item of data["ProductColors"])
                    this.ProductColors.push(ProductColor.fromJS(item));
            }
            if (data["ProductSizes"] && data["ProductSizes"].constructor === Array) {
                this.ProductSizes = [];
                for (let item of data["ProductSizes"])
                    this.ProductSizes.push(ProductSize.fromJS(item));
            }
            this.Logo = data["Logo"] ? CdnFile.fromJS(data["Logo"]) : <any>undefined;
            if (data["TermsOfPayments"] && data["TermsOfPayments"].constructor === Array) {
                this.TermsOfPayments = [];
                for (let item of data["TermsOfPayments"])
                    this.TermsOfPayments.push(TermsOfPayment.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SettingsModel {
        let result = new SettingsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Services && this.Services.constructor === Array) {
            data["Services"] = [];
            for (let item of this.Services)
                data["Services"].push(item.toJSON());
        }
        if (this.ProductColors && this.ProductColors.constructor === Array) {
            data["ProductColors"] = [];
            for (let item of this.ProductColors)
                data["ProductColors"].push(item.toJSON());
        }
        if (this.ProductSizes && this.ProductSizes.constructor === Array) {
            data["ProductSizes"] = [];
            for (let item of this.ProductSizes)
                data["ProductSizes"].push(item.toJSON());
        }
        data["Logo"] = this.Logo ? this.Logo.toJSON() : <any>undefined;
        if (this.TermsOfPayments && this.TermsOfPayments.constructor === Array) {
            data["TermsOfPayments"] = [];
            for (let item of this.TermsOfPayments)
                data["TermsOfPayments"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISettingsModel {
    Services?: SystemService[];
    ProductColors?: ProductColor[];
    ProductSizes?: ProductSize[];
    Logo?: CdnFile;
    TermsOfPayments?: TermsOfPayment[];
}

export class SystemService implements ISystemService {
    SystemServiceId?: number;
    Name?: string;
    Price?: number;

    constructor(data?: ISystemService) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SystemServiceId = data["SystemServiceId"];
            this.Name = data["Name"];
            this.Price = data["Price"];
        }
    }

    static fromJS(data: any): SystemService {
        let result = new SystemService();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SystemServiceId"] = this.SystemServiceId;
        data["Name"] = this.Name;
        data["Price"] = this.Price;
        return data;
    }
}

export interface ISystemService {
    SystemServiceId?: number;
    Name?: string;
    Price?: number;
}

export class CdnFile implements ICdnFile {
    Name?: string;
    Url?: string;
    Extension?: string;
    FileCategory?: string;

    constructor(data?: ICdnFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Name = data["Name"];
            this.Url = data["Url"];
            this.Extension = data["Extension"];
            this.FileCategory = data["FileCategory"];
        }
    }

    static fromJS(data: any): CdnFile {
        let result = new CdnFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.Name;
        data["Url"] = this.Url;
        data["Extension"] = this.Extension;
        data["FileCategory"] = this.FileCategory;
        return data;
    }
}

export interface ICdnFile {
    Name?: string;
    Url?: string;
    Extension?: string;
    FileCategory?: string;
}

export class DeliveryDay implements IDeliveryDay {
    DeliveryDayId?: number;
    AreaCode?: string;
    DayOfWeek?: DeliveryDayDayOfWeek;
    City?: string;
    CountyId?: string;
    DefaultShippingTag?: string;

    constructor(data?: IDeliveryDay) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.DeliveryDayId = data["DeliveryDayId"];
            this.AreaCode = data["AreaCode"];
            this.DayOfWeek = data["DayOfWeek"];
            this.City = data["City"];
            this.CountyId = data["CountyId"];
            this.DefaultShippingTag = data["DefaultShippingTag"];
        }
    }

    static fromJS(data: any): DeliveryDay {
        let result = new DeliveryDay();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DeliveryDayId"] = this.DeliveryDayId;
        data["AreaCode"] = this.AreaCode;
        data["DayOfWeek"] = this.DayOfWeek;
        data["City"] = this.City;
        data["CountyId"] = this.CountyId;
        data["DefaultShippingTag"] = this.DefaultShippingTag;
        return data;
    }
}

export interface IDeliveryDay {
    DeliveryDayId?: number;
    AreaCode?: string;
    DayOfWeek?: DeliveryDayDayOfWeek;
    City?: string;
    CountyId?: string;
    DefaultShippingTag?: string;
}

export class MarketingBlock implements IMarketingBlock {
    MarketingBlockId?: number;
    Address?: string;
    Type?: string;

    constructor(data?: IMarketingBlock) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.MarketingBlockId = data["MarketingBlockId"];
            this.Address = data["Address"];
            this.Type = data["Type"];
        }
    }

    static fromJS(data: any): MarketingBlock {
        let result = new MarketingBlock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MarketingBlockId"] = this.MarketingBlockId;
        data["Address"] = this.Address;
        data["Type"] = this.Type;
        return data;
    }
}

export interface IMarketingBlock {
    MarketingBlockId?: number;
    Address?: string;
    Type?: string;
}

export class PromoCode implements IPromoCode {
    OpenToUse?: boolean;
    MaxQtyPerPerson?: number;
    MaxQtyTotal?: number;
    ReferralPersonId?: number;
    ReferralValue?: number;
    ReferralDescription?: string;
    DefaultOnOwnPaymentLoyaltyAmount?: number;
    DefaultReferralPaymentLoyaltyAmount?: number;
    UsedQtyTimes?: number;
    PromoCodeId?: number;
    TheCode?: string;
    Description?: string;
    ValidThru?: Date;
    Value?: number;
    IsRelativeValue?: boolean;
    CurrencyId?: string;

    constructor(data?: IPromoCode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.OpenToUse = data["OpenToUse"];
            this.MaxQtyPerPerson = data["MaxQtyPerPerson"];
            this.MaxQtyTotal = data["MaxQtyTotal"];
            this.ReferralPersonId = data["ReferralPersonId"];
            this.ReferralValue = data["ReferralValue"];
            this.ReferralDescription = data["ReferralDescription"];
            this.DefaultOnOwnPaymentLoyaltyAmount = data["DefaultOnOwnPaymentLoyaltyAmount"];
            this.DefaultReferralPaymentLoyaltyAmount = data["DefaultReferralPaymentLoyaltyAmount"];
            this.UsedQtyTimes = data["UsedQtyTimes"];
            this.PromoCodeId = data["PromoCodeId"];
            this.TheCode = data["TheCode"];
            this.Description = data["Description"];
            this.ValidThru = data["ValidThru"] ? new Date(data["ValidThru"].toString()) : <any>undefined;
            this.Value = data["Value"];
            this.IsRelativeValue = data["IsRelativeValue"];
            this.CurrencyId = data["CurrencyId"];
        }
    }

    static fromJS(data: any): PromoCode {
        let result = new PromoCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OpenToUse"] = this.OpenToUse;
        data["MaxQtyPerPerson"] = this.MaxQtyPerPerson;
        data["MaxQtyTotal"] = this.MaxQtyTotal;
        data["ReferralPersonId"] = this.ReferralPersonId;
        data["ReferralValue"] = this.ReferralValue;
        data["ReferralDescription"] = this.ReferralDescription;
        data["DefaultOnOwnPaymentLoyaltyAmount"] = this.DefaultOnOwnPaymentLoyaltyAmount;
        data["DefaultReferralPaymentLoyaltyAmount"] = this.DefaultReferralPaymentLoyaltyAmount;
        data["UsedQtyTimes"] = this.UsedQtyTimes;
        data["PromoCodeId"] = this.PromoCodeId;
        data["TheCode"] = this.TheCode;
        data["Description"] = this.Description;
        data["ValidThru"] = this.ValidThru ? this.ValidThru.toISOString() : <any>undefined;
        data["Value"] = this.Value;
        data["IsRelativeValue"] = this.IsRelativeValue;
        data["CurrencyId"] = this.CurrencyId;
        return data;
    }
}

export interface IPromoCode {
    OpenToUse?: boolean;
    MaxQtyPerPerson?: number;
    MaxQtyTotal?: number;
    ReferralPersonId?: number;
    ReferralValue?: number;
    ReferralDescription?: string;
    DefaultOnOwnPaymentLoyaltyAmount?: number;
    DefaultReferralPaymentLoyaltyAmount?: number;
    UsedQtyTimes?: number;
    PromoCodeId?: number;
    TheCode?: string;
    Description?: string;
    ValidThru?: Date;
    Value?: number;
    IsRelativeValue?: boolean;
    CurrencyId?: string;
}

export class PagingResult implements IPagingResult {
    SearchStr?: string;
    Skip?: number;
    Take?: number;
    TotalQty?: number;
    Result?: any[];
    IsFirstPage?: boolean;
    IsLastPage?: boolean;
    QtyPages?: number;

    constructor(data?: IPagingResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SearchStr = data["SearchStr"];
            this.Skip = data["Skip"];
            this.Take = data["Take"];
            this.TotalQty = data["TotalQty"];
            if (data["Result"] && data["Result"].constructor === Array) {
                this.Result = [];
                for (let item of data["Result"])
                    this.Result.push(item);
            }
            this.IsFirstPage = data["IsFirstPage"];
            this.IsLastPage = data["IsLastPage"];
            this.QtyPages = data["QtyPages"];
        }
    }

    static fromJS(data: any): PagingResult {
        let result = new PagingResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchStr"] = this.SearchStr;
        data["Skip"] = this.Skip;
        data["Take"] = this.Take;
        data["TotalQty"] = this.TotalQty;
        if (this.Result && this.Result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.Result)
                data["Result"].push(item);
        }
        data["IsFirstPage"] = this.IsFirstPage;
        data["IsLastPage"] = this.IsLastPage;
        data["QtyPages"] = this.QtyPages;
        return data;
    }
}

export interface IPagingResult {
    SearchStr?: string;
    Skip?: number;
    Take?: number;
    TotalQty?: number;
    Result?: any[];
    IsFirstPage?: boolean;
    IsLastPage?: boolean;
    QtyPages?: number;
}

export class BillingReleaseLimit implements IBillingReleaseLimit {
    BillingReleaseLimitId?: number;
    Value?: number;
    CurrencyId?: string;
    ReleaseAutomaticOnPayment?: boolean;

    constructor(data?: IBillingReleaseLimit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.BillingReleaseLimitId = data["BillingReleaseLimitId"];
            this.Value = data["Value"];
            this.CurrencyId = data["CurrencyId"];
            this.ReleaseAutomaticOnPayment = data["ReleaseAutomaticOnPayment"];
        }
    }

    static fromJS(data: any): BillingReleaseLimit {
        let result = new BillingReleaseLimit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["BillingReleaseLimitId"] = this.BillingReleaseLimitId;
        data["Value"] = this.Value;
        data["CurrencyId"] = this.CurrencyId;
        data["ReleaseAutomaticOnPayment"] = this.ReleaseAutomaticOnPayment;
        return data;
    }
}

export interface IBillingReleaseLimit {
    BillingReleaseLimitId?: number;
    Value?: number;
    CurrencyId?: string;
    ReleaseAutomaticOnPayment?: boolean;
}

export class TermsOfPaymentWithCredentials implements ITermsOfPaymentWithCredentials {
    MerchantOrClientId?: string;
    Username?: string;
    Password?: string;
    TermsOfPaymentId?: string;
    Description?: string;
    ExtendedDescription?: string;
    CostDescription?: string;
    CostExtendedDescription?: string;
    SellingPrice?: number;
    Vat?: number;
    SellingPriceInclVat?: number;
    DefaultOnCustomer?: boolean;
    DefaultOnProjectOverideCustomer?: boolean;
    DefaultOnOrderOverideCustomer?: boolean;
    DefaultInvoiceCost?: number;
    TypeName?: string;
    IsForInternalUseOnly?: boolean;

    constructor(data?: ITermsOfPaymentWithCredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.MerchantOrClientId = data["MerchantOrClientId"];
            this.Username = data["Username"];
            this.Password = data["Password"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.Description = data["Description"];
            this.ExtendedDescription = data["ExtendedDescription"];
            this.CostDescription = data["CostDescription"];
            this.CostExtendedDescription = data["CostExtendedDescription"];
            this.SellingPrice = data["SellingPrice"];
            this.Vat = data["Vat"];
            this.SellingPriceInclVat = data["SellingPriceInclVat"];
            this.DefaultOnCustomer = data["DefaultOnCustomer"];
            this.DefaultOnProjectOverideCustomer = data["DefaultOnProjectOverideCustomer"];
            this.DefaultOnOrderOverideCustomer = data["DefaultOnOrderOverideCustomer"];
            this.DefaultInvoiceCost = data["DefaultInvoiceCost"];
            this.TypeName = data["TypeName"];
            this.IsForInternalUseOnly = data["IsForInternalUseOnly"];
        }
    }

    static fromJS(data: any): TermsOfPaymentWithCredentials {
        let result = new TermsOfPaymentWithCredentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MerchantOrClientId"] = this.MerchantOrClientId;
        data["Username"] = this.Username;
        data["Password"] = this.Password;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["Description"] = this.Description;
        data["ExtendedDescription"] = this.ExtendedDescription;
        data["CostDescription"] = this.CostDescription;
        data["CostExtendedDescription"] = this.CostExtendedDescription;
        data["SellingPrice"] = this.SellingPrice;
        data["Vat"] = this.Vat;
        data["SellingPriceInclVat"] = this.SellingPriceInclVat;
        data["DefaultOnCustomer"] = this.DefaultOnCustomer;
        data["DefaultOnProjectOverideCustomer"] = this.DefaultOnProjectOverideCustomer;
        data["DefaultOnOrderOverideCustomer"] = this.DefaultOnOrderOverideCustomer;
        data["DefaultInvoiceCost"] = this.DefaultInvoiceCost;
        data["TypeName"] = this.TypeName;
        data["IsForInternalUseOnly"] = this.IsForInternalUseOnly;
        return data;
    }
}

export interface ITermsOfPaymentWithCredentials {
    MerchantOrClientId?: string;
    Username?: string;
    Password?: string;
    TermsOfPaymentId?: string;
    Description?: string;
    ExtendedDescription?: string;
    CostDescription?: string;
    CostExtendedDescription?: string;
    SellingPrice?: number;
    Vat?: number;
    SellingPriceInclVat?: number;
    DefaultOnCustomer?: boolean;
    DefaultOnProjectOverideCustomer?: boolean;
    DefaultOnOrderOverideCustomer?: boolean;
    DefaultInvoiceCost?: number;
    TypeName?: string;
    IsForInternalUseOnly?: boolean;
}

export class SystemRole implements ISystemRole {
    SystemRoleId?: number;
    RoleName?: string;

    constructor(data?: ISystemRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SystemRoleId = data["SystemRoleId"];
            this.RoleName = data["RoleName"];
        }
    }

    static fromJS(data: any): SystemRole {
        let result = new SystemRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SystemRoleId"] = this.SystemRoleId;
        data["RoleName"] = this.RoleName;
        return data;
    }
}

export interface ISystemRole {
    SystemRoleId?: number;
    RoleName?: string;
}

export class UpdateUserRolesModel implements IUpdateUserRolesModel {
    SystemRoleName?: string;
    RoleAccess?: string[];

    constructor(data?: IUpdateUserRolesModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SystemRoleName = data["SystemRoleName"];
            if (data["RoleAccess"] && data["RoleAccess"].constructor === Array) {
                this.RoleAccess = [];
                for (let item of data["RoleAccess"])
                    this.RoleAccess.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserRolesModel {
        let result = new UpdateUserRolesModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SystemRoleName"] = this.SystemRoleName;
        if (this.RoleAccess && this.RoleAccess.constructor === Array) {
            data["RoleAccess"] = [];
            for (let item of this.RoleAccess)
                data["RoleAccess"].push(item);
        }
        return data;
    }
}

export interface IUpdateUserRolesModel {
    SystemRoleName?: string;
    RoleAccess?: string[];
}

export class WorkCompensationMultiplier implements IWorkCompensationMultiplier {
    WorkCompensationMultiplierId?: number;
    Name?: string;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SalaryTaxMultiplier?: number;
    IsActive?: boolean;
    CountryId?: string;

    constructor(data?: IWorkCompensationMultiplier) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WorkCompensationMultiplierId = data["WorkCompensationMultiplierId"];
            this.Name = data["Name"];
            this.WorkCompensationMultiplierValue = data["WorkCompensationMultiplierValue"];
            this.VacationPayMultiplier = data["VacationPayMultiplier"];
            this.SalaryTaxMultiplier = data["SalaryTaxMultiplier"];
            this.IsActive = data["IsActive"];
            this.CountryId = data["CountryId"];
        }
    }

    static fromJS(data: any): WorkCompensationMultiplier {
        let result = new WorkCompensationMultiplier();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WorkCompensationMultiplierId"] = this.WorkCompensationMultiplierId;
        data["Name"] = this.Name;
        data["WorkCompensationMultiplierValue"] = this.WorkCompensationMultiplierValue;
        data["VacationPayMultiplier"] = this.VacationPayMultiplier;
        data["SalaryTaxMultiplier"] = this.SalaryTaxMultiplier;
        data["IsActive"] = this.IsActive;
        data["CountryId"] = this.CountryId;
        return data;
    }
}

export interface IWorkCompensationMultiplier {
    WorkCompensationMultiplierId?: number;
    Name?: string;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SalaryTaxMultiplier?: number;
    IsActive?: boolean;
    CountryId?: string;
}

export class DefaultPriceProfile implements IDefaultPriceProfile {
    DefaultPriceProfileId?: number;
    Name?: string;
    ValidFromDate?: Date;
    ValidToDate?: Date;
    CountryId?: string;
    CurrencyId?: string;
    ConnectedId?: string;
    ConnectedName?: string;
    UniquePriceProfileId?: string;
    TimeGroups?: DefaultPriceProfileTimeGroup[];

    constructor(data?: IDefaultPriceProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.DefaultPriceProfileId = data["DefaultPriceProfileId"];
            this.Name = data["Name"];
            this.ValidFromDate = data["ValidFromDate"] ? new Date(data["ValidFromDate"].toString()) : <any>undefined;
            this.ValidToDate = data["ValidToDate"] ? new Date(data["ValidToDate"].toString()) : <any>undefined;
            this.CountryId = data["CountryId"];
            this.CurrencyId = data["CurrencyId"];
            this.ConnectedId = data["ConnectedId"];
            this.ConnectedName = data["ConnectedName"];
            this.UniquePriceProfileId = data["UniquePriceProfileId"];
            if (data["TimeGroups"] && data["TimeGroups"].constructor === Array) {
                this.TimeGroups = [];
                for (let item of data["TimeGroups"])
                    this.TimeGroups.push(DefaultPriceProfileTimeGroup.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DefaultPriceProfile {
        let result = new DefaultPriceProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DefaultPriceProfileId"] = this.DefaultPriceProfileId;
        data["Name"] = this.Name;
        data["ValidFromDate"] = this.ValidFromDate ? this.ValidFromDate.toISOString() : <any>undefined;
        data["ValidToDate"] = this.ValidToDate ? this.ValidToDate.toISOString() : <any>undefined;
        data["CountryId"] = this.CountryId;
        data["CurrencyId"] = this.CurrencyId;
        data["ConnectedId"] = this.ConnectedId;
        data["ConnectedName"] = this.ConnectedName;
        data["UniquePriceProfileId"] = this.UniquePriceProfileId;
        if (this.TimeGroups && this.TimeGroups.constructor === Array) {
            data["TimeGroups"] = [];
            for (let item of this.TimeGroups)
                data["TimeGroups"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDefaultPriceProfile {
    DefaultPriceProfileId?: number;
    Name?: string;
    ValidFromDate?: Date;
    ValidToDate?: Date;
    CountryId?: string;
    CurrencyId?: string;
    ConnectedId?: string;
    ConnectedName?: string;
    UniquePriceProfileId?: string;
    TimeGroups?: DefaultPriceProfileTimeGroup[];
}

export class DefaultPriceProfileTimeGroup implements IDefaultPriceProfileTimeGroup {
    DefaultPriceProfileTimeGroupId?: number;
    DefaultPriceProfileId?: number;
    SortOrder?: number;
    Name?: string;
    SellingPriceIsFactorToStandard?: boolean;
    SellingPriceFactorMultiplier?: number;
    SellingPrice?: number;
    Vat?: number;
    SalaryIsFactorToStandard?: boolean;
    SalaryFactorMultiplier?: number;
    Salary?: number;
    CurrencyId?: string;
    Uom?: string;
    DefaultTimeGroup?: boolean;
    MaxWeekPlanningQtyHours?: number;
    IsStandByTimeGroup?: boolean;
    FromTime?: string;
    ToTime?: string;
    SellingPriceInclVat?: number;
    ArticleNo?: string;
    WageTypeCodeNo?: string;
    SaleAccount?: string;
    CostCenter?: string;
    NoVacationPayCalculation?: boolean;
    NoPensionPayCalculation?: boolean;
    IsAutoCalculatedTimeGroup?: boolean;
    Context?: Context;

    constructor(data?: IDefaultPriceProfileTimeGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.DefaultPriceProfileTimeGroupId = data["DefaultPriceProfileTimeGroupId"];
            this.DefaultPriceProfileId = data["DefaultPriceProfileId"];
            this.SortOrder = data["SortOrder"];
            this.Name = data["Name"];
            this.SellingPriceIsFactorToStandard = data["SellingPriceIsFactorToStandard"];
            this.SellingPriceFactorMultiplier = data["SellingPriceFactorMultiplier"];
            this.SellingPrice = data["SellingPrice"];
            this.Vat = data["Vat"];
            this.SalaryIsFactorToStandard = data["SalaryIsFactorToStandard"];
            this.SalaryFactorMultiplier = data["SalaryFactorMultiplier"];
            this.Salary = data["Salary"];
            this.CurrencyId = data["CurrencyId"];
            this.Uom = data["Uom"];
            this.DefaultTimeGroup = data["DefaultTimeGroup"];
            this.MaxWeekPlanningQtyHours = data["MaxWeekPlanningQtyHours"];
            this.IsStandByTimeGroup = data["IsStandByTimeGroup"];
            this.FromTime = data["FromTime"];
            this.ToTime = data["ToTime"];
            this.SellingPriceInclVat = data["SellingPriceInclVat"];
            this.ArticleNo = data["ArticleNo"];
            this.WageTypeCodeNo = data["WageTypeCodeNo"];
            this.SaleAccount = data["SaleAccount"];
            this.CostCenter = data["CostCenter"];
            this.NoVacationPayCalculation = data["NoVacationPayCalculation"];
            this.NoPensionPayCalculation = data["NoPensionPayCalculation"];
            this.IsAutoCalculatedTimeGroup = data["IsAutoCalculatedTimeGroup"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DefaultPriceProfileTimeGroup {
        let result = new DefaultPriceProfileTimeGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DefaultPriceProfileTimeGroupId"] = this.DefaultPriceProfileTimeGroupId;
        data["DefaultPriceProfileId"] = this.DefaultPriceProfileId;
        data["SortOrder"] = this.SortOrder;
        data["Name"] = this.Name;
        data["SellingPriceIsFactorToStandard"] = this.SellingPriceIsFactorToStandard;
        data["SellingPriceFactorMultiplier"] = this.SellingPriceFactorMultiplier;
        data["SellingPrice"] = this.SellingPrice;
        data["Vat"] = this.Vat;
        data["SalaryIsFactorToStandard"] = this.SalaryIsFactorToStandard;
        data["SalaryFactorMultiplier"] = this.SalaryFactorMultiplier;
        data["Salary"] = this.Salary;
        data["CurrencyId"] = this.CurrencyId;
        data["Uom"] = this.Uom;
        data["DefaultTimeGroup"] = this.DefaultTimeGroup;
        data["MaxWeekPlanningQtyHours"] = this.MaxWeekPlanningQtyHours;
        data["IsStandByTimeGroup"] = this.IsStandByTimeGroup;
        data["FromTime"] = this.FromTime;
        data["ToTime"] = this.ToTime;
        data["SellingPriceInclVat"] = this.SellingPriceInclVat;
        data["ArticleNo"] = this.ArticleNo;
        data["WageTypeCodeNo"] = this.WageTypeCodeNo;
        data["SaleAccount"] = this.SaleAccount;
        data["CostCenter"] = this.CostCenter;
        data["NoVacationPayCalculation"] = this.NoVacationPayCalculation;
        data["NoPensionPayCalculation"] = this.NoPensionPayCalculation;
        data["IsAutoCalculatedTimeGroup"] = this.IsAutoCalculatedTimeGroup;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDefaultPriceProfileTimeGroup {
    DefaultPriceProfileTimeGroupId?: number;
    DefaultPriceProfileId?: number;
    SortOrder?: number;
    Name?: string;
    SellingPriceIsFactorToStandard?: boolean;
    SellingPriceFactorMultiplier?: number;
    SellingPrice?: number;
    Vat?: number;
    SalaryIsFactorToStandard?: boolean;
    SalaryFactorMultiplier?: number;
    Salary?: number;
    CurrencyId?: string;
    Uom?: string;
    DefaultTimeGroup?: boolean;
    MaxWeekPlanningQtyHours?: number;
    IsStandByTimeGroup?: boolean;
    FromTime?: string;
    ToTime?: string;
    SellingPriceInclVat?: number;
    ArticleNo?: string;
    WageTypeCodeNo?: string;
    SaleAccount?: string;
    CostCenter?: string;
    NoVacationPayCalculation?: boolean;
    NoPensionPayCalculation?: boolean;
    IsAutoCalculatedTimeGroup?: boolean;
    Context?: Context;
}

export class AccountConfig implements IAccountConfig {
    id?: string;
    EmailTemplateViewEngineId?: string;
    AddressLookupCustomer?: boolean;
    AddressLookupConsultant?: boolean;
    AddressLookupContact?: boolean;
    ShowCustomerBranchOffice?: boolean;
    CustomerBranchOfficeName?: string;
    ShowCustomerDepartment?: boolean;
    CustomerDepartmentName?: string;
    StandByShiftName?: string;
    ForWorkWeekUseCostCenterOnInvoice?: boolean;
    ForWorkWeekCostCenterSetting?: string;
    ForWorkWeekCostCenterSettingOptions?: KeyValuePairOfStringAndString[];
    ForWorkWeekUseProjectOnInvoice?: boolean;
    ForWorkWeekUseYearAndWeekAsProjectNoOnInvoice?: boolean;
    CustomPhoneNumber?: string;
    NewCustomerAlwaysBusiness?: boolean;
    UseConsultantAvailabilityInDays?: boolean;
    CopySubscriptionProductDescriptionsToDelivey?: boolean;
    WorkHourDebitAccountNumber?: string;
    LivingDebitAccountNumber?: string;
    TravelDebitAccountNumber?: string;
    MiscDebitAccountNumber?: string;
    AttestWorkShiftTimeReportsManually?: boolean;
    VatOptions?: VatOption[];

    constructor(data?: IAccountConfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.EmailTemplateViewEngineId = data["EmailTemplateViewEngineId"];
            this.AddressLookupCustomer = data["AddressLookupCustomer"];
            this.AddressLookupConsultant = data["AddressLookupConsultant"];
            this.AddressLookupContact = data["AddressLookupContact"];
            this.ShowCustomerBranchOffice = data["ShowCustomerBranchOffice"];
            this.CustomerBranchOfficeName = data["CustomerBranchOfficeName"];
            this.ShowCustomerDepartment = data["ShowCustomerDepartment"];
            this.CustomerDepartmentName = data["CustomerDepartmentName"];
            this.StandByShiftName = data["StandByShiftName"];
            this.ForWorkWeekUseCostCenterOnInvoice = data["ForWorkWeekUseCostCenterOnInvoice"];
            this.ForWorkWeekCostCenterSetting = data["ForWorkWeekCostCenterSetting"];
            if (data["ForWorkWeekCostCenterSettingOptions"] && data["ForWorkWeekCostCenterSettingOptions"].constructor === Array) {
                this.ForWorkWeekCostCenterSettingOptions = [];
                for (let item of data["ForWorkWeekCostCenterSettingOptions"])
                    this.ForWorkWeekCostCenterSettingOptions.push(KeyValuePairOfStringAndString.fromJS(item));
            }
            this.ForWorkWeekUseProjectOnInvoice = data["ForWorkWeekUseProjectOnInvoice"];
            this.ForWorkWeekUseYearAndWeekAsProjectNoOnInvoice = data["ForWorkWeekUseYearAndWeekAsProjectNoOnInvoice"];
            this.CustomPhoneNumber = data["CustomPhoneNumber"];
            this.NewCustomerAlwaysBusiness = data["NewCustomerAlwaysBusiness"];
            this.UseConsultantAvailabilityInDays = data["UseConsultantAvailabilityInDays"];
            this.CopySubscriptionProductDescriptionsToDelivey = data["CopySubscriptionProductDescriptionsToDelivey"];
            this.WorkHourDebitAccountNumber = data["WorkHourDebitAccountNumber"];
            this.LivingDebitAccountNumber = data["LivingDebitAccountNumber"];
            this.TravelDebitAccountNumber = data["TravelDebitAccountNumber"];
            this.MiscDebitAccountNumber = data["MiscDebitAccountNumber"];
            this.AttestWorkShiftTimeReportsManually = data["AttestWorkShiftTimeReportsManually"];
            if (data["VatOptions"] && data["VatOptions"].constructor === Array) {
                this.VatOptions = [];
                for (let item of data["VatOptions"])
                    this.VatOptions.push(VatOption.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AccountConfig {
        let result = new AccountConfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["EmailTemplateViewEngineId"] = this.EmailTemplateViewEngineId;
        data["AddressLookupCustomer"] = this.AddressLookupCustomer;
        data["AddressLookupConsultant"] = this.AddressLookupConsultant;
        data["AddressLookupContact"] = this.AddressLookupContact;
        data["ShowCustomerBranchOffice"] = this.ShowCustomerBranchOffice;
        data["CustomerBranchOfficeName"] = this.CustomerBranchOfficeName;
        data["ShowCustomerDepartment"] = this.ShowCustomerDepartment;
        data["CustomerDepartmentName"] = this.CustomerDepartmentName;
        data["StandByShiftName"] = this.StandByShiftName;
        data["ForWorkWeekUseCostCenterOnInvoice"] = this.ForWorkWeekUseCostCenterOnInvoice;
        data["ForWorkWeekCostCenterSetting"] = this.ForWorkWeekCostCenterSetting;
        if (this.ForWorkWeekCostCenterSettingOptions && this.ForWorkWeekCostCenterSettingOptions.constructor === Array) {
            data["ForWorkWeekCostCenterSettingOptions"] = [];
            for (let item of this.ForWorkWeekCostCenterSettingOptions)
                data["ForWorkWeekCostCenterSettingOptions"].push(item.toJSON());
        }
        data["ForWorkWeekUseProjectOnInvoice"] = this.ForWorkWeekUseProjectOnInvoice;
        data["ForWorkWeekUseYearAndWeekAsProjectNoOnInvoice"] = this.ForWorkWeekUseYearAndWeekAsProjectNoOnInvoice;
        data["CustomPhoneNumber"] = this.CustomPhoneNumber;
        data["NewCustomerAlwaysBusiness"] = this.NewCustomerAlwaysBusiness;
        data["UseConsultantAvailabilityInDays"] = this.UseConsultantAvailabilityInDays;
        data["CopySubscriptionProductDescriptionsToDelivey"] = this.CopySubscriptionProductDescriptionsToDelivey;
        data["WorkHourDebitAccountNumber"] = this.WorkHourDebitAccountNumber;
        data["LivingDebitAccountNumber"] = this.LivingDebitAccountNumber;
        data["TravelDebitAccountNumber"] = this.TravelDebitAccountNumber;
        data["MiscDebitAccountNumber"] = this.MiscDebitAccountNumber;
        data["AttestWorkShiftTimeReportsManually"] = this.AttestWorkShiftTimeReportsManually;
        if (this.VatOptions && this.VatOptions.constructor === Array) {
            data["VatOptions"] = [];
            for (let item of this.VatOptions)
                data["VatOptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAccountConfig {
    id?: string;
    EmailTemplateViewEngineId?: string;
    AddressLookupCustomer?: boolean;
    AddressLookupConsultant?: boolean;
    AddressLookupContact?: boolean;
    ShowCustomerBranchOffice?: boolean;
    CustomerBranchOfficeName?: string;
    ShowCustomerDepartment?: boolean;
    CustomerDepartmentName?: string;
    StandByShiftName?: string;
    ForWorkWeekUseCostCenterOnInvoice?: boolean;
    ForWorkWeekCostCenterSetting?: string;
    ForWorkWeekCostCenterSettingOptions?: KeyValuePairOfStringAndString[];
    ForWorkWeekUseProjectOnInvoice?: boolean;
    ForWorkWeekUseYearAndWeekAsProjectNoOnInvoice?: boolean;
    CustomPhoneNumber?: string;
    NewCustomerAlwaysBusiness?: boolean;
    UseConsultantAvailabilityInDays?: boolean;
    CopySubscriptionProductDescriptionsToDelivey?: boolean;
    WorkHourDebitAccountNumber?: string;
    LivingDebitAccountNumber?: string;
    TravelDebitAccountNumber?: string;
    MiscDebitAccountNumber?: string;
    AttestWorkShiftTimeReportsManually?: boolean;
    VatOptions?: VatOption[];
}

export class KeyValuePairOfStringAndString implements IKeyValuePairOfStringAndString {
    Key?: string;
    Value?: string;

    constructor(data?: IKeyValuePairOfStringAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Key = data["Key"];
            this.Value = data["Value"];
        }
    }

    static fromJS(data: any): KeyValuePairOfStringAndString {
        let result = new KeyValuePairOfStringAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Key"] = this.Key;
        data["Value"] = this.Value;
        return data;
    }
}

export interface IKeyValuePairOfStringAndString {
    Key?: string;
    Value?: string;
}

export class VatOption implements IVatOption {
    Vat?: number;
    Description?: string;

    constructor(data?: IVatOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Vat = data["Vat"];
            this.Description = data["Description"];
        }
    }

    static fromJS(data: any): VatOption {
        let result = new VatOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Vat"] = this.Vat;
        data["Description"] = this.Description;
        return data;
    }
}

export interface IVatOption {
    Vat?: number;
    Description?: string;
}

export class PersonalConfig implements IPersonalConfig {
    id?: string;
    FirstDayOfWeekNo?: number;
    TimeZoneId?: string;
    CountryId?: string;
    CurrencyId?: string;
    LanguageId?: string;
    CultureId?: string;
    PersonId?: number;

    constructor(data?: IPersonalConfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.FirstDayOfWeekNo = data["FirstDayOfWeekNo"];
            this.TimeZoneId = data["TimeZoneId"];
            this.CountryId = data["CountryId"];
            this.CurrencyId = data["CurrencyId"];
            this.LanguageId = data["LanguageId"];
            this.CultureId = data["CultureId"];
            this.PersonId = data["PersonId"];
        }
    }

    static fromJS(data: any): PersonalConfig {
        let result = new PersonalConfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["FirstDayOfWeekNo"] = this.FirstDayOfWeekNo;
        data["TimeZoneId"] = this.TimeZoneId;
        data["CountryId"] = this.CountryId;
        data["CurrencyId"] = this.CurrencyId;
        data["LanguageId"] = this.LanguageId;
        data["CultureId"] = this.CultureId;
        data["PersonId"] = this.PersonId;
        return data;
    }
}

export interface IPersonalConfig {
    id?: string;
    FirstDayOfWeekNo?: number;
    TimeZoneId?: string;
    CountryId?: string;
    CurrencyId?: string;
    LanguageId?: string;
    CultureId?: string;
    PersonId?: number;
}

export class ConfigOptions implements IConfigOptions {
    TimeZoneOptions?: any[];
    FirstDayOfWeekOptions?: any[];
    CountryOptions?: any[];
    CurrencyOptions?: any[];
    LanguageOptions?: any[];
    DefaultEmailTemplateViewEngineOptions?: any[];
    LiquidViewModelDescriptions?: LiquidViewModelDescription[];

    constructor(data?: IConfigOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["TimeZoneOptions"] && data["TimeZoneOptions"].constructor === Array) {
                this.TimeZoneOptions = [];
                for (let item of data["TimeZoneOptions"])
                    this.TimeZoneOptions.push(item);
            }
            if (data["FirstDayOfWeekOptions"] && data["FirstDayOfWeekOptions"].constructor === Array) {
                this.FirstDayOfWeekOptions = [];
                for (let item of data["FirstDayOfWeekOptions"])
                    this.FirstDayOfWeekOptions.push(item);
            }
            if (data["CountryOptions"] && data["CountryOptions"].constructor === Array) {
                this.CountryOptions = [];
                for (let item of data["CountryOptions"])
                    this.CountryOptions.push(item);
            }
            if (data["CurrencyOptions"] && data["CurrencyOptions"].constructor === Array) {
                this.CurrencyOptions = [];
                for (let item of data["CurrencyOptions"])
                    this.CurrencyOptions.push(item);
            }
            if (data["LanguageOptions"] && data["LanguageOptions"].constructor === Array) {
                this.LanguageOptions = [];
                for (let item of data["LanguageOptions"])
                    this.LanguageOptions.push(item);
            }
            if (data["DefaultEmailTemplateViewEngineOptions"] && data["DefaultEmailTemplateViewEngineOptions"].constructor === Array) {
                this.DefaultEmailTemplateViewEngineOptions = [];
                for (let item of data["DefaultEmailTemplateViewEngineOptions"])
                    this.DefaultEmailTemplateViewEngineOptions.push(item);
            }
            if (data["LiquidViewModelDescriptions"] && data["LiquidViewModelDescriptions"].constructor === Array) {
                this.LiquidViewModelDescriptions = [];
                for (let item of data["LiquidViewModelDescriptions"])
                    this.LiquidViewModelDescriptions.push(LiquidViewModelDescription.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConfigOptions {
        let result = new ConfigOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.TimeZoneOptions && this.TimeZoneOptions.constructor === Array) {
            data["TimeZoneOptions"] = [];
            for (let item of this.TimeZoneOptions)
                data["TimeZoneOptions"].push(item);
        }
        if (this.FirstDayOfWeekOptions && this.FirstDayOfWeekOptions.constructor === Array) {
            data["FirstDayOfWeekOptions"] = [];
            for (let item of this.FirstDayOfWeekOptions)
                data["FirstDayOfWeekOptions"].push(item);
        }
        if (this.CountryOptions && this.CountryOptions.constructor === Array) {
            data["CountryOptions"] = [];
            for (let item of this.CountryOptions)
                data["CountryOptions"].push(item);
        }
        if (this.CurrencyOptions && this.CurrencyOptions.constructor === Array) {
            data["CurrencyOptions"] = [];
            for (let item of this.CurrencyOptions)
                data["CurrencyOptions"].push(item);
        }
        if (this.LanguageOptions && this.LanguageOptions.constructor === Array) {
            data["LanguageOptions"] = [];
            for (let item of this.LanguageOptions)
                data["LanguageOptions"].push(item);
        }
        if (this.DefaultEmailTemplateViewEngineOptions && this.DefaultEmailTemplateViewEngineOptions.constructor === Array) {
            data["DefaultEmailTemplateViewEngineOptions"] = [];
            for (let item of this.DefaultEmailTemplateViewEngineOptions)
                data["DefaultEmailTemplateViewEngineOptions"].push(item);
        }
        if (this.LiquidViewModelDescriptions && this.LiquidViewModelDescriptions.constructor === Array) {
            data["LiquidViewModelDescriptions"] = [];
            for (let item of this.LiquidViewModelDescriptions)
                data["LiquidViewModelDescriptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IConfigOptions {
    TimeZoneOptions?: any[];
    FirstDayOfWeekOptions?: any[];
    CountryOptions?: any[];
    CurrencyOptions?: any[];
    LanguageOptions?: any[];
    DefaultEmailTemplateViewEngineOptions?: any[];
    LiquidViewModelDescriptions?: LiquidViewModelDescription[];
}

export class LiquidViewModelDescription implements ILiquidViewModelDescription {
    Name?: string;
    UniqueModuleName?: string;
    ModelProperties?: string[];

    constructor(data?: ILiquidViewModelDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Name = data["Name"];
            this.UniqueModuleName = data["UniqueModuleName"];
            if (data["ModelProperties"] && data["ModelProperties"].constructor === Array) {
                this.ModelProperties = [];
                for (let item of data["ModelProperties"])
                    this.ModelProperties.push(item);
            }
        }
    }

    static fromJS(data: any): LiquidViewModelDescription {
        let result = new LiquidViewModelDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.Name;
        data["UniqueModuleName"] = this.UniqueModuleName;
        if (this.ModelProperties && this.ModelProperties.constructor === Array) {
            data["ModelProperties"] = [];
            for (let item of this.ModelProperties)
                data["ModelProperties"].push(item);
        }
        return data;
    }
}

export interface ILiquidViewModelDescription {
    Name?: string;
    UniqueModuleName?: string;
    ModelProperties?: string[];
}

export class EventSubscriberDescriptions implements IEventSubscriberDescriptions {
    EventName?: string;
    Name?: string;
    Description?: string;
    Subscribers?: EventSubscriberDescription[];

    constructor(data?: IEventSubscriberDescriptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.EventName = data["EventName"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            if (data["Subscribers"] && data["Subscribers"].constructor === Array) {
                this.Subscribers = [];
                for (let item of data["Subscribers"])
                    this.Subscribers.push(EventSubscriberDescription.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EventSubscriberDescriptions {
        let result = new EventSubscriberDescriptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EventName"] = this.EventName;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        if (this.Subscribers && this.Subscribers.constructor === Array) {
            data["Subscribers"] = [];
            for (let item of this.Subscribers)
                data["Subscribers"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventSubscriberDescriptions {
    EventName?: string;
    Name?: string;
    Description?: string;
    Subscribers?: EventSubscriberDescription[];
}

export class EventSubscriberDescription implements IEventSubscriberDescription {
    id?: string;
    Name?: string;
    Description?: string;
    Run?: boolean;
    RunIsOptional?: boolean;
    LastAccessDate?: DateEpoch;
    ForEventName?: string;

    constructor(data?: IEventSubscriberDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            this.Description = data["Description"];
            this.Run = data["Run"];
            this.RunIsOptional = data["RunIsOptional"];
            this.LastAccessDate = data["LastAccessDate"] ? DateEpoch.fromJS(data["LastAccessDate"]) : <any>undefined;
            this.ForEventName = data["ForEventName"];
        }
    }

    static fromJS(data: any): EventSubscriberDescription {
        let result = new EventSubscriberDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        data["Description"] = this.Description;
        data["Run"] = this.Run;
        data["RunIsOptional"] = this.RunIsOptional;
        data["LastAccessDate"] = this.LastAccessDate ? this.LastAccessDate.toJSON() : <any>undefined;
        data["ForEventName"] = this.ForEventName;
        return data;
    }
}

export interface IEventSubscriberDescription {
    id?: string;
    Name?: string;
    Description?: string;
    Run?: boolean;
    RunIsOptional?: boolean;
    LastAccessDate?: DateEpoch;
    ForEventName?: string;
}

export class Signature implements ISignature {
    id?: string;
    PersonId?: string;
    SignatureText?: string;

    constructor(data?: ISignature) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.PersonId = data["PersonId"];
            this.SignatureText = data["SignatureText"];
        }
    }

    static fromJS(data: any): Signature {
        let result = new Signature();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["PersonId"] = this.PersonId;
        data["SignatureText"] = this.SignatureText;
        return data;
    }
}

export interface ISignature {
    id?: string;
    PersonId?: string;
    SignatureText?: string;
}

export class SubscriptionOptimizedDescription implements ISubscriptionOptimizedDescription {
    SubscriptionId?: number;
    StartDate?: Date;
    EndDate?: Date;
    Confirmed?: boolean;
    LastAddedOrderDeliveryDate?: Date;
    BuyOrderId?: string;
    PersonId?: number;
    Name?: string;
    ShippingName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    FullShippingAddress?: string;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    ProductSubscriptionOptionId?: number;
    ProductSubscriptionOptionName?: string;
    SubscriptionSerieId?: string;

    constructor(data?: ISubscriptionOptimizedDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SubscriptionId = data["SubscriptionId"];
            this.StartDate = data["StartDate"] ? new Date(data["StartDate"].toString()) : <any>undefined;
            this.EndDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.Confirmed = data["Confirmed"];
            this.LastAddedOrderDeliveryDate = data["LastAddedOrderDeliveryDate"] ? new Date(data["LastAddedOrderDeliveryDate"].toString()) : <any>undefined;
            this.BuyOrderId = data["BuyOrderId"];
            this.PersonId = data["PersonId"];
            this.Name = data["Name"];
            this.ShippingName = data["ShippingName"];
            this.ShippingStreetName = data["ShippingStreetName"];
            this.ShippingPostNo = data["ShippingPostNo"];
            this.ShippingCity = data["ShippingCity"];
            this.ShippingCountry = data["ShippingCountry"];
            this.FullShippingAddress = data["FullShippingAddress"];
            this.ShippingTag = data["ShippingTag"];
            this.OrderForShippingTag = data["OrderForShippingTag"];
            this.ProductSubscriptionOptionId = data["ProductSubscriptionOptionId"];
            this.ProductSubscriptionOptionName = data["ProductSubscriptionOptionName"];
            this.SubscriptionSerieId = data["SubscriptionSerieId"];
        }
    }

    static fromJS(data: any): SubscriptionOptimizedDescription {
        let result = new SubscriptionOptimizedDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SubscriptionId"] = this.SubscriptionId;
        data["StartDate"] = this.StartDate ? this.StartDate.toISOString() : <any>undefined;
        data["EndDate"] = this.EndDate ? this.EndDate.toISOString() : <any>undefined;
        data["Confirmed"] = this.Confirmed;
        data["LastAddedOrderDeliveryDate"] = this.LastAddedOrderDeliveryDate ? this.LastAddedOrderDeliveryDate.toISOString() : <any>undefined;
        data["BuyOrderId"] = this.BuyOrderId;
        data["PersonId"] = this.PersonId;
        data["Name"] = this.Name;
        data["ShippingName"] = this.ShippingName;
        data["ShippingStreetName"] = this.ShippingStreetName;
        data["ShippingPostNo"] = this.ShippingPostNo;
        data["ShippingCity"] = this.ShippingCity;
        data["ShippingCountry"] = this.ShippingCountry;
        data["FullShippingAddress"] = this.FullShippingAddress;
        data["ShippingTag"] = this.ShippingTag;
        data["OrderForShippingTag"] = this.OrderForShippingTag;
        data["ProductSubscriptionOptionId"] = this.ProductSubscriptionOptionId;
        data["ProductSubscriptionOptionName"] = this.ProductSubscriptionOptionName;
        data["SubscriptionSerieId"] = this.SubscriptionSerieId;
        return data;
    }
}

export interface ISubscriptionOptimizedDescription {
    SubscriptionId?: number;
    StartDate?: Date;
    EndDate?: Date;
    Confirmed?: boolean;
    LastAddedOrderDeliveryDate?: Date;
    BuyOrderId?: string;
    PersonId?: number;
    Name?: string;
    ShippingName?: string;
    ShippingStreetName?: string;
    ShippingPostNo?: string;
    ShippingCity?: string;
    ShippingCountry?: string;
    FullShippingAddress?: string;
    ShippingTag?: string;
    OrderForShippingTag?: number;
    ProductSubscriptionOptionId?: number;
    ProductSubscriptionOptionName?: string;
    SubscriptionSerieId?: string;
}

export class CreateOrEditDetails implements ICreateOrEditDetails {
    Name?: string;
    Date?: Date;

    constructor(data?: ICreateOrEditDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Name = data["Name"];
            this.Date = data["Date"] ? new Date(data["Date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditDetails {
        let result = new CreateOrEditDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.Name;
        data["Date"] = this.Date ? this.Date.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateOrEditDetails {
    Name?: string;
    Date?: Date;
}

export class ProductSubscriptionOptionDetails implements IProductSubscriptionOptionDetails {
    Products?: Product[];
    ProductSubscriptionOptionId?: number;
    Name?: string;
    EveryNrOfDays?: number;
    DayOfWeek?: ProductSubscriptionOptionDetailsDayOfWeek;
    CronExpression?: string;
    DelayBeforeStartAtLeastQtyDays?: number;
    IsActive?: boolean;
    DoCountPossibleChangeDateFromSpecifiedReferenceDate?: boolean;
    CountPossibleChangeDateFromReferenceDate?: Date;
    SuggestedChangeDates?: Date[];
    FirstpossibleSubscriptionChangeDate?: Date;

    constructor(data?: IProductSubscriptionOptionDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Products"] && data["Products"].constructor === Array) {
                this.Products = [];
                for (let item of data["Products"])
                    this.Products.push(Product.fromJS(item));
            }
            this.ProductSubscriptionOptionId = data["ProductSubscriptionOptionId"];
            this.Name = data["Name"];
            this.EveryNrOfDays = data["EveryNrOfDays"];
            this.DayOfWeek = data["DayOfWeek"];
            this.CronExpression = data["CronExpression"];
            this.DelayBeforeStartAtLeastQtyDays = data["DelayBeforeStartAtLeastQtyDays"];
            this.IsActive = data["IsActive"];
            this.DoCountPossibleChangeDateFromSpecifiedReferenceDate = data["DoCountPossibleChangeDateFromSpecifiedReferenceDate"];
            this.CountPossibleChangeDateFromReferenceDate = data["CountPossibleChangeDateFromReferenceDate"] ? new Date(data["CountPossibleChangeDateFromReferenceDate"].toString()) : <any>undefined;
            if (data["SuggestedChangeDates"] && data["SuggestedChangeDates"].constructor === Array) {
                this.SuggestedChangeDates = [];
                for (let item of data["SuggestedChangeDates"])
                    this.SuggestedChangeDates.push(new Date(item));
            }
            this.FirstpossibleSubscriptionChangeDate = data["FirstpossibleSubscriptionChangeDate"] ? new Date(data["FirstpossibleSubscriptionChangeDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductSubscriptionOptionDetails {
        let result = new ProductSubscriptionOptionDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Products && this.Products.constructor === Array) {
            data["Products"] = [];
            for (let item of this.Products)
                data["Products"].push(item.toJSON());
        }
        data["ProductSubscriptionOptionId"] = this.ProductSubscriptionOptionId;
        data["Name"] = this.Name;
        data["EveryNrOfDays"] = this.EveryNrOfDays;
        data["DayOfWeek"] = this.DayOfWeek;
        data["CronExpression"] = this.CronExpression;
        data["DelayBeforeStartAtLeastQtyDays"] = this.DelayBeforeStartAtLeastQtyDays;
        data["IsActive"] = this.IsActive;
        data["DoCountPossibleChangeDateFromSpecifiedReferenceDate"] = this.DoCountPossibleChangeDateFromSpecifiedReferenceDate;
        data["CountPossibleChangeDateFromReferenceDate"] = this.CountPossibleChangeDateFromReferenceDate ? this.CountPossibleChangeDateFromReferenceDate.toISOString() : <any>undefined;
        if (this.SuggestedChangeDates && this.SuggestedChangeDates.constructor === Array) {
            data["SuggestedChangeDates"] = [];
            for (let item of this.SuggestedChangeDates)
                data["SuggestedChangeDates"].push(item.toISOString());
        }
        data["FirstpossibleSubscriptionChangeDate"] = this.FirstpossibleSubscriptionChangeDate ? this.FirstpossibleSubscriptionChangeDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IProductSubscriptionOptionDetails {
    Products?: Product[];
    ProductSubscriptionOptionId?: number;
    Name?: string;
    EveryNrOfDays?: number;
    DayOfWeek?: ProductSubscriptionOptionDetailsDayOfWeek;
    CronExpression?: string;
    DelayBeforeStartAtLeastQtyDays?: number;
    IsActive?: boolean;
    DoCountPossibleChangeDateFromSpecifiedReferenceDate?: boolean;
    CountPossibleChangeDateFromReferenceDate?: Date;
    SuggestedChangeDates?: Date[];
    FirstpossibleSubscriptionChangeDate?: Date;
}

export class Team implements ITeam {
    id?: string;
    Name?: string;

    constructor(data?: ITeam) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): Team {
        let result = new Team();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        return data;
    }
}

export interface ITeam {
    id?: string;
    Name?: string;
}

export class TeamMemberMapping implements ITeamMemberMapping {
    id?: string;
    TeamId?: string;
    PersonId?: string;

    constructor(data?: ITeamMemberMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.TeamId = data["TeamId"];
            this.PersonId = data["PersonId"];
        }
    }

    static fromJS(data: any): TeamMemberMapping {
        let result = new TeamMemberMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["TeamId"] = this.TeamId;
        data["PersonId"] = this.PersonId;
        return data;
    }
}

export interface ITeamMemberMapping {
    id?: string;
    TeamId?: string;
    PersonId?: string;
}

export class TemplateListItem implements ITemplateListItem {
    TemplateId?: number;
    Name?: string;
    TemplateTypeName?: string;
    EmailTemplateViewEngineId?: string;
    ViewModelName?: string;
    SendWhenCreate?: boolean;
    SendWhenEdit?: boolean;
    SendWhenDelete?: boolean;

    constructor(data?: ITemplateListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.TemplateId = data["TemplateId"];
            this.Name = data["Name"];
            this.TemplateTypeName = data["TemplateTypeName"];
            this.EmailTemplateViewEngineId = data["EmailTemplateViewEngineId"];
            this.ViewModelName = data["ViewModelName"];
            this.SendWhenCreate = data["SendWhenCreate"];
            this.SendWhenEdit = data["SendWhenEdit"];
            this.SendWhenDelete = data["SendWhenDelete"];
        }
    }

    static fromJS(data: any): TemplateListItem {
        let result = new TemplateListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TemplateId"] = this.TemplateId;
        data["Name"] = this.Name;
        data["TemplateTypeName"] = this.TemplateTypeName;
        data["EmailTemplateViewEngineId"] = this.EmailTemplateViewEngineId;
        data["ViewModelName"] = this.ViewModelName;
        data["SendWhenCreate"] = this.SendWhenCreate;
        data["SendWhenEdit"] = this.SendWhenEdit;
        data["SendWhenDelete"] = this.SendWhenDelete;
        return data;
    }
}

export interface ITemplateListItem {
    TemplateId?: number;
    Name?: string;
    TemplateTypeName?: string;
    EmailTemplateViewEngineId?: string;
    ViewModelName?: string;
    SendWhenCreate?: boolean;
    SendWhenEdit?: boolean;
    SendWhenDelete?: boolean;
}

export class Template implements ITemplate {
    Description?: string;
    ObjectTypeId?: number;
    ObjectType?: ObjectType;
    TemplateId?: number;
    Name?: string;
    TemplateTypeName?: string;
    EmailTemplateViewEngineId?: string;
    ViewModelName?: string;
    SendWhenCreate?: boolean;
    SendWhenEdit?: boolean;
    SendWhenDelete?: boolean;

    constructor(data?: ITemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Description = data["Description"];
            this.ObjectTypeId = data["ObjectTypeId"];
            this.ObjectType = data["ObjectType"] ? ObjectType.fromJS(data["ObjectType"]) : <any>undefined;
            this.TemplateId = data["TemplateId"];
            this.Name = data["Name"];
            this.TemplateTypeName = data["TemplateTypeName"];
            this.EmailTemplateViewEngineId = data["EmailTemplateViewEngineId"];
            this.ViewModelName = data["ViewModelName"];
            this.SendWhenCreate = data["SendWhenCreate"];
            this.SendWhenEdit = data["SendWhenEdit"];
            this.SendWhenDelete = data["SendWhenDelete"];
        }
    }

    static fromJS(data: any): Template {
        let result = new Template();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.Description;
        data["ObjectTypeId"] = this.ObjectTypeId;
        data["ObjectType"] = this.ObjectType ? this.ObjectType.toJSON() : <any>undefined;
        data["TemplateId"] = this.TemplateId;
        data["Name"] = this.Name;
        data["TemplateTypeName"] = this.TemplateTypeName;
        data["EmailTemplateViewEngineId"] = this.EmailTemplateViewEngineId;
        data["ViewModelName"] = this.ViewModelName;
        data["SendWhenCreate"] = this.SendWhenCreate;
        data["SendWhenEdit"] = this.SendWhenEdit;
        data["SendWhenDelete"] = this.SendWhenDelete;
        return data;
    }
}

export interface ITemplate {
    Description?: string;
    ObjectTypeId?: number;
    ObjectType?: ObjectType;
    TemplateId?: number;
    Name?: string;
    TemplateTypeName?: string;
    EmailTemplateViewEngineId?: string;
    ViewModelName?: string;
    SendWhenCreate?: boolean;
    SendWhenEdit?: boolean;
    SendWhenDelete?: boolean;
}

export class ObjectType implements IObjectType {
    ObjectTypeId?: number;
    ObjectTypeName?: string;

    constructor(data?: IObjectType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ObjectTypeId = data["ObjectTypeId"];
            this.ObjectTypeName = data["ObjectTypeName"];
        }
    }

    static fromJS(data: any): ObjectType {
        let result = new ObjectType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ObjectTypeId"] = this.ObjectTypeId;
        data["ObjectTypeName"] = this.ObjectTypeName;
        return data;
    }
}

export interface IObjectType {
    ObjectTypeId?: number;
    ObjectTypeName?: string;
}

export class ParseTemplateWorkItemsModel implements IParseTemplateWorkItemsModel {
    WorkItemIds?: number[];
    TemplateId?: number;

    constructor(data?: IParseTemplateWorkItemsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["WorkItemIds"] && data["WorkItemIds"].constructor === Array) {
                this.WorkItemIds = [];
                for (let item of data["WorkItemIds"])
                    this.WorkItemIds.push(item);
            }
            this.TemplateId = data["TemplateId"];
        }
    }

    static fromJS(data: any): ParseTemplateWorkItemsModel {
        let result = new ParseTemplateWorkItemsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.WorkItemIds && this.WorkItemIds.constructor === Array) {
            data["WorkItemIds"] = [];
            for (let item of this.WorkItemIds)
                data["WorkItemIds"].push(item);
        }
        data["TemplateId"] = this.TemplateId;
        return data;
    }
}

export interface IParseTemplateWorkItemsModel {
    WorkItemIds?: number[];
    TemplateId?: number;
}

export class ParseTemplateWorkItemModel implements IParseTemplateWorkItemModel {
    WorkItemId?: number;
    TemplateId?: number;

    constructor(data?: IParseTemplateWorkItemModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WorkItemId = data["WorkItemId"];
            this.TemplateId = data["TemplateId"];
        }
    }

    static fromJS(data: any): ParseTemplateWorkItemModel {
        let result = new ParseTemplateWorkItemModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WorkItemId"] = this.WorkItemId;
        data["TemplateId"] = this.TemplateId;
        return data;
    }
}

export interface IParseTemplateWorkItemModel {
    WorkItemId?: number;
    TemplateId?: number;
}

export class ParseTemplateWorkAdModel implements IParseTemplateWorkAdModel {
    WorkAdId?: string;
    TemplateId?: number;

    constructor(data?: IParseTemplateWorkAdModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WorkAdId = data["WorkAdId"];
            this.TemplateId = data["TemplateId"];
        }
    }

    static fromJS(data: any): ParseTemplateWorkAdModel {
        let result = new ParseTemplateWorkAdModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WorkAdId"] = this.WorkAdId;
        data["TemplateId"] = this.TemplateId;
        return data;
    }
}

export interface IParseTemplateWorkAdModel {
    WorkAdId?: string;
    TemplateId?: number;
}

export class ParseTemplateResult implements IParseTemplateResult {
    TemplateContent?: string;
    TemplateContentParsedResult?: string;
    ViewModelName?: string;
    ViewModelId?: string;
    TemplateId?: number;

    constructor(data?: IParseTemplateResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.TemplateContent = data["TemplateContent"];
            this.TemplateContentParsedResult = data["TemplateContentParsedResult"];
            this.ViewModelName = data["ViewModelName"];
            this.ViewModelId = data["ViewModelId"];
            this.TemplateId = data["TemplateId"];
        }
    }

    static fromJS(data: any): ParseTemplateResult {
        let result = new ParseTemplateResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TemplateContent"] = this.TemplateContent;
        data["TemplateContentParsedResult"] = this.TemplateContentParsedResult;
        data["ViewModelName"] = this.ViewModelName;
        data["ViewModelId"] = this.ViewModelId;
        data["TemplateId"] = this.TemplateId;
        return data;
    }
}

export interface IParseTemplateResult {
    TemplateContent?: string;
    TemplateContentParsedResult?: string;
    ViewModelName?: string;
    ViewModelId?: string;
    TemplateId?: number;
}

export class ParseTemplateDynamicModel implements IParseTemplateDynamicModel {
    template?: string;
    model?: any;
    addquickloginkeyforpersonid?: string;

    constructor(data?: IParseTemplateDynamicModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.template = data["template"];
            if (data["model"]) {
                this.model = {};
                for (let key in data["model"]) {
                    if (data["model"].hasOwnProperty(key))
                        this.model[key] = data["model"][key];
                }
            }
            this.addquickloginkeyforpersonid = data["addquickloginkeyforpersonid"];
        }
    }

    static fromJS(data: any): ParseTemplateDynamicModel {
        let result = new ParseTemplateDynamicModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["template"] = this.template;
        if (this.model) {
            data["model"] = {};
            for (let key in this.model) {
                if (this.model.hasOwnProperty(key))
                    data["model"][key] = this.model[key];
            }
        }
        data["addquickloginkeyforpersonid"] = this.addquickloginkeyforpersonid;
        return data;
    }
}

export interface IParseTemplateDynamicModel {
    template?: string;
    model?: any;
    addquickloginkeyforpersonid?: string;
}

export class TimeGroupProfileCustomer implements ITimeGroupProfileCustomer {
    Id?: string;
    Name?: string;

    constructor(data?: ITimeGroupProfileCustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Id = data["Id"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): TimeGroupProfileCustomer {
        let result = new TimeGroupProfileCustomer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.Id;
        data["Name"] = this.Name;
        return data;
    }
}

export interface ITimeGroupProfileCustomer {
    Id?: string;
    Name?: string;
}

export class TimeGroupProfileSearchModel implements ITimeGroupProfileSearchModel {
    SearchStr?: string;
    CustomerId?: string;

    constructor(data?: ITimeGroupProfileSearchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SearchStr = data["SearchStr"];
            this.CustomerId = data["CustomerId"];
        }
    }

    static fromJS(data: any): TimeGroupProfileSearchModel {
        let result = new TimeGroupProfileSearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchStr"] = this.SearchStr;
        data["CustomerId"] = this.CustomerId;
        return data;
    }
}

export interface ITimeGroupProfileSearchModel {
    SearchStr?: string;
    CustomerId?: string;
}

export class DefaultPriceProfileBreakLogic implements IDefaultPriceProfileBreakLogic {
    id?: string;
    WithDrawBreakMinutes?: boolean;
    Selection?: BreakMinutesWithdrawFromDefaultPriceProfileTimeGroup[];
    DefaultPriceProfileId?: number;

    constructor(data?: IDefaultPriceProfileBreakLogic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.WithDrawBreakMinutes = data["WithDrawBreakMinutes"];
            if (data["Selection"] && data["Selection"].constructor === Array) {
                this.Selection = [];
                for (let item of data["Selection"])
                    this.Selection.push(BreakMinutesWithdrawFromDefaultPriceProfileTimeGroup.fromJS(item));
            }
            this.DefaultPriceProfileId = data["DefaultPriceProfileId"];
        }
    }

    static fromJS(data: any): DefaultPriceProfileBreakLogic {
        let result = new DefaultPriceProfileBreakLogic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["WithDrawBreakMinutes"] = this.WithDrawBreakMinutes;
        if (this.Selection && this.Selection.constructor === Array) {
            data["Selection"] = [];
            for (let item of this.Selection)
                data["Selection"].push(item.toJSON());
        }
        data["DefaultPriceProfileId"] = this.DefaultPriceProfileId;
        return data;
    }
}

export interface IDefaultPriceProfileBreakLogic {
    id?: string;
    WithDrawBreakMinutes?: boolean;
    Selection?: BreakMinutesWithdrawFromDefaultPriceProfileTimeGroup[];
    DefaultPriceProfileId?: number;
}

export class BreakMinutesWithdrawFromDefaultPriceProfileTimeGroup implements IBreakMinutesWithdrawFromDefaultPriceProfileTimeGroup {
    DefaultPriceProfileTimeGroupId?: number;
    DefaultPriceProfileTimeGroupName?: string;
    Selected?: boolean;
    Priority?: number;

    constructor(data?: IBreakMinutesWithdrawFromDefaultPriceProfileTimeGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.DefaultPriceProfileTimeGroupId = data["DefaultPriceProfileTimeGroupId"];
            this.DefaultPriceProfileTimeGroupName = data["DefaultPriceProfileTimeGroupName"];
            this.Selected = data["Selected"];
            this.Priority = data["Priority"];
        }
    }

    static fromJS(data: any): BreakMinutesWithdrawFromDefaultPriceProfileTimeGroup {
        let result = new BreakMinutesWithdrawFromDefaultPriceProfileTimeGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DefaultPriceProfileTimeGroupId"] = this.DefaultPriceProfileTimeGroupId;
        data["DefaultPriceProfileTimeGroupName"] = this.DefaultPriceProfileTimeGroupName;
        data["Selected"] = this.Selected;
        data["Priority"] = this.Priority;
        return data;
    }
}

export interface IBreakMinutesWithdrawFromDefaultPriceProfileTimeGroup {
    DefaultPriceProfileTimeGroupId?: number;
    DefaultPriceProfileTimeGroupName?: string;
    Selected?: boolean;
    Priority?: number;
}

export class TimeOfDay implements ITimeOfDay {
    Time?: string;
    MinuteNumber?: number;

    constructor(data?: ITimeOfDay) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Time = data["Time"];
            this.MinuteNumber = data["MinuteNumber"];
        }
    }

    static fromJS(data: any): TimeOfDay {
        let result = new TimeOfDay();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Time"] = this.Time;
        data["MinuteNumber"] = this.MinuteNumber;
        return data;
    }
}

export interface ITimeOfDay {
    Time?: string;
    MinuteNumber?: number;
}

export class DayType implements IDayType {
    DayTypeId?: number;
    Name?: string;
    ShortName?: string;

    constructor(data?: IDayType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.DayTypeId = data["DayTypeId"];
            this.Name = data["Name"];
            this.ShortName = data["ShortName"];
        }
    }

    static fromJS(data: any): DayType {
        let result = new DayType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DayTypeId"] = this.DayTypeId;
        data["Name"] = this.Name;
        data["ShortName"] = this.ShortName;
        return data;
    }
}

export interface IDayType {
    DayTypeId?: number;
    Name?: string;
    ShortName?: string;
}

export class TimeGroupRecordDayTimeLogic implements ITimeGroupRecordDayTimeLogic {
    id?: string;
    DayTypeId?: number;
    FromTime?: string;
    ToTime?: string;
    TimeZoneId?: string;
    DefaultPriceProfileTimeGroupId?: number;
    DefaultPriceProfileId?: number;

    constructor(data?: ITimeGroupRecordDayTimeLogic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.DayTypeId = data["DayTypeId"];
            this.FromTime = data["FromTime"];
            this.ToTime = data["ToTime"];
            this.TimeZoneId = data["TimeZoneId"];
            this.DefaultPriceProfileTimeGroupId = data["DefaultPriceProfileTimeGroupId"];
            this.DefaultPriceProfileId = data["DefaultPriceProfileId"];
        }
    }

    static fromJS(data: any): TimeGroupRecordDayTimeLogic {
        let result = new TimeGroupRecordDayTimeLogic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["DayTypeId"] = this.DayTypeId;
        data["FromTime"] = this.FromTime;
        data["ToTime"] = this.ToTime;
        data["TimeZoneId"] = this.TimeZoneId;
        data["DefaultPriceProfileTimeGroupId"] = this.DefaultPriceProfileTimeGroupId;
        data["DefaultPriceProfileId"] = this.DefaultPriceProfileId;
        return data;
    }
}

export interface ITimeGroupRecordDayTimeLogic {
    id?: string;
    DayTypeId?: number;
    FromTime?: string;
    ToTime?: string;
    TimeZoneId?: string;
    DefaultPriceProfileTimeGroupId?: number;
    DefaultPriceProfileId?: number;
}

export class SpecialDay implements ISpecialDay {
    id?: string;
    DayTypeId?: number;
    Date?: string;
    Name?: string;
    CountryId?: string;
    CountryName?: string;

    constructor(data?: ISpecialDay) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.DayTypeId = data["DayTypeId"];
            this.Date = data["Date"];
            this.Name = data["Name"];
            this.CountryId = data["CountryId"];
            this.CountryName = data["CountryName"];
        }
    }

    static fromJS(data: any): SpecialDay {
        let result = new SpecialDay();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["DayTypeId"] = this.DayTypeId;
        data["Date"] = this.Date;
        data["Name"] = this.Name;
        data["CountryId"] = this.CountryId;
        data["CountryName"] = this.CountryName;
        return data;
    }
}

export interface ISpecialDay {
    id?: string;
    DayTypeId?: number;
    Date?: string;
    Name?: string;
    CountryId?: string;
    CountryName?: string;
}

export class TupleOfIEnumerableOfTimelogAndString implements ITupleOfIEnumerableOfTimelogAndString {
    Item1?: Timelog[];
    Item2?: string;

    constructor(data?: ITupleOfIEnumerableOfTimelogAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Item1"] && data["Item1"].constructor === Array) {
                this.Item1 = [];
                for (let item of data["Item1"])
                    this.Item1.push(Timelog.fromJS(item));
            }
            this.Item2 = data["Item2"];
        }
    }

    static fromJS(data: any): TupleOfIEnumerableOfTimelogAndString {
        let result = new TupleOfIEnumerableOfTimelogAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Item1 && this.Item1.constructor === Array) {
            data["Item1"] = [];
            for (let item of this.Item1)
                data["Item1"].push(item.toJSON());
        }
        data["Item2"] = this.Item2;
        return data;
    }
}

export interface ITupleOfIEnumerableOfTimelogAndString {
    Item1?: Timelog[];
    Item2?: string;
}

export class Timelog implements ITimelog {
    id?: string;
    PersonId?: string;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    Name?: string;
    StartTime?: DateEpoch;
    StopTime?: DateEpoch;
    BreakMinutes?: number;
    TimeZoneId?: string;
    CultureId?: string;
    Canceled?: boolean;
    Description?: string;
    MetaDescription?: string;
    WorkItemId?: string;
    WorkShiftId?: string;
    SpecifiedFromDefaultTimeGroupId?: string;
    SpecifiedFromDefaultTimeGroupName?: string;
    IsTimeReported?: boolean;
    TimeReportId?: string;
    TotalTime?: string;

    constructor(data?: ITimelog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.PersonId = data["PersonId"];
            this.SocialSecurityNo = data["SocialSecurityNo"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.Name = data["Name"];
            this.StartTime = data["StartTime"] ? DateEpoch.fromJS(data["StartTime"]) : <any>undefined;
            this.StopTime = data["StopTime"] ? DateEpoch.fromJS(data["StopTime"]) : <any>undefined;
            this.BreakMinutes = data["BreakMinutes"];
            this.TimeZoneId = data["TimeZoneId"];
            this.CultureId = data["CultureId"];
            this.Canceled = data["Canceled"];
            this.Description = data["Description"];
            this.MetaDescription = data["MetaDescription"];
            this.WorkItemId = data["WorkItemId"];
            this.WorkShiftId = data["WorkShiftId"];
            this.SpecifiedFromDefaultTimeGroupId = data["SpecifiedFromDefaultTimeGroupId"];
            this.SpecifiedFromDefaultTimeGroupName = data["SpecifiedFromDefaultTimeGroupName"];
            this.IsTimeReported = data["IsTimeReported"];
            this.TimeReportId = data["TimeReportId"];
            this.TotalTime = data["TotalTime"];
        }
    }

    static fromJS(data: any): Timelog {
        let result = new Timelog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["PersonId"] = this.PersonId;
        data["SocialSecurityNo"] = this.SocialSecurityNo;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["Name"] = this.Name;
        data["StartTime"] = this.StartTime ? this.StartTime.toJSON() : <any>undefined;
        data["StopTime"] = this.StopTime ? this.StopTime.toJSON() : <any>undefined;
        data["BreakMinutes"] = this.BreakMinutes;
        data["TimeZoneId"] = this.TimeZoneId;
        data["CultureId"] = this.CultureId;
        data["Canceled"] = this.Canceled;
        data["Description"] = this.Description;
        data["MetaDescription"] = this.MetaDescription;
        data["WorkItemId"] = this.WorkItemId;
        data["WorkShiftId"] = this.WorkShiftId;
        data["SpecifiedFromDefaultTimeGroupId"] = this.SpecifiedFromDefaultTimeGroupId;
        data["SpecifiedFromDefaultTimeGroupName"] = this.SpecifiedFromDefaultTimeGroupName;
        data["IsTimeReported"] = this.IsTimeReported;
        data["TimeReportId"] = this.TimeReportId;
        data["TotalTime"] = this.TotalTime;
        return data;
    }
}

export interface ITimelog {
    id?: string;
    PersonId?: string;
    SocialSecurityNo?: string;
    FirstName?: string;
    LastName?: string;
    Name?: string;
    StartTime?: DateEpoch;
    StopTime?: DateEpoch;
    BreakMinutes?: number;
    TimeZoneId?: string;
    CultureId?: string;
    Canceled?: boolean;
    Description?: string;
    MetaDescription?: string;
    WorkItemId?: string;
    WorkShiftId?: string;
    SpecifiedFromDefaultTimeGroupId?: string;
    SpecifiedFromDefaultTimeGroupName?: string;
    IsTimeReported?: boolean;
    TimeReportId?: string;
    TotalTime?: string;
}

export class TimelogSearchModel implements ITimelogSearchModel {
    SearchStr?: string;
    take?: number;
    continuationtoken?: string;

    constructor(data?: ITimelogSearchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SearchStr = data["SearchStr"];
            this.take = data["take"];
            this.continuationtoken = data["continuationtoken"];
        }
    }

    static fromJS(data: any): TimelogSearchModel {
        let result = new TimelogSearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchStr"] = this.SearchStr;
        data["take"] = this.take;
        data["continuationtoken"] = this.continuationtoken;
        return data;
    }
}

export interface ITimelogSearchModel {
    SearchStr?: string;
    take?: number;
    continuationtoken?: string;
}

export class TimelogPosition implements ITimelogPosition {
    id?: string;
    RecordedDate?: DateEpoch;
    Position?: Position;
    TimelogId?: string;

    constructor(data?: ITimelogPosition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.RecordedDate = data["RecordedDate"] ? DateEpoch.fromJS(data["RecordedDate"]) : <any>undefined;
            this.Position = data["Position"] ? Position.fromJS(data["Position"]) : <any>undefined;
            this.TimelogId = data["TimelogId"];
        }
    }

    static fromJS(data: any): TimelogPosition {
        let result = new TimelogPosition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["RecordedDate"] = this.RecordedDate ? this.RecordedDate.toJSON() : <any>undefined;
        data["Position"] = this.Position ? this.Position.toJSON() : <any>undefined;
        data["TimelogId"] = this.TimelogId;
        return data;
    }
}

export interface ITimelogPosition {
    id?: string;
    RecordedDate?: DateEpoch;
    Position?: Position;
    TimelogId?: string;
}

export class Position implements IPosition {
    coords?: Coordinates;
    timestamp?: number;

    constructor(data?: IPosition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.coords = data["coords"] ? Coordinates.fromJS(data["coords"]) : <any>undefined;
            this.timestamp = data["timestamp"];
        }
    }

    static fromJS(data: any): Position {
        let result = new Position();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coords"] = this.coords ? this.coords.toJSON() : <any>undefined;
        data["timestamp"] = this.timestamp;
        return data;
    }
}

export interface IPosition {
    coords?: Coordinates;
    timestamp?: number;
}

export class Coordinates implements ICoordinates {
    accuracy?: number;
    altitude?: number;
    altitudeAccuracy?: number;
    heading?: number;
    latitude?: number;
    longitude?: number;
    speed?: number;

    constructor(data?: ICoordinates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accuracy = data["accuracy"];
            this.altitude = data["altitude"];
            this.altitudeAccuracy = data["altitudeAccuracy"];
            this.heading = data["heading"];
            this.latitude = data["latitude"];
            this.longitude = data["longitude"];
            this.speed = data["speed"];
        }
    }

    static fromJS(data: any): Coordinates {
        let result = new Coordinates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accuracy"] = this.accuracy;
        data["altitude"] = this.altitude;
        data["altitudeAccuracy"] = this.altitudeAccuracy;
        data["heading"] = this.heading;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["speed"] = this.speed;
        return data;
    }
}

export interface ICoordinates {
    accuracy?: number;
    altitude?: number;
    altitudeAccuracy?: number;
    heading?: number;
    latitude?: number;
    longitude?: number;
    speed?: number;
}

export class WorkShift implements IWorkShift {
    id?: string;
    YearNr?: number;
    MonthNr?: number;
    WeekNr?: number;
    Date?: string;
    FromTime?: string;
    ToTime?: string;
    BreakMinutes?: number;
    TimeZoneId?: string;
    CultureId?: string;
    TotalTime?: string;
    Hours?: number;
    Minutes?: number;
    Candidates?: WorkShiftCandidate[];
    SearchMetaData?: string;
    InfoComment?: string;
    IsTimeReported?: boolean;
    TimeReportId?: string;
    WorkShiftGroupId?: string;
    WorkItemId?: string;
    DescriptionInternal?: string;
    ProjectId?: number;
    ProjectName?: string;
    EmployerPersonId?: number;
    EmployerName?: string;
    LocationAddressId?: string;
    LocationAddress?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    EmployerContactPersonId?: string;
    EmployerContactPersonFirstName?: string;
    EmployerContactPersonLastName?: string;
    EmployerEmail?: string;
    EmployerCellPhone?: string;
    EmployerPhone?: string;
    WorkerPersonId?: number;
    WorkerName?: string;
    WorkerCellPhone?: string;
    WorkerPhone?: string;
    WorkerEmail?: string;
    WorkerSocialSecurityNo?: string;
    WorkerAssignedDate?: Date;
    WorkerAssignedBy?: string;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    Public?: boolean;
    AreaOfExpertise?: string;
    CountyCouncilName?: string;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SalaryTaxMultiplier?: number;
    CostCenter?: string;
    WorkerCostCenter?: string;
    ResponsibleCostCenter?: string;
    ExternalProjectNo?: string;
    ManualCompensation?: boolean;
    ManualInvoiceValue?: boolean;
    CreatedDate?: Date;
    CustomerOrderNo?: string;
    KnowledgeOfMedicalRecordName?: string;
    TagNamesJsonStringArray?: string;
    TermsOfPaymentId?: string;
    YourReference?: string;
    DefaultPriceProfileId?: number;
    DefaultPriceProfileName?: string;
    WorkSerieId?: string;
    BusinessUnitId?: string;
    TeamId?: string;
    IsStandByShift?: boolean;
    Context?: Context;

    constructor(data?: IWorkShift) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.YearNr = data["YearNr"];
            this.MonthNr = data["MonthNr"];
            this.WeekNr = data["WeekNr"];
            this.Date = data["Date"];
            this.FromTime = data["FromTime"];
            this.ToTime = data["ToTime"];
            this.BreakMinutes = data["BreakMinutes"];
            this.TimeZoneId = data["TimeZoneId"];
            this.CultureId = data["CultureId"];
            this.TotalTime = data["TotalTime"];
            this.Hours = data["Hours"];
            this.Minutes = data["Minutes"];
            if (data["Candidates"] && data["Candidates"].constructor === Array) {
                this.Candidates = [];
                for (let item of data["Candidates"])
                    this.Candidates.push(WorkShiftCandidate.fromJS(item));
            }
            this.SearchMetaData = data["SearchMetaData"];
            this.InfoComment = data["InfoComment"];
            this.IsTimeReported = data["IsTimeReported"];
            this.TimeReportId = data["TimeReportId"];
            this.WorkShiftGroupId = data["WorkShiftGroupId"];
            this.WorkItemId = data["WorkItemId"];
            this.DescriptionInternal = data["DescriptionInternal"];
            this.ProjectId = data["ProjectId"];
            this.ProjectName = data["ProjectName"];
            this.EmployerPersonId = data["EmployerPersonId"];
            this.EmployerName = data["EmployerName"];
            this.LocationAddressId = data["LocationAddressId"];
            this.LocationAddress = data["LocationAddress"];
            this.EmployerBranchOffice = data["EmployerBranchOffice"];
            this.EmployerDepartment = data["EmployerDepartment"];
            this.EmployerContactPersonId = data["EmployerContactPersonId"];
            this.EmployerContactPersonFirstName = data["EmployerContactPersonFirstName"];
            this.EmployerContactPersonLastName = data["EmployerContactPersonLastName"];
            this.EmployerEmail = data["EmployerEmail"];
            this.EmployerCellPhone = data["EmployerCellPhone"];
            this.EmployerPhone = data["EmployerPhone"];
            this.WorkerPersonId = data["WorkerPersonId"];
            this.WorkerName = data["WorkerName"];
            this.WorkerCellPhone = data["WorkerCellPhone"];
            this.WorkerPhone = data["WorkerPhone"];
            this.WorkerEmail = data["WorkerEmail"];
            this.WorkerSocialSecurityNo = data["WorkerSocialSecurityNo"];
            this.WorkerAssignedDate = data["WorkerAssignedDate"] ? new Date(data["WorkerAssignedDate"].toString()) : <any>undefined;
            this.WorkerAssignedBy = data["WorkerAssignedBy"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.ResponsibleName = data["ResponsibleName"];
            this.Public = data["Public"];
            this.AreaOfExpertise = data["AreaOfExpertise"];
            this.CountyCouncilName = data["CountyCouncilName"];
            this.WorkCompensationMultiplierId = data["WorkCompensationMultiplierId"];
            this.WorkCompensationMultiplierValue = data["WorkCompensationMultiplierValue"];
            this.VacationPayMultiplier = data["VacationPayMultiplier"];
            this.SalaryTaxMultiplier = data["SalaryTaxMultiplier"];
            this.CostCenter = data["CostCenter"];
            this.WorkerCostCenter = data["WorkerCostCenter"];
            this.ResponsibleCostCenter = data["ResponsibleCostCenter"];
            this.ExternalProjectNo = data["ExternalProjectNo"];
            this.ManualCompensation = data["ManualCompensation"];
            this.ManualInvoiceValue = data["ManualInvoiceValue"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.CustomerOrderNo = data["CustomerOrderNo"];
            this.KnowledgeOfMedicalRecordName = data["KnowledgeOfMedicalRecordName"];
            this.TagNamesJsonStringArray = data["TagNamesJsonStringArray"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.YourReference = data["YourReference"];
            this.DefaultPriceProfileId = data["DefaultPriceProfileId"];
            this.DefaultPriceProfileName = data["DefaultPriceProfileName"];
            this.WorkSerieId = data["WorkSerieId"];
            this.BusinessUnitId = data["BusinessUnitId"];
            this.TeamId = data["TeamId"];
            this.IsStandByShift = data["IsStandByShift"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkShift {
        let result = new WorkShift();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["YearNr"] = this.YearNr;
        data["MonthNr"] = this.MonthNr;
        data["WeekNr"] = this.WeekNr;
        data["Date"] = this.Date;
        data["FromTime"] = this.FromTime;
        data["ToTime"] = this.ToTime;
        data["BreakMinutes"] = this.BreakMinutes;
        data["TimeZoneId"] = this.TimeZoneId;
        data["CultureId"] = this.CultureId;
        data["TotalTime"] = this.TotalTime;
        data["Hours"] = this.Hours;
        data["Minutes"] = this.Minutes;
        if (this.Candidates && this.Candidates.constructor === Array) {
            data["Candidates"] = [];
            for (let item of this.Candidates)
                data["Candidates"].push(item.toJSON());
        }
        data["SearchMetaData"] = this.SearchMetaData;
        data["InfoComment"] = this.InfoComment;
        data["IsTimeReported"] = this.IsTimeReported;
        data["TimeReportId"] = this.TimeReportId;
        data["WorkShiftGroupId"] = this.WorkShiftGroupId;
        data["WorkItemId"] = this.WorkItemId;
        data["DescriptionInternal"] = this.DescriptionInternal;
        data["ProjectId"] = this.ProjectId;
        data["ProjectName"] = this.ProjectName;
        data["EmployerPersonId"] = this.EmployerPersonId;
        data["EmployerName"] = this.EmployerName;
        data["LocationAddressId"] = this.LocationAddressId;
        data["LocationAddress"] = this.LocationAddress;
        data["EmployerBranchOffice"] = this.EmployerBranchOffice;
        data["EmployerDepartment"] = this.EmployerDepartment;
        data["EmployerContactPersonId"] = this.EmployerContactPersonId;
        data["EmployerContactPersonFirstName"] = this.EmployerContactPersonFirstName;
        data["EmployerContactPersonLastName"] = this.EmployerContactPersonLastName;
        data["EmployerEmail"] = this.EmployerEmail;
        data["EmployerCellPhone"] = this.EmployerCellPhone;
        data["EmployerPhone"] = this.EmployerPhone;
        data["WorkerPersonId"] = this.WorkerPersonId;
        data["WorkerName"] = this.WorkerName;
        data["WorkerCellPhone"] = this.WorkerCellPhone;
        data["WorkerPhone"] = this.WorkerPhone;
        data["WorkerEmail"] = this.WorkerEmail;
        data["WorkerSocialSecurityNo"] = this.WorkerSocialSecurityNo;
        data["WorkerAssignedDate"] = this.WorkerAssignedDate ? this.WorkerAssignedDate.toISOString() : <any>undefined;
        data["WorkerAssignedBy"] = this.WorkerAssignedBy;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["ResponsibleName"] = this.ResponsibleName;
        data["Public"] = this.Public;
        data["AreaOfExpertise"] = this.AreaOfExpertise;
        data["CountyCouncilName"] = this.CountyCouncilName;
        data["WorkCompensationMultiplierId"] = this.WorkCompensationMultiplierId;
        data["WorkCompensationMultiplierValue"] = this.WorkCompensationMultiplierValue;
        data["VacationPayMultiplier"] = this.VacationPayMultiplier;
        data["SalaryTaxMultiplier"] = this.SalaryTaxMultiplier;
        data["CostCenter"] = this.CostCenter;
        data["WorkerCostCenter"] = this.WorkerCostCenter;
        data["ResponsibleCostCenter"] = this.ResponsibleCostCenter;
        data["ExternalProjectNo"] = this.ExternalProjectNo;
        data["ManualCompensation"] = this.ManualCompensation;
        data["ManualInvoiceValue"] = this.ManualInvoiceValue;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["CustomerOrderNo"] = this.CustomerOrderNo;
        data["KnowledgeOfMedicalRecordName"] = this.KnowledgeOfMedicalRecordName;
        data["TagNamesJsonStringArray"] = this.TagNamesJsonStringArray;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["YourReference"] = this.YourReference;
        data["DefaultPriceProfileId"] = this.DefaultPriceProfileId;
        data["DefaultPriceProfileName"] = this.DefaultPriceProfileName;
        data["WorkSerieId"] = this.WorkSerieId;
        data["BusinessUnitId"] = this.BusinessUnitId;
        data["TeamId"] = this.TeamId;
        data["IsStandByShift"] = this.IsStandByShift;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkShift {
    id?: string;
    YearNr?: number;
    MonthNr?: number;
    WeekNr?: number;
    Date?: string;
    FromTime?: string;
    ToTime?: string;
    BreakMinutes?: number;
    TimeZoneId?: string;
    CultureId?: string;
    TotalTime?: string;
    Hours?: number;
    Minutes?: number;
    Candidates?: WorkShiftCandidate[];
    SearchMetaData?: string;
    InfoComment?: string;
    IsTimeReported?: boolean;
    TimeReportId?: string;
    WorkShiftGroupId?: string;
    WorkItemId?: string;
    DescriptionInternal?: string;
    ProjectId?: number;
    ProjectName?: string;
    EmployerPersonId?: number;
    EmployerName?: string;
    LocationAddressId?: string;
    LocationAddress?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    EmployerContactPersonId?: string;
    EmployerContactPersonFirstName?: string;
    EmployerContactPersonLastName?: string;
    EmployerEmail?: string;
    EmployerCellPhone?: string;
    EmployerPhone?: string;
    WorkerPersonId?: number;
    WorkerName?: string;
    WorkerCellPhone?: string;
    WorkerPhone?: string;
    WorkerEmail?: string;
    WorkerSocialSecurityNo?: string;
    WorkerAssignedDate?: Date;
    WorkerAssignedBy?: string;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    Public?: boolean;
    AreaOfExpertise?: string;
    CountyCouncilName?: string;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SalaryTaxMultiplier?: number;
    CostCenter?: string;
    WorkerCostCenter?: string;
    ResponsibleCostCenter?: string;
    ExternalProjectNo?: string;
    ManualCompensation?: boolean;
    ManualInvoiceValue?: boolean;
    CreatedDate?: Date;
    CustomerOrderNo?: string;
    KnowledgeOfMedicalRecordName?: string;
    TagNamesJsonStringArray?: string;
    TermsOfPaymentId?: string;
    YourReference?: string;
    DefaultPriceProfileId?: number;
    DefaultPriceProfileName?: string;
    WorkSerieId?: string;
    BusinessUnitId?: string;
    TeamId?: string;
    IsStandByShift?: boolean;
    Context?: Context;
}

export class WorkShiftCandidate implements IWorkShiftCandidate {
    PersonId?: string;
    Name?: string;
    Email?: string;
    Phone?: string;

    constructor(data?: IWorkShiftCandidate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.PersonId = data["PersonId"];
            this.Name = data["Name"];
            this.Email = data["Email"];
            this.Phone = data["Phone"];
        }
    }

    static fromJS(data: any): WorkShiftCandidate {
        let result = new WorkShiftCandidate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PersonId"] = this.PersonId;
        data["Name"] = this.Name;
        data["Email"] = this.Email;
        data["Phone"] = this.Phone;
        return data;
    }
}

export interface IWorkShiftCandidate {
    PersonId?: string;
    Name?: string;
    Email?: string;
    Phone?: string;
}

export class TimeReport implements ITimeReport {
    id?: string;
    WorkerId?: string;
    WorkerName?: string;
    EmployerId?: string;
    EmployerName?: string;
    CustomerId?: string;
    CustomerName?: string;
    Attested?: boolean;
    AttestedById?: string;
    AttestedByName?: string;
    AttestedDate?: Date;
    DefaultPriceProfileId?: string;
    WorkItemId?: string;
    WorkShiftId?: string;
    Comment?: string;
    BreakMinutes?: number;
    CreatedDate?: Date;
    AutoCalculatingTimeGroups?: TimeGroupMini[];
    ManualTimeGroups?: TimeGroupMini[];
    WorkShift?: WorkShift;
    TimeLogs?: Timelog[];
    TimeReportLines?: TimeReportLine[];

    constructor(data?: ITimeReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.WorkerId = data["WorkerId"];
            this.WorkerName = data["WorkerName"];
            this.EmployerId = data["EmployerId"];
            this.EmployerName = data["EmployerName"];
            this.CustomerId = data["CustomerId"];
            this.CustomerName = data["CustomerName"];
            this.Attested = data["Attested"];
            this.AttestedById = data["AttestedById"];
            this.AttestedByName = data["AttestedByName"];
            this.AttestedDate = data["AttestedDate"] ? new Date(data["AttestedDate"].toString()) : <any>undefined;
            this.DefaultPriceProfileId = data["DefaultPriceProfileId"];
            this.WorkItemId = data["WorkItemId"];
            this.WorkShiftId = data["WorkShiftId"];
            this.Comment = data["Comment"];
            this.BreakMinutes = data["BreakMinutes"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            if (data["AutoCalculatingTimeGroups"] && data["AutoCalculatingTimeGroups"].constructor === Array) {
                this.AutoCalculatingTimeGroups = [];
                for (let item of data["AutoCalculatingTimeGroups"])
                    this.AutoCalculatingTimeGroups.push(TimeGroupMini.fromJS(item));
            }
            if (data["ManualTimeGroups"] && data["ManualTimeGroups"].constructor === Array) {
                this.ManualTimeGroups = [];
                for (let item of data["ManualTimeGroups"])
                    this.ManualTimeGroups.push(TimeGroupMini.fromJS(item));
            }
            this.WorkShift = data["WorkShift"] ? WorkShift.fromJS(data["WorkShift"]) : <any>undefined;
            if (data["TimeLogs"] && data["TimeLogs"].constructor === Array) {
                this.TimeLogs = [];
                for (let item of data["TimeLogs"])
                    this.TimeLogs.push(Timelog.fromJS(item));
            }
            if (data["TimeReportLines"] && data["TimeReportLines"].constructor === Array) {
                this.TimeReportLines = [];
                for (let item of data["TimeReportLines"])
                    this.TimeReportLines.push(TimeReportLine.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TimeReport {
        let result = new TimeReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["WorkerId"] = this.WorkerId;
        data["WorkerName"] = this.WorkerName;
        data["EmployerId"] = this.EmployerId;
        data["EmployerName"] = this.EmployerName;
        data["CustomerId"] = this.CustomerId;
        data["CustomerName"] = this.CustomerName;
        data["Attested"] = this.Attested;
        data["AttestedById"] = this.AttestedById;
        data["AttestedByName"] = this.AttestedByName;
        data["AttestedDate"] = this.AttestedDate ? this.AttestedDate.toISOString() : <any>undefined;
        data["DefaultPriceProfileId"] = this.DefaultPriceProfileId;
        data["WorkItemId"] = this.WorkItemId;
        data["WorkShiftId"] = this.WorkShiftId;
        data["Comment"] = this.Comment;
        data["BreakMinutes"] = this.BreakMinutes;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        if (this.AutoCalculatingTimeGroups && this.AutoCalculatingTimeGroups.constructor === Array) {
            data["AutoCalculatingTimeGroups"] = [];
            for (let item of this.AutoCalculatingTimeGroups)
                data["AutoCalculatingTimeGroups"].push(item.toJSON());
        }
        if (this.ManualTimeGroups && this.ManualTimeGroups.constructor === Array) {
            data["ManualTimeGroups"] = [];
            for (let item of this.ManualTimeGroups)
                data["ManualTimeGroups"].push(item.toJSON());
        }
        data["WorkShift"] = this.WorkShift ? this.WorkShift.toJSON() : <any>undefined;
        if (this.TimeLogs && this.TimeLogs.constructor === Array) {
            data["TimeLogs"] = [];
            for (let item of this.TimeLogs)
                data["TimeLogs"].push(item.toJSON());
        }
        if (this.TimeReportLines && this.TimeReportLines.constructor === Array) {
            data["TimeReportLines"] = [];
            for (let item of this.TimeReportLines)
                data["TimeReportLines"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITimeReport {
    id?: string;
    WorkerId?: string;
    WorkerName?: string;
    EmployerId?: string;
    EmployerName?: string;
    CustomerId?: string;
    CustomerName?: string;
    Attested?: boolean;
    AttestedById?: string;
    AttestedByName?: string;
    AttestedDate?: Date;
    DefaultPriceProfileId?: string;
    WorkItemId?: string;
    WorkShiftId?: string;
    Comment?: string;
    BreakMinutes?: number;
    CreatedDate?: Date;
    AutoCalculatingTimeGroups?: TimeGroupMini[];
    ManualTimeGroups?: TimeGroupMini[];
    WorkShift?: WorkShift;
    TimeLogs?: Timelog[];
    TimeReportLines?: TimeReportLine[];
}

export class TimeGroupMini implements ITimeGroupMini {
    DefaultPriceProfileTimeGroupId?: number;
    Name?: string;
    SortOrder?: number;
    Uom?: string;

    constructor(data?: ITimeGroupMini) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.DefaultPriceProfileTimeGroupId = data["DefaultPriceProfileTimeGroupId"];
            this.Name = data["Name"];
            this.SortOrder = data["SortOrder"];
            this.Uom = data["Uom"];
        }
    }

    static fromJS(data: any): TimeGroupMini {
        let result = new TimeGroupMini();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DefaultPriceProfileTimeGroupId"] = this.DefaultPriceProfileTimeGroupId;
        data["Name"] = this.Name;
        data["SortOrder"] = this.SortOrder;
        data["Uom"] = this.Uom;
        return data;
    }
}

export interface ITimeGroupMini {
    DefaultPriceProfileTimeGroupId?: number;
    Name?: string;
    SortOrder?: number;
    Uom?: string;
}

export class TimeReportLine implements ITimeReportLine {
    CostCenter?: string;
    ProjectId?: string;
    InvoiceId?: string;
    PayRollId?: string;
    Date?: string;
    ToTime?: string;
    FromTime?: string;
    Title?: string;
    UnitCompensation?: number;
    UnitPrice?: number;
    Amount?: number;
    TotalQtyMinutes?: number;
    Uom?: string;
    VatPercent?: number;
    FromDefaultPriceProfileTimeGroupId?: number;
    Compensation?: number;
    Net?: number;
    Total?: number;
    Vat?: number;

    constructor(data?: ITimeReportLine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.CostCenter = data["CostCenter"];
            this.ProjectId = data["ProjectId"];
            this.InvoiceId = data["InvoiceId"];
            this.PayRollId = data["PayRollId"];
            this.Date = data["Date"];
            this.ToTime = data["ToTime"];
            this.FromTime = data["FromTime"];
            this.Title = data["Title"];
            this.UnitCompensation = data["UnitCompensation"];
            this.UnitPrice = data["UnitPrice"];
            this.Amount = data["Amount"];
            this.TotalQtyMinutes = data["TotalQtyMinutes"];
            this.Uom = data["Uom"];
            this.VatPercent = data["VatPercent"];
            this.FromDefaultPriceProfileTimeGroupId = data["FromDefaultPriceProfileTimeGroupId"];
            this.Compensation = data["Compensation"];
            this.Net = data["Net"];
            this.Total = data["Total"];
            this.Vat = data["Vat"];
        }
    }

    static fromJS(data: any): TimeReportLine {
        let result = new TimeReportLine();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CostCenter"] = this.CostCenter;
        data["ProjectId"] = this.ProjectId;
        data["InvoiceId"] = this.InvoiceId;
        data["PayRollId"] = this.PayRollId;
        data["Date"] = this.Date;
        data["ToTime"] = this.ToTime;
        data["FromTime"] = this.FromTime;
        data["Title"] = this.Title;
        data["UnitCompensation"] = this.UnitCompensation;
        data["UnitPrice"] = this.UnitPrice;
        data["Amount"] = this.Amount;
        data["TotalQtyMinutes"] = this.TotalQtyMinutes;
        data["Uom"] = this.Uom;
        data["VatPercent"] = this.VatPercent;
        data["FromDefaultPriceProfileTimeGroupId"] = this.FromDefaultPriceProfileTimeGroupId;
        data["Compensation"] = this.Compensation;
        data["Net"] = this.Net;
        data["Total"] = this.Total;
        data["Vat"] = this.Vat;
        return data;
    }
}

export interface ITimeReportLine {
    CostCenter?: string;
    ProjectId?: string;
    InvoiceId?: string;
    PayRollId?: string;
    Date?: string;
    ToTime?: string;
    FromTime?: string;
    Title?: string;
    UnitCompensation?: number;
    UnitPrice?: number;
    Amount?: number;
    TotalQtyMinutes?: number;
    Uom?: string;
    VatPercent?: number;
    FromDefaultPriceProfileTimeGroupId?: number;
    Compensation?: number;
    Net?: number;
    Total?: number;
    Vat?: number;
}

export class TimeReportSearchModel implements ITimeReportSearchModel {
    SearchStr?: string;
    FromDate?: string;
    ToDate?: string;
    TimeReported?: boolean;
    Attested?: boolean;
    continuationToken?: string;

    constructor(data?: ITimeReportSearchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SearchStr = data["SearchStr"];
            this.FromDate = data["FromDate"];
            this.ToDate = data["ToDate"];
            this.TimeReported = data["TimeReported"];
            this.Attested = data["Attested"];
            this.continuationToken = data["continuationToken"];
        }
    }

    static fromJS(data: any): TimeReportSearchModel {
        let result = new TimeReportSearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchStr"] = this.SearchStr;
        data["FromDate"] = this.FromDate;
        data["ToDate"] = this.ToDate;
        data["TimeReported"] = this.TimeReported;
        data["Attested"] = this.Attested;
        data["continuationToken"] = this.continuationToken;
        return data;
    }
}

export interface ITimeReportSearchModel {
    SearchStr?: string;
    FromDate?: string;
    ToDate?: string;
    TimeReported?: boolean;
    Attested?: boolean;
    continuationToken?: string;
}

export class PagedResultsOfTimeReport implements IPagedResultsOfTimeReport {
    ContinuationToken?: string;
    Results?: TimeReport[];

    constructor(data?: IPagedResultsOfTimeReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ContinuationToken = data["ContinuationToken"];
            if (data["Results"] && data["Results"].constructor === Array) {
                this.Results = [];
                for (let item of data["Results"])
                    this.Results.push(TimeReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultsOfTimeReport {
        let result = new PagedResultsOfTimeReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContinuationToken"] = this.ContinuationToken;
        if (this.Results && this.Results.constructor === Array) {
            data["Results"] = [];
            for (let item of this.Results)
                data["Results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedResultsOfTimeReport {
    ContinuationToken?: string;
    Results?: TimeReport[];
}

export class ContinuationResultOfIEnumerableOfTimeReport implements IContinuationResultOfIEnumerableOfTimeReport {
    Result?: TimeReport[];
    ContinuationToken?: string;

    constructor(data?: IContinuationResultOfIEnumerableOfTimeReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Result"] && data["Result"].constructor === Array) {
                this.Result = [];
                for (let item of data["Result"])
                    this.Result.push(TimeReport.fromJS(item));
            }
            this.ContinuationToken = data["ContinuationToken"];
        }
    }

    static fromJS(data: any): ContinuationResultOfIEnumerableOfTimeReport {
        let result = new ContinuationResultOfIEnumerableOfTimeReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Result && this.Result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.Result)
                data["Result"].push(item.toJSON());
        }
        data["ContinuationToken"] = this.ContinuationToken;
        return data;
    }
}

export interface IContinuationResultOfIEnumerableOfTimeReport {
    Result?: TimeReport[];
    ContinuationToken?: string;
}

export class WageType implements IWageType {
    id?: string;
    WageTypeCodeNo?: string;
    Name?: string;

    constructor(data?: IWageType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.WageTypeCodeNo = data["WageTypeCodeNo"];
            this.Name = data["Name"];
        }
    }

    static fromJS(data: any): WageType {
        let result = new WageType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["WageTypeCodeNo"] = this.WageTypeCodeNo;
        data["Name"] = this.Name;
        return data;
    }
}

export interface IWageType {
    id?: string;
    WageTypeCodeNo?: string;
    Name?: string;
}

export class WorkAdSearchModel implements IWorkAdSearchModel {
    SearchStr?: string;
    ResponsiblePersonId?: string;
    Competense?: string;
    Archived?: boolean;

    constructor(data?: IWorkAdSearchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SearchStr = data["SearchStr"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.Competense = data["Competense"];
            this.Archived = data["Archived"];
        }
    }

    static fromJS(data: any): WorkAdSearchModel {
        let result = new WorkAdSearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchStr"] = this.SearchStr;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["Competense"] = this.Competense;
        data["Archived"] = this.Archived;
        return data;
    }
}

export interface IWorkAdSearchModel {
    SearchStr?: string;
    ResponsiblePersonId?: string;
    Competense?: string;
    Archived?: boolean;
}

export class WorkAd implements IWorkAd {
    NumberOfVacancies?: number;
    LocationAddress?: string;
    QtyApplicants?: number;
    CompetensesNeeded?: string[];
    Public?: boolean;
    PublicUrl?: string;
    PublicWorkAdUrl?: string;
    PublishOnAppId?: number;
    ResponsiblePersonId?: string;
    EmployerPersonId?: number;
    SellingPrice?: number;
    Vat?: number;
    Archived?: boolean;
    ConnectToRecruitPipe?: boolean;
    RecruitPipeSettingId?: string;
    RecruitPipeId?: string;
    ForWorkItems?: WorkAdWorkItem[];
    id?: string;
    Title?: string;
    ShortDescription?: string;
    Description?: string;
    EmploymentForm?: string;
    ExtentOfEmployment?: string;
    CompensationForm?: string;
    AccessDescription?: string;
    EmploymentRate?: number;
    City?: string;
    CountyCouncil?: string;
    CountryName?: string;
    ImageUrl?: string;
    ImageId?: string;
    ApplyBefore?: Date;
    ResponsiblePersonName?: string;
    EmployerName?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    Context?: Context;

    constructor(data?: IWorkAd) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.NumberOfVacancies = data["NumberOfVacancies"];
            this.LocationAddress = data["LocationAddress"];
            this.QtyApplicants = data["QtyApplicants"];
            if (data["CompetensesNeeded"] && data["CompetensesNeeded"].constructor === Array) {
                this.CompetensesNeeded = [];
                for (let item of data["CompetensesNeeded"])
                    this.CompetensesNeeded.push(item);
            }
            this.Public = data["Public"];
            this.PublicUrl = data["PublicUrl"];
            this.PublicWorkAdUrl = data["PublicWorkAdUrl"];
            this.PublishOnAppId = data["PublishOnAppId"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.EmployerPersonId = data["EmployerPersonId"];
            this.SellingPrice = data["SellingPrice"];
            this.Vat = data["Vat"];
            this.Archived = data["Archived"];
            this.ConnectToRecruitPipe = data["ConnectToRecruitPipe"];
            this.RecruitPipeSettingId = data["RecruitPipeSettingId"];
            this.RecruitPipeId = data["RecruitPipeId"];
            if (data["ForWorkItems"] && data["ForWorkItems"].constructor === Array) {
                this.ForWorkItems = [];
                for (let item of data["ForWorkItems"])
                    this.ForWorkItems.push(WorkAdWorkItem.fromJS(item));
            }
            this.id = data["id"];
            this.Title = data["Title"];
            this.ShortDescription = data["ShortDescription"];
            this.Description = data["Description"];
            this.EmploymentForm = data["EmploymentForm"];
            this.ExtentOfEmployment = data["ExtentOfEmployment"];
            this.CompensationForm = data["CompensationForm"];
            this.AccessDescription = data["AccessDescription"];
            this.EmploymentRate = data["EmploymentRate"];
            this.City = data["City"];
            this.CountyCouncil = data["CountyCouncil"];
            this.CountryName = data["CountryName"];
            this.ImageUrl = data["ImageUrl"];
            this.ImageId = data["ImageId"];
            this.ApplyBefore = data["ApplyBefore"] ? new Date(data["ApplyBefore"].toString()) : <any>undefined;
            this.ResponsiblePersonName = data["ResponsiblePersonName"];
            this.EmployerName = data["EmployerName"];
            this.EmployerBranchOffice = data["EmployerBranchOffice"];
            this.EmployerDepartment = data["EmployerDepartment"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkAd {
        let result = new WorkAd();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["NumberOfVacancies"] = this.NumberOfVacancies;
        data["LocationAddress"] = this.LocationAddress;
        data["QtyApplicants"] = this.QtyApplicants;
        if (this.CompetensesNeeded && this.CompetensesNeeded.constructor === Array) {
            data["CompetensesNeeded"] = [];
            for (let item of this.CompetensesNeeded)
                data["CompetensesNeeded"].push(item);
        }
        data["Public"] = this.Public;
        data["PublicUrl"] = this.PublicUrl;
        data["PublicWorkAdUrl"] = this.PublicWorkAdUrl;
        data["PublishOnAppId"] = this.PublishOnAppId;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["EmployerPersonId"] = this.EmployerPersonId;
        data["SellingPrice"] = this.SellingPrice;
        data["Vat"] = this.Vat;
        data["Archived"] = this.Archived;
        data["ConnectToRecruitPipe"] = this.ConnectToRecruitPipe;
        data["RecruitPipeSettingId"] = this.RecruitPipeSettingId;
        data["RecruitPipeId"] = this.RecruitPipeId;
        if (this.ForWorkItems && this.ForWorkItems.constructor === Array) {
            data["ForWorkItems"] = [];
            for (let item of this.ForWorkItems)
                data["ForWorkItems"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["Title"] = this.Title;
        data["ShortDescription"] = this.ShortDescription;
        data["Description"] = this.Description;
        data["EmploymentForm"] = this.EmploymentForm;
        data["ExtentOfEmployment"] = this.ExtentOfEmployment;
        data["CompensationForm"] = this.CompensationForm;
        data["AccessDescription"] = this.AccessDescription;
        data["EmploymentRate"] = this.EmploymentRate;
        data["City"] = this.City;
        data["CountyCouncil"] = this.CountyCouncil;
        data["CountryName"] = this.CountryName;
        data["ImageUrl"] = this.ImageUrl;
        data["ImageId"] = this.ImageId;
        data["ApplyBefore"] = this.ApplyBefore ? this.ApplyBefore.toISOString() : <any>undefined;
        data["ResponsiblePersonName"] = this.ResponsiblePersonName;
        data["EmployerName"] = this.EmployerName;
        data["EmployerBranchOffice"] = this.EmployerBranchOffice;
        data["EmployerDepartment"] = this.EmployerDepartment;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkAd {
    NumberOfVacancies?: number;
    LocationAddress?: string;
    QtyApplicants?: number;
    CompetensesNeeded?: string[];
    Public?: boolean;
    PublicUrl?: string;
    PublicWorkAdUrl?: string;
    PublishOnAppId?: number;
    ResponsiblePersonId?: string;
    EmployerPersonId?: number;
    SellingPrice?: number;
    Vat?: number;
    Archived?: boolean;
    ConnectToRecruitPipe?: boolean;
    RecruitPipeSettingId?: string;
    RecruitPipeId?: string;
    ForWorkItems?: WorkAdWorkItem[];
    id?: string;
    Title?: string;
    ShortDescription?: string;
    Description?: string;
    EmploymentForm?: string;
    ExtentOfEmployment?: string;
    CompensationForm?: string;
    AccessDescription?: string;
    EmploymentRate?: number;
    City?: string;
    CountyCouncil?: string;
    CountryName?: string;
    ImageUrl?: string;
    ImageId?: string;
    ApplyBefore?: Date;
    ResponsiblePersonName?: string;
    EmployerName?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    Context?: Context;
}

export class WorkAdWorkItem implements IWorkAdWorkItem {
    WorkItemId?: string;
    WeekNr?: number;
    YearNr?: number;
    EmployerName?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    WorkerPersonId?: number;
    WorkerName?: string;
    HaveOneOrMoreCandidates?: boolean;
    Context?: Context;

    constructor(data?: IWorkAdWorkItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WorkItemId = data["WorkItemId"];
            this.WeekNr = data["WeekNr"];
            this.YearNr = data["YearNr"];
            this.EmployerName = data["EmployerName"];
            this.EmployerBranchOffice = data["EmployerBranchOffice"];
            this.EmployerDepartment = data["EmployerDepartment"];
            this.WorkerPersonId = data["WorkerPersonId"];
            this.WorkerName = data["WorkerName"];
            this.HaveOneOrMoreCandidates = data["HaveOneOrMoreCandidates"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkAdWorkItem {
        let result = new WorkAdWorkItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WorkItemId"] = this.WorkItemId;
        data["WeekNr"] = this.WeekNr;
        data["YearNr"] = this.YearNr;
        data["EmployerName"] = this.EmployerName;
        data["EmployerBranchOffice"] = this.EmployerBranchOffice;
        data["EmployerDepartment"] = this.EmployerDepartment;
        data["WorkerPersonId"] = this.WorkerPersonId;
        data["WorkerName"] = this.WorkerName;
        data["HaveOneOrMoreCandidates"] = this.HaveOneOrMoreCandidates;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkAdWorkItem {
    WorkItemId?: string;
    WeekNr?: number;
    YearNr?: number;
    EmployerName?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    WorkerPersonId?: number;
    WorkerName?: string;
    HaveOneOrMoreCandidates?: boolean;
    Context?: Context;
}

export class ViewContent implements IViewContent {
    Content?: string;

    constructor(data?: IViewContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Content = data["Content"];
        }
    }

    static fromJS(data: any): ViewContent {
        let result = new ViewContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Content"] = this.Content;
        return data;
    }
}

export interface IViewContent {
    Content?: string;
}

export class ApplicantSearchModel implements IApplicantSearchModel {
    Skip?: number;
    Take?: number;
    WorkAdId?: string;
    PipeStepId?: string;

    constructor(data?: IApplicantSearchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Skip = data["Skip"];
            this.Take = data["Take"];
            this.WorkAdId = data["WorkAdId"];
            this.PipeStepId = data["PipeStepId"];
        }
    }

    static fromJS(data: any): ApplicantSearchModel {
        let result = new ApplicantSearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Skip"] = this.Skip;
        data["Take"] = this.Take;
        data["WorkAdId"] = this.WorkAdId;
        data["PipeStepId"] = this.PipeStepId;
        return data;
    }
}

export interface IApplicantSearchModel {
    Skip?: number;
    Take?: number;
    WorkAdId?: string;
    PipeStepId?: string;
}

export class ApplicantSearchResult implements IApplicantSearchResult {
    Skip?: number;
    Take?: number;
    TotalNrResult?: number;
    Result?: WorkAdApplicant[];

    constructor(data?: IApplicantSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Skip = data["Skip"];
            this.Take = data["Take"];
            this.TotalNrResult = data["TotalNrResult"];
            if (data["Result"] && data["Result"].constructor === Array) {
                this.Result = [];
                for (let item of data["Result"])
                    this.Result.push(WorkAdApplicant.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplicantSearchResult {
        let result = new ApplicantSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Skip"] = this.Skip;
        data["Take"] = this.Take;
        data["TotalNrResult"] = this.TotalNrResult;
        if (this.Result && this.Result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.Result)
                data["Result"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApplicantSearchResult {
    Skip?: number;
    Take?: number;
    TotalNrResult?: number;
    Result?: WorkAdApplicant[];
}

export class WorkAdApplicant implements IWorkAdApplicant {
    id?: string;
    FirstName?: string;
    LastName?: string;
    Name?: string;
    Email?: string;
    Phone?: string;
    CellPhone?: string;
    ImageUrl?: string;
    Description?: string;
    ConnectedPersonId?: string;
    ConnectedPersonTypeName?: string;
    Documents?: WorkAdApplicantDocument[];
    AppliedForWorkItems?: WorkAdWorkItem[];
    SortOrder?: number;
    Rating?: number;
    PipeStepId?: string;
    PipeId?: string;
    WorkAdId?: string;
    AcceptTermsOfServiceId?: string;
    AcceptPrivacyPolicyId?: string;
    Context?: Context;

    constructor(data?: IWorkAdApplicant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.FirstName = data["FirstName"];
            this.LastName = data["LastName"];
            this.Name = data["Name"];
            this.Email = data["Email"];
            this.Phone = data["Phone"];
            this.CellPhone = data["CellPhone"];
            this.ImageUrl = data["ImageUrl"];
            this.Description = data["Description"];
            this.ConnectedPersonId = data["ConnectedPersonId"];
            this.ConnectedPersonTypeName = data["ConnectedPersonTypeName"];
            if (data["Documents"] && data["Documents"].constructor === Array) {
                this.Documents = [];
                for (let item of data["Documents"])
                    this.Documents.push(WorkAdApplicantDocument.fromJS(item));
            }
            if (data["AppliedForWorkItems"] && data["AppliedForWorkItems"].constructor === Array) {
                this.AppliedForWorkItems = [];
                for (let item of data["AppliedForWorkItems"])
                    this.AppliedForWorkItems.push(WorkAdWorkItem.fromJS(item));
            }
            this.SortOrder = data["SortOrder"];
            this.Rating = data["Rating"];
            this.PipeStepId = data["PipeStepId"];
            this.PipeId = data["PipeId"];
            this.WorkAdId = data["WorkAdId"];
            this.AcceptTermsOfServiceId = data["AcceptTermsOfServiceId"];
            this.AcceptPrivacyPolicyId = data["AcceptPrivacyPolicyId"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkAdApplicant {
        let result = new WorkAdApplicant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["Name"] = this.Name;
        data["Email"] = this.Email;
        data["Phone"] = this.Phone;
        data["CellPhone"] = this.CellPhone;
        data["ImageUrl"] = this.ImageUrl;
        data["Description"] = this.Description;
        data["ConnectedPersonId"] = this.ConnectedPersonId;
        data["ConnectedPersonTypeName"] = this.ConnectedPersonTypeName;
        if (this.Documents && this.Documents.constructor === Array) {
            data["Documents"] = [];
            for (let item of this.Documents)
                data["Documents"].push(item.toJSON());
        }
        if (this.AppliedForWorkItems && this.AppliedForWorkItems.constructor === Array) {
            data["AppliedForWorkItems"] = [];
            for (let item of this.AppliedForWorkItems)
                data["AppliedForWorkItems"].push(item.toJSON());
        }
        data["SortOrder"] = this.SortOrder;
        data["Rating"] = this.Rating;
        data["PipeStepId"] = this.PipeStepId;
        data["PipeId"] = this.PipeId;
        data["WorkAdId"] = this.WorkAdId;
        data["AcceptTermsOfServiceId"] = this.AcceptTermsOfServiceId;
        data["AcceptPrivacyPolicyId"] = this.AcceptPrivacyPolicyId;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkAdApplicant {
    id?: string;
    FirstName?: string;
    LastName?: string;
    Name?: string;
    Email?: string;
    Phone?: string;
    CellPhone?: string;
    ImageUrl?: string;
    Description?: string;
    ConnectedPersonId?: string;
    ConnectedPersonTypeName?: string;
    Documents?: WorkAdApplicantDocument[];
    AppliedForWorkItems?: WorkAdWorkItem[];
    SortOrder?: number;
    Rating?: number;
    PipeStepId?: string;
    PipeId?: string;
    WorkAdId?: string;
    AcceptTermsOfServiceId?: string;
    AcceptPrivacyPolicyId?: string;
    Context?: Context;
}

export class WorkAdApplicantDocument implements IWorkAdApplicantDocument {
    Name?: string;
    Url?: string;

    constructor(data?: IWorkAdApplicantDocument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Name = data["Name"];
            this.Url = data["Url"];
        }
    }

    static fromJS(data: any): WorkAdApplicantDocument {
        let result = new WorkAdApplicantDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.Name;
        data["Url"] = this.Url;
        return data;
    }
}

export interface IWorkAdApplicantDocument {
    Name?: string;
    Url?: string;
}

export class SearchWorkItemsModel implements ISearchWorkItemsModel {
    SearchStr?: string;
    FromDate?: Date;
    ToDate?: Date;
    Weeks?: WeekBaseModel[];
    ResponsiblePersonId?: number;
    WorkCompensationMultiplierId?: number;
    EmployerPersonId?: number;
    WorkerPersonId?: number;
    Need?: boolean;
    PreliminiaryBooked?: boolean;
    Booked?: boolean;
    TimeReported?: boolean;
    IsCustomerAttested?: boolean;
    IsAdminAttested?: boolean;
    Finished?: boolean;
    TermsOfPaymentId?: string;
    IsInvoiceCreated?: boolean;
    IsCompensationPayed?: boolean;
    IsInvoicePayed?: boolean;
    ExternalProjectNo?: string;
    CountyCouncil?: string;
    AreaOfExpertise?: string;
    KnowledgeOfMedicalRecordName?: string;
    TagName?: string;
    IsPublic?: boolean;
    TeamId?: string;
    BusinessUnitId?: string;

    constructor(data?: ISearchWorkItemsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SearchStr = data["SearchStr"];
            this.FromDate = data["FromDate"] ? new Date(data["FromDate"].toString()) : <any>undefined;
            this.ToDate = data["ToDate"] ? new Date(data["ToDate"].toString()) : <any>undefined;
            if (data["Weeks"] && data["Weeks"].constructor === Array) {
                this.Weeks = [];
                for (let item of data["Weeks"])
                    this.Weeks.push(WeekBaseModel.fromJS(item));
            }
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.WorkCompensationMultiplierId = data["WorkCompensationMultiplierId"];
            this.EmployerPersonId = data["EmployerPersonId"];
            this.WorkerPersonId = data["WorkerPersonId"];
            this.Need = data["Need"];
            this.PreliminiaryBooked = data["PreliminiaryBooked"];
            this.Booked = data["Booked"];
            this.TimeReported = data["TimeReported"];
            this.IsCustomerAttested = data["IsCustomerAttested"];
            this.IsAdminAttested = data["IsAdminAttested"];
            this.Finished = data["Finished"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.IsInvoiceCreated = data["IsInvoiceCreated"];
            this.IsCompensationPayed = data["IsCompensationPayed"];
            this.IsInvoicePayed = data["IsInvoicePayed"];
            this.ExternalProjectNo = data["ExternalProjectNo"];
            this.CountyCouncil = data["CountyCouncil"];
            this.AreaOfExpertise = data["AreaOfExpertise"];
            this.KnowledgeOfMedicalRecordName = data["KnowledgeOfMedicalRecordName"];
            this.TagName = data["TagName"];
            this.IsPublic = data["IsPublic"];
            this.TeamId = data["TeamId"];
            this.BusinessUnitId = data["BusinessUnitId"];
        }
    }

    static fromJS(data: any): SearchWorkItemsModel {
        let result = new SearchWorkItemsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchStr"] = this.SearchStr;
        data["FromDate"] = this.FromDate ? this.FromDate.toISOString() : <any>undefined;
        data["ToDate"] = this.ToDate ? this.ToDate.toISOString() : <any>undefined;
        if (this.Weeks && this.Weeks.constructor === Array) {
            data["Weeks"] = [];
            for (let item of this.Weeks)
                data["Weeks"].push(item.toJSON());
        }
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["WorkCompensationMultiplierId"] = this.WorkCompensationMultiplierId;
        data["EmployerPersonId"] = this.EmployerPersonId;
        data["WorkerPersonId"] = this.WorkerPersonId;
        data["Need"] = this.Need;
        data["PreliminiaryBooked"] = this.PreliminiaryBooked;
        data["Booked"] = this.Booked;
        data["TimeReported"] = this.TimeReported;
        data["IsCustomerAttested"] = this.IsCustomerAttested;
        data["IsAdminAttested"] = this.IsAdminAttested;
        data["Finished"] = this.Finished;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["IsInvoiceCreated"] = this.IsInvoiceCreated;
        data["IsCompensationPayed"] = this.IsCompensationPayed;
        data["IsInvoicePayed"] = this.IsInvoicePayed;
        data["ExternalProjectNo"] = this.ExternalProjectNo;
        data["CountyCouncil"] = this.CountyCouncil;
        data["AreaOfExpertise"] = this.AreaOfExpertise;
        data["KnowledgeOfMedicalRecordName"] = this.KnowledgeOfMedicalRecordName;
        data["TagName"] = this.TagName;
        data["IsPublic"] = this.IsPublic;
        data["TeamId"] = this.TeamId;
        data["BusinessUnitId"] = this.BusinessUnitId;
        return data;
    }
}

export interface ISearchWorkItemsModel {
    SearchStr?: string;
    FromDate?: Date;
    ToDate?: Date;
    Weeks?: WeekBaseModel[];
    ResponsiblePersonId?: number;
    WorkCompensationMultiplierId?: number;
    EmployerPersonId?: number;
    WorkerPersonId?: number;
    Need?: boolean;
    PreliminiaryBooked?: boolean;
    Booked?: boolean;
    TimeReported?: boolean;
    IsCustomerAttested?: boolean;
    IsAdminAttested?: boolean;
    Finished?: boolean;
    TermsOfPaymentId?: string;
    IsInvoiceCreated?: boolean;
    IsCompensationPayed?: boolean;
    IsInvoicePayed?: boolean;
    ExternalProjectNo?: string;
    CountyCouncil?: string;
    AreaOfExpertise?: string;
    KnowledgeOfMedicalRecordName?: string;
    TagName?: string;
    IsPublic?: boolean;
    TeamId?: string;
    BusinessUnitId?: string;
}

export class WorkItemSerieModel implements IWorkItemSerieModel {
    WorkSerieId?: string;
    EmployerPersonId?: number;
    EmployerName?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    WorkItems?: WorkItem[];

    constructor(data?: IWorkItemSerieModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WorkSerieId = data["WorkSerieId"];
            this.EmployerPersonId = data["EmployerPersonId"];
            this.EmployerName = data["EmployerName"];
            this.EmployerBranchOffice = data["EmployerBranchOffice"];
            this.EmployerDepartment = data["EmployerDepartment"];
            if (data["WorkItems"] && data["WorkItems"].constructor === Array) {
                this.WorkItems = [];
                for (let item of data["WorkItems"])
                    this.WorkItems.push(WorkItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WorkItemSerieModel {
        let result = new WorkItemSerieModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WorkSerieId"] = this.WorkSerieId;
        data["EmployerPersonId"] = this.EmployerPersonId;
        data["EmployerName"] = this.EmployerName;
        data["EmployerBranchOffice"] = this.EmployerBranchOffice;
        data["EmployerDepartment"] = this.EmployerDepartment;
        if (this.WorkItems && this.WorkItems.constructor === Array) {
            data["WorkItems"] = [];
            for (let item of this.WorkItems)
                data["WorkItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWorkItemSerieModel {
    WorkSerieId?: string;
    EmployerPersonId?: number;
    EmployerName?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    WorkItems?: WorkItem[];
}

export class WorkItemDetailsModel implements IWorkItemDetailsModel {
    Description?: string;
    WorkShifts?: WorkShift[];
    TimeGroups?: WorkItemTimeGroup[];
    WeekDatesAsDateStrings?: string[];
    WorkItemId?: number;
    FromDate?: Date;
    ToDate?: Date;
    WeekNr?: number;
    YearNr?: number;
    WeekName?: string;
    TotalQtyTimeReportHours?: number;
    SplitWithPersonId?: number;
    SplitWithName?: string;
    SplitSharePercentage?: number;
    SellingPrice?: number;
    LivingDebiting?: number;
    TravelDebiting?: number;
    OtherDebiting?: number;
    Vat?: number;
    WorkCompensation?: number;
    OtherWorkCompensation?: number;
    LivingCompensation?: number;
    TravelCompensation?: number;
    OtherCompensation?: number;
    OtherCompensationTaxable?: number;
    MileageQty?: number;
    MileagePricePerQty?: number;
    MileageCompensation?: number;
    LivingCost?: number;
    TravelCost?: number;
    CarRentCost?: number;
    OtherCost?: number;
    BenefitTravel?: number;
    BenefitLiving?: number;
    BenefitCarRent?: number;
    BenefitTaxation?: number;
    CarRentModelNumber?: string;
    ServicePensionPercentage?: number;
    ServicePension?: number;
    SalaryExchange?: number;
    IsCompensationPayed?: boolean;
    CompensationPayedDate?: Date;
    CompensationPayedBy?: string;
    IsInvoiceCreated?: boolean;
    InvoiceCreatedDate?: Date;
    InvoiceCreatedBy?: string;
    InvoicePayed?: boolean;
    InvoicePayedDate?: Date;
    InvoiceId?: number;
    ExternalInvoiceId?: string;
    HaveOneOrMoreCandidates?: boolean;
    IsTimeReported?: boolean;
    IsTimeReportedDate?: Date;
    IsTimeReportedBy?: string;
    IsCustomerAttested?: boolean;
    IsCustomerAttestedDate?: Date;
    IsCustomerAttestedBy?: string;
    IsAdminAttested?: boolean;
    IsAdminAttestedDate?: Date;
    IsAdminAttestedBy?: string;
    Finished?: boolean;
    FinishedDate?: Date;
    FinishedBy?: string;
    QtyRelatedDocuments?: number;
    IsCorrectionForWorkItemId?: number;
    WorkCompensationExclVacationCompensation?: number;
    VacationCompensation?: number;
    WorkCompensationInclVacationCompensation?: number;
    TotalCompensation?: number;
    CompensationSocCost?: number;
    BenefitTravelSocCost?: number;
    BenefitLivingSocCost?: number;
    BenefitCarRentSocCost?: number;
    BenefitTaxationSocCost?: number;
    TotalSocialCosts?: number;
    TotalCompensationCostInclSoc?: number;
    SalaryTax?: number;
    TotalOtherCost?: number;
    FullCost?: number;
    WorkDebiting?: number;
    ExtraDebiting?: number;
    TotalDebiting?: number;
    Margin?: number;
    MarginPercentage?: number;
    Amortized?: number;
    IsLockedForChange?: boolean;
    DescriptionInternal?: string;
    ProjectId?: number;
    ProjectName?: string;
    EmployerPersonId?: number;
    EmployerName?: string;
    LocationAddressId?: string;
    LocationAddress?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    EmployerContactPersonId?: string;
    EmployerContactPersonFirstName?: string;
    EmployerContactPersonLastName?: string;
    EmployerEmail?: string;
    EmployerCellPhone?: string;
    EmployerPhone?: string;
    WorkerPersonId?: number;
    WorkerName?: string;
    WorkerCellPhone?: string;
    WorkerPhone?: string;
    WorkerEmail?: string;
    WorkerSocialSecurityNo?: string;
    WorkerAssignedDate?: Date;
    WorkerAssignedBy?: string;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    Public?: boolean;
    AreaOfExpertise?: string;
    CountyCouncilName?: string;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SalaryTaxMultiplier?: number;
    CostCenter?: string;
    WorkerCostCenter?: string;
    ResponsibleCostCenter?: string;
    ExternalProjectNo?: string;
    ManualCompensation?: boolean;
    ManualInvoiceValue?: boolean;
    CreatedDate?: Date;
    CustomerOrderNo?: string;
    KnowledgeOfMedicalRecordName?: string;
    TagNamesJsonStringArray?: string;
    TermsOfPaymentId?: string;
    YourReference?: string;
    DefaultPriceProfileId?: number;
    DefaultPriceProfileName?: string;
    WorkSerieId?: string;
    BusinessUnitId?: string;
    TeamId?: string;
    IsStandByShift?: boolean;
    Context?: Context;

    constructor(data?: IWorkItemDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Description = data["Description"];
            if (data["WorkShifts"] && data["WorkShifts"].constructor === Array) {
                this.WorkShifts = [];
                for (let item of data["WorkShifts"])
                    this.WorkShifts.push(WorkShift.fromJS(item));
            }
            if (data["TimeGroups"] && data["TimeGroups"].constructor === Array) {
                this.TimeGroups = [];
                for (let item of data["TimeGroups"])
                    this.TimeGroups.push(WorkItemTimeGroup.fromJS(item));
            }
            if (data["WeekDatesAsDateStrings"] && data["WeekDatesAsDateStrings"].constructor === Array) {
                this.WeekDatesAsDateStrings = [];
                for (let item of data["WeekDatesAsDateStrings"])
                    this.WeekDatesAsDateStrings.push(item);
            }
            this.WorkItemId = data["WorkItemId"];
            this.FromDate = data["FromDate"] ? new Date(data["FromDate"].toString()) : <any>undefined;
            this.ToDate = data["ToDate"] ? new Date(data["ToDate"].toString()) : <any>undefined;
            this.WeekNr = data["WeekNr"];
            this.YearNr = data["YearNr"];
            this.WeekName = data["WeekName"];
            this.TotalQtyTimeReportHours = data["TotalQtyTimeReportHours"];
            this.SplitWithPersonId = data["SplitWithPersonId"];
            this.SplitWithName = data["SplitWithName"];
            this.SplitSharePercentage = data["SplitSharePercentage"];
            this.SellingPrice = data["SellingPrice"];
            this.LivingDebiting = data["LivingDebiting"];
            this.TravelDebiting = data["TravelDebiting"];
            this.OtherDebiting = data["OtherDebiting"];
            this.Vat = data["Vat"];
            this.WorkCompensation = data["WorkCompensation"];
            this.OtherWorkCompensation = data["OtherWorkCompensation"];
            this.LivingCompensation = data["LivingCompensation"];
            this.TravelCompensation = data["TravelCompensation"];
            this.OtherCompensation = data["OtherCompensation"];
            this.OtherCompensationTaxable = data["OtherCompensationTaxable"];
            this.MileageQty = data["MileageQty"];
            this.MileagePricePerQty = data["MileagePricePerQty"];
            this.MileageCompensation = data["MileageCompensation"];
            this.LivingCost = data["LivingCost"];
            this.TravelCost = data["TravelCost"];
            this.CarRentCost = data["CarRentCost"];
            this.OtherCost = data["OtherCost"];
            this.BenefitTravel = data["BenefitTravel"];
            this.BenefitLiving = data["BenefitLiving"];
            this.BenefitCarRent = data["BenefitCarRent"];
            this.BenefitTaxation = data["BenefitTaxation"];
            this.CarRentModelNumber = data["CarRentModelNumber"];
            this.ServicePensionPercentage = data["ServicePensionPercentage"];
            this.ServicePension = data["ServicePension"];
            this.SalaryExchange = data["SalaryExchange"];
            this.IsCompensationPayed = data["IsCompensationPayed"];
            this.CompensationPayedDate = data["CompensationPayedDate"] ? new Date(data["CompensationPayedDate"].toString()) : <any>undefined;
            this.CompensationPayedBy = data["CompensationPayedBy"];
            this.IsInvoiceCreated = data["IsInvoiceCreated"];
            this.InvoiceCreatedDate = data["InvoiceCreatedDate"] ? new Date(data["InvoiceCreatedDate"].toString()) : <any>undefined;
            this.InvoiceCreatedBy = data["InvoiceCreatedBy"];
            this.InvoicePayed = data["InvoicePayed"];
            this.InvoicePayedDate = data["InvoicePayedDate"] ? new Date(data["InvoicePayedDate"].toString()) : <any>undefined;
            this.InvoiceId = data["InvoiceId"];
            this.ExternalInvoiceId = data["ExternalInvoiceId"];
            this.HaveOneOrMoreCandidates = data["HaveOneOrMoreCandidates"];
            this.IsTimeReported = data["IsTimeReported"];
            this.IsTimeReportedDate = data["IsTimeReportedDate"] ? new Date(data["IsTimeReportedDate"].toString()) : <any>undefined;
            this.IsTimeReportedBy = data["IsTimeReportedBy"];
            this.IsCustomerAttested = data["IsCustomerAttested"];
            this.IsCustomerAttestedDate = data["IsCustomerAttestedDate"] ? new Date(data["IsCustomerAttestedDate"].toString()) : <any>undefined;
            this.IsCustomerAttestedBy = data["IsCustomerAttestedBy"];
            this.IsAdminAttested = data["IsAdminAttested"];
            this.IsAdminAttestedDate = data["IsAdminAttestedDate"] ? new Date(data["IsAdminAttestedDate"].toString()) : <any>undefined;
            this.IsAdminAttestedBy = data["IsAdminAttestedBy"];
            this.Finished = data["Finished"];
            this.FinishedDate = data["FinishedDate"] ? new Date(data["FinishedDate"].toString()) : <any>undefined;
            this.FinishedBy = data["FinishedBy"];
            this.QtyRelatedDocuments = data["QtyRelatedDocuments"];
            this.IsCorrectionForWorkItemId = data["IsCorrectionForWorkItemId"];
            this.WorkCompensationExclVacationCompensation = data["WorkCompensationExclVacationCompensation"];
            this.VacationCompensation = data["VacationCompensation"];
            this.WorkCompensationInclVacationCompensation = data["WorkCompensationInclVacationCompensation"];
            this.TotalCompensation = data["TotalCompensation"];
            this.CompensationSocCost = data["CompensationSocCost"];
            this.BenefitTravelSocCost = data["BenefitTravelSocCost"];
            this.BenefitLivingSocCost = data["BenefitLivingSocCost"];
            this.BenefitCarRentSocCost = data["BenefitCarRentSocCost"];
            this.BenefitTaxationSocCost = data["BenefitTaxationSocCost"];
            this.TotalSocialCosts = data["TotalSocialCosts"];
            this.TotalCompensationCostInclSoc = data["TotalCompensationCostInclSoc"];
            this.SalaryTax = data["SalaryTax"];
            this.TotalOtherCost = data["TotalOtherCost"];
            this.FullCost = data["FullCost"];
            this.WorkDebiting = data["WorkDebiting"];
            this.ExtraDebiting = data["ExtraDebiting"];
            this.TotalDebiting = data["TotalDebiting"];
            this.Margin = data["Margin"];
            this.MarginPercentage = data["MarginPercentage"];
            this.Amortized = data["Amortized"];
            this.IsLockedForChange = data["IsLockedForChange"];
            this.DescriptionInternal = data["DescriptionInternal"];
            this.ProjectId = data["ProjectId"];
            this.ProjectName = data["ProjectName"];
            this.EmployerPersonId = data["EmployerPersonId"];
            this.EmployerName = data["EmployerName"];
            this.LocationAddressId = data["LocationAddressId"];
            this.LocationAddress = data["LocationAddress"];
            this.EmployerBranchOffice = data["EmployerBranchOffice"];
            this.EmployerDepartment = data["EmployerDepartment"];
            this.EmployerContactPersonId = data["EmployerContactPersonId"];
            this.EmployerContactPersonFirstName = data["EmployerContactPersonFirstName"];
            this.EmployerContactPersonLastName = data["EmployerContactPersonLastName"];
            this.EmployerEmail = data["EmployerEmail"];
            this.EmployerCellPhone = data["EmployerCellPhone"];
            this.EmployerPhone = data["EmployerPhone"];
            this.WorkerPersonId = data["WorkerPersonId"];
            this.WorkerName = data["WorkerName"];
            this.WorkerCellPhone = data["WorkerCellPhone"];
            this.WorkerPhone = data["WorkerPhone"];
            this.WorkerEmail = data["WorkerEmail"];
            this.WorkerSocialSecurityNo = data["WorkerSocialSecurityNo"];
            this.WorkerAssignedDate = data["WorkerAssignedDate"] ? new Date(data["WorkerAssignedDate"].toString()) : <any>undefined;
            this.WorkerAssignedBy = data["WorkerAssignedBy"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.ResponsibleName = data["ResponsibleName"];
            this.Public = data["Public"];
            this.AreaOfExpertise = data["AreaOfExpertise"];
            this.CountyCouncilName = data["CountyCouncilName"];
            this.WorkCompensationMultiplierId = data["WorkCompensationMultiplierId"];
            this.WorkCompensationMultiplierValue = data["WorkCompensationMultiplierValue"];
            this.VacationPayMultiplier = data["VacationPayMultiplier"];
            this.SalaryTaxMultiplier = data["SalaryTaxMultiplier"];
            this.CostCenter = data["CostCenter"];
            this.WorkerCostCenter = data["WorkerCostCenter"];
            this.ResponsibleCostCenter = data["ResponsibleCostCenter"];
            this.ExternalProjectNo = data["ExternalProjectNo"];
            this.ManualCompensation = data["ManualCompensation"];
            this.ManualInvoiceValue = data["ManualInvoiceValue"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.CustomerOrderNo = data["CustomerOrderNo"];
            this.KnowledgeOfMedicalRecordName = data["KnowledgeOfMedicalRecordName"];
            this.TagNamesJsonStringArray = data["TagNamesJsonStringArray"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.YourReference = data["YourReference"];
            this.DefaultPriceProfileId = data["DefaultPriceProfileId"];
            this.DefaultPriceProfileName = data["DefaultPriceProfileName"];
            this.WorkSerieId = data["WorkSerieId"];
            this.BusinessUnitId = data["BusinessUnitId"];
            this.TeamId = data["TeamId"];
            this.IsStandByShift = data["IsStandByShift"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkItemDetailsModel {
        let result = new WorkItemDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.Description;
        if (this.WorkShifts && this.WorkShifts.constructor === Array) {
            data["WorkShifts"] = [];
            for (let item of this.WorkShifts)
                data["WorkShifts"].push(item.toJSON());
        }
        if (this.TimeGroups && this.TimeGroups.constructor === Array) {
            data["TimeGroups"] = [];
            for (let item of this.TimeGroups)
                data["TimeGroups"].push(item.toJSON());
        }
        if (this.WeekDatesAsDateStrings && this.WeekDatesAsDateStrings.constructor === Array) {
            data["WeekDatesAsDateStrings"] = [];
            for (let item of this.WeekDatesAsDateStrings)
                data["WeekDatesAsDateStrings"].push(item);
        }
        data["WorkItemId"] = this.WorkItemId;
        data["FromDate"] = this.FromDate ? this.FromDate.toISOString() : <any>undefined;
        data["ToDate"] = this.ToDate ? this.ToDate.toISOString() : <any>undefined;
        data["WeekNr"] = this.WeekNr;
        data["YearNr"] = this.YearNr;
        data["WeekName"] = this.WeekName;
        data["TotalQtyTimeReportHours"] = this.TotalQtyTimeReportHours;
        data["SplitWithPersonId"] = this.SplitWithPersonId;
        data["SplitWithName"] = this.SplitWithName;
        data["SplitSharePercentage"] = this.SplitSharePercentage;
        data["SellingPrice"] = this.SellingPrice;
        data["LivingDebiting"] = this.LivingDebiting;
        data["TravelDebiting"] = this.TravelDebiting;
        data["OtherDebiting"] = this.OtherDebiting;
        data["Vat"] = this.Vat;
        data["WorkCompensation"] = this.WorkCompensation;
        data["OtherWorkCompensation"] = this.OtherWorkCompensation;
        data["LivingCompensation"] = this.LivingCompensation;
        data["TravelCompensation"] = this.TravelCompensation;
        data["OtherCompensation"] = this.OtherCompensation;
        data["OtherCompensationTaxable"] = this.OtherCompensationTaxable;
        data["MileageQty"] = this.MileageQty;
        data["MileagePricePerQty"] = this.MileagePricePerQty;
        data["MileageCompensation"] = this.MileageCompensation;
        data["LivingCost"] = this.LivingCost;
        data["TravelCost"] = this.TravelCost;
        data["CarRentCost"] = this.CarRentCost;
        data["OtherCost"] = this.OtherCost;
        data["BenefitTravel"] = this.BenefitTravel;
        data["BenefitLiving"] = this.BenefitLiving;
        data["BenefitCarRent"] = this.BenefitCarRent;
        data["BenefitTaxation"] = this.BenefitTaxation;
        data["CarRentModelNumber"] = this.CarRentModelNumber;
        data["ServicePensionPercentage"] = this.ServicePensionPercentage;
        data["ServicePension"] = this.ServicePension;
        data["SalaryExchange"] = this.SalaryExchange;
        data["IsCompensationPayed"] = this.IsCompensationPayed;
        data["CompensationPayedDate"] = this.CompensationPayedDate ? this.CompensationPayedDate.toISOString() : <any>undefined;
        data["CompensationPayedBy"] = this.CompensationPayedBy;
        data["IsInvoiceCreated"] = this.IsInvoiceCreated;
        data["InvoiceCreatedDate"] = this.InvoiceCreatedDate ? this.InvoiceCreatedDate.toISOString() : <any>undefined;
        data["InvoiceCreatedBy"] = this.InvoiceCreatedBy;
        data["InvoicePayed"] = this.InvoicePayed;
        data["InvoicePayedDate"] = this.InvoicePayedDate ? this.InvoicePayedDate.toISOString() : <any>undefined;
        data["InvoiceId"] = this.InvoiceId;
        data["ExternalInvoiceId"] = this.ExternalInvoiceId;
        data["HaveOneOrMoreCandidates"] = this.HaveOneOrMoreCandidates;
        data["IsTimeReported"] = this.IsTimeReported;
        data["IsTimeReportedDate"] = this.IsTimeReportedDate ? this.IsTimeReportedDate.toISOString() : <any>undefined;
        data["IsTimeReportedBy"] = this.IsTimeReportedBy;
        data["IsCustomerAttested"] = this.IsCustomerAttested;
        data["IsCustomerAttestedDate"] = this.IsCustomerAttestedDate ? this.IsCustomerAttestedDate.toISOString() : <any>undefined;
        data["IsCustomerAttestedBy"] = this.IsCustomerAttestedBy;
        data["IsAdminAttested"] = this.IsAdminAttested;
        data["IsAdminAttestedDate"] = this.IsAdminAttestedDate ? this.IsAdminAttestedDate.toISOString() : <any>undefined;
        data["IsAdminAttestedBy"] = this.IsAdminAttestedBy;
        data["Finished"] = this.Finished;
        data["FinishedDate"] = this.FinishedDate ? this.FinishedDate.toISOString() : <any>undefined;
        data["FinishedBy"] = this.FinishedBy;
        data["QtyRelatedDocuments"] = this.QtyRelatedDocuments;
        data["IsCorrectionForWorkItemId"] = this.IsCorrectionForWorkItemId;
        data["WorkCompensationExclVacationCompensation"] = this.WorkCompensationExclVacationCompensation;
        data["VacationCompensation"] = this.VacationCompensation;
        data["WorkCompensationInclVacationCompensation"] = this.WorkCompensationInclVacationCompensation;
        data["TotalCompensation"] = this.TotalCompensation;
        data["CompensationSocCost"] = this.CompensationSocCost;
        data["BenefitTravelSocCost"] = this.BenefitTravelSocCost;
        data["BenefitLivingSocCost"] = this.BenefitLivingSocCost;
        data["BenefitCarRentSocCost"] = this.BenefitCarRentSocCost;
        data["BenefitTaxationSocCost"] = this.BenefitTaxationSocCost;
        data["TotalSocialCosts"] = this.TotalSocialCosts;
        data["TotalCompensationCostInclSoc"] = this.TotalCompensationCostInclSoc;
        data["SalaryTax"] = this.SalaryTax;
        data["TotalOtherCost"] = this.TotalOtherCost;
        data["FullCost"] = this.FullCost;
        data["WorkDebiting"] = this.WorkDebiting;
        data["ExtraDebiting"] = this.ExtraDebiting;
        data["TotalDebiting"] = this.TotalDebiting;
        data["Margin"] = this.Margin;
        data["MarginPercentage"] = this.MarginPercentage;
        data["Amortized"] = this.Amortized;
        data["IsLockedForChange"] = this.IsLockedForChange;
        data["DescriptionInternal"] = this.DescriptionInternal;
        data["ProjectId"] = this.ProjectId;
        data["ProjectName"] = this.ProjectName;
        data["EmployerPersonId"] = this.EmployerPersonId;
        data["EmployerName"] = this.EmployerName;
        data["LocationAddressId"] = this.LocationAddressId;
        data["LocationAddress"] = this.LocationAddress;
        data["EmployerBranchOffice"] = this.EmployerBranchOffice;
        data["EmployerDepartment"] = this.EmployerDepartment;
        data["EmployerContactPersonId"] = this.EmployerContactPersonId;
        data["EmployerContactPersonFirstName"] = this.EmployerContactPersonFirstName;
        data["EmployerContactPersonLastName"] = this.EmployerContactPersonLastName;
        data["EmployerEmail"] = this.EmployerEmail;
        data["EmployerCellPhone"] = this.EmployerCellPhone;
        data["EmployerPhone"] = this.EmployerPhone;
        data["WorkerPersonId"] = this.WorkerPersonId;
        data["WorkerName"] = this.WorkerName;
        data["WorkerCellPhone"] = this.WorkerCellPhone;
        data["WorkerPhone"] = this.WorkerPhone;
        data["WorkerEmail"] = this.WorkerEmail;
        data["WorkerSocialSecurityNo"] = this.WorkerSocialSecurityNo;
        data["WorkerAssignedDate"] = this.WorkerAssignedDate ? this.WorkerAssignedDate.toISOString() : <any>undefined;
        data["WorkerAssignedBy"] = this.WorkerAssignedBy;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["ResponsibleName"] = this.ResponsibleName;
        data["Public"] = this.Public;
        data["AreaOfExpertise"] = this.AreaOfExpertise;
        data["CountyCouncilName"] = this.CountyCouncilName;
        data["WorkCompensationMultiplierId"] = this.WorkCompensationMultiplierId;
        data["WorkCompensationMultiplierValue"] = this.WorkCompensationMultiplierValue;
        data["VacationPayMultiplier"] = this.VacationPayMultiplier;
        data["SalaryTaxMultiplier"] = this.SalaryTaxMultiplier;
        data["CostCenter"] = this.CostCenter;
        data["WorkerCostCenter"] = this.WorkerCostCenter;
        data["ResponsibleCostCenter"] = this.ResponsibleCostCenter;
        data["ExternalProjectNo"] = this.ExternalProjectNo;
        data["ManualCompensation"] = this.ManualCompensation;
        data["ManualInvoiceValue"] = this.ManualInvoiceValue;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["CustomerOrderNo"] = this.CustomerOrderNo;
        data["KnowledgeOfMedicalRecordName"] = this.KnowledgeOfMedicalRecordName;
        data["TagNamesJsonStringArray"] = this.TagNamesJsonStringArray;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["YourReference"] = this.YourReference;
        data["DefaultPriceProfileId"] = this.DefaultPriceProfileId;
        data["DefaultPriceProfileName"] = this.DefaultPriceProfileName;
        data["WorkSerieId"] = this.WorkSerieId;
        data["BusinessUnitId"] = this.BusinessUnitId;
        data["TeamId"] = this.TeamId;
        data["IsStandByShift"] = this.IsStandByShift;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkItemDetailsModel {
    Description?: string;
    WorkShifts?: WorkShift[];
    TimeGroups?: WorkItemTimeGroup[];
    WeekDatesAsDateStrings?: string[];
    WorkItemId?: number;
    FromDate?: Date;
    ToDate?: Date;
    WeekNr?: number;
    YearNr?: number;
    WeekName?: string;
    TotalQtyTimeReportHours?: number;
    SplitWithPersonId?: number;
    SplitWithName?: string;
    SplitSharePercentage?: number;
    SellingPrice?: number;
    LivingDebiting?: number;
    TravelDebiting?: number;
    OtherDebiting?: number;
    Vat?: number;
    WorkCompensation?: number;
    OtherWorkCompensation?: number;
    LivingCompensation?: number;
    TravelCompensation?: number;
    OtherCompensation?: number;
    OtherCompensationTaxable?: number;
    MileageQty?: number;
    MileagePricePerQty?: number;
    MileageCompensation?: number;
    LivingCost?: number;
    TravelCost?: number;
    CarRentCost?: number;
    OtherCost?: number;
    BenefitTravel?: number;
    BenefitLiving?: number;
    BenefitCarRent?: number;
    BenefitTaxation?: number;
    CarRentModelNumber?: string;
    ServicePensionPercentage?: number;
    ServicePension?: number;
    SalaryExchange?: number;
    IsCompensationPayed?: boolean;
    CompensationPayedDate?: Date;
    CompensationPayedBy?: string;
    IsInvoiceCreated?: boolean;
    InvoiceCreatedDate?: Date;
    InvoiceCreatedBy?: string;
    InvoicePayed?: boolean;
    InvoicePayedDate?: Date;
    InvoiceId?: number;
    ExternalInvoiceId?: string;
    HaveOneOrMoreCandidates?: boolean;
    IsTimeReported?: boolean;
    IsTimeReportedDate?: Date;
    IsTimeReportedBy?: string;
    IsCustomerAttested?: boolean;
    IsCustomerAttestedDate?: Date;
    IsCustomerAttestedBy?: string;
    IsAdminAttested?: boolean;
    IsAdminAttestedDate?: Date;
    IsAdminAttestedBy?: string;
    Finished?: boolean;
    FinishedDate?: Date;
    FinishedBy?: string;
    QtyRelatedDocuments?: number;
    IsCorrectionForWorkItemId?: number;
    WorkCompensationExclVacationCompensation?: number;
    VacationCompensation?: number;
    WorkCompensationInclVacationCompensation?: number;
    TotalCompensation?: number;
    CompensationSocCost?: number;
    BenefitTravelSocCost?: number;
    BenefitLivingSocCost?: number;
    BenefitCarRentSocCost?: number;
    BenefitTaxationSocCost?: number;
    TotalSocialCosts?: number;
    TotalCompensationCostInclSoc?: number;
    SalaryTax?: number;
    TotalOtherCost?: number;
    FullCost?: number;
    WorkDebiting?: number;
    ExtraDebiting?: number;
    TotalDebiting?: number;
    Margin?: number;
    MarginPercentage?: number;
    Amortized?: number;
    IsLockedForChange?: boolean;
    DescriptionInternal?: string;
    ProjectId?: number;
    ProjectName?: string;
    EmployerPersonId?: number;
    EmployerName?: string;
    LocationAddressId?: string;
    LocationAddress?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    EmployerContactPersonId?: string;
    EmployerContactPersonFirstName?: string;
    EmployerContactPersonLastName?: string;
    EmployerEmail?: string;
    EmployerCellPhone?: string;
    EmployerPhone?: string;
    WorkerPersonId?: number;
    WorkerName?: string;
    WorkerCellPhone?: string;
    WorkerPhone?: string;
    WorkerEmail?: string;
    WorkerSocialSecurityNo?: string;
    WorkerAssignedDate?: Date;
    WorkerAssignedBy?: string;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    Public?: boolean;
    AreaOfExpertise?: string;
    CountyCouncilName?: string;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SalaryTaxMultiplier?: number;
    CostCenter?: string;
    WorkerCostCenter?: string;
    ResponsibleCostCenter?: string;
    ExternalProjectNo?: string;
    ManualCompensation?: boolean;
    ManualInvoiceValue?: boolean;
    CreatedDate?: Date;
    CustomerOrderNo?: string;
    KnowledgeOfMedicalRecordName?: string;
    TagNamesJsonStringArray?: string;
    TermsOfPaymentId?: string;
    YourReference?: string;
    DefaultPriceProfileId?: number;
    DefaultPriceProfileName?: string;
    WorkSerieId?: string;
    BusinessUnitId?: string;
    TeamId?: string;
    IsStandByShift?: boolean;
    Context?: Context;
}

export class WorkItemTimeGroup implements IWorkItemTimeGroup {
    WorkItemTimeGroupId?: number;
    WorkItemId?: number;
    SortOrder?: number;
    FromDefaultPriceProfileTimeGroupId?: number;
    TimeEntries?: TimeEntry[];
    Name?: string;
    SellingPriceIsFactorToStandard?: boolean;
    SellingPriceFactorMultiplier?: number;
    SellingPrice?: number;
    Vat?: number;
    SalaryIsFactorToStandard?: boolean;
    SalaryFactorMultiplier?: number;
    Salary?: number;
    CurrencyId?: string;
    Uom?: string;
    DefaultTimeGroup?: boolean;
    MaxWeekPlanningQtyHours?: number;
    IsStandByTimeGroup?: boolean;
    FromTime?: string;
    ToTime?: string;
    SellingPriceInclVat?: number;
    ArticleNo?: string;
    WageTypeCodeNo?: string;
    SaleAccount?: string;
    CostCenter?: string;
    NoVacationPayCalculation?: boolean;
    NoPensionPayCalculation?: boolean;
    IsAutoCalculatedTimeGroup?: boolean;
    Context?: Context;

    constructor(data?: IWorkItemTimeGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WorkItemTimeGroupId = data["WorkItemTimeGroupId"];
            this.WorkItemId = data["WorkItemId"];
            this.SortOrder = data["SortOrder"];
            this.FromDefaultPriceProfileTimeGroupId = data["FromDefaultPriceProfileTimeGroupId"];
            if (data["TimeEntries"] && data["TimeEntries"].constructor === Array) {
                this.TimeEntries = [];
                for (let item of data["TimeEntries"])
                    this.TimeEntries.push(TimeEntry.fromJS(item));
            }
            this.Name = data["Name"];
            this.SellingPriceIsFactorToStandard = data["SellingPriceIsFactorToStandard"];
            this.SellingPriceFactorMultiplier = data["SellingPriceFactorMultiplier"];
            this.SellingPrice = data["SellingPrice"];
            this.Vat = data["Vat"];
            this.SalaryIsFactorToStandard = data["SalaryIsFactorToStandard"];
            this.SalaryFactorMultiplier = data["SalaryFactorMultiplier"];
            this.Salary = data["Salary"];
            this.CurrencyId = data["CurrencyId"];
            this.Uom = data["Uom"];
            this.DefaultTimeGroup = data["DefaultTimeGroup"];
            this.MaxWeekPlanningQtyHours = data["MaxWeekPlanningQtyHours"];
            this.IsStandByTimeGroup = data["IsStandByTimeGroup"];
            this.FromTime = data["FromTime"];
            this.ToTime = data["ToTime"];
            this.SellingPriceInclVat = data["SellingPriceInclVat"];
            this.ArticleNo = data["ArticleNo"];
            this.WageTypeCodeNo = data["WageTypeCodeNo"];
            this.SaleAccount = data["SaleAccount"];
            this.CostCenter = data["CostCenter"];
            this.NoVacationPayCalculation = data["NoVacationPayCalculation"];
            this.NoPensionPayCalculation = data["NoPensionPayCalculation"];
            this.IsAutoCalculatedTimeGroup = data["IsAutoCalculatedTimeGroup"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkItemTimeGroup {
        let result = new WorkItemTimeGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WorkItemTimeGroupId"] = this.WorkItemTimeGroupId;
        data["WorkItemId"] = this.WorkItemId;
        data["SortOrder"] = this.SortOrder;
        data["FromDefaultPriceProfileTimeGroupId"] = this.FromDefaultPriceProfileTimeGroupId;
        if (this.TimeEntries && this.TimeEntries.constructor === Array) {
            data["TimeEntries"] = [];
            for (let item of this.TimeEntries)
                data["TimeEntries"].push(item.toJSON());
        }
        data["Name"] = this.Name;
        data["SellingPriceIsFactorToStandard"] = this.SellingPriceIsFactorToStandard;
        data["SellingPriceFactorMultiplier"] = this.SellingPriceFactorMultiplier;
        data["SellingPrice"] = this.SellingPrice;
        data["Vat"] = this.Vat;
        data["SalaryIsFactorToStandard"] = this.SalaryIsFactorToStandard;
        data["SalaryFactorMultiplier"] = this.SalaryFactorMultiplier;
        data["Salary"] = this.Salary;
        data["CurrencyId"] = this.CurrencyId;
        data["Uom"] = this.Uom;
        data["DefaultTimeGroup"] = this.DefaultTimeGroup;
        data["MaxWeekPlanningQtyHours"] = this.MaxWeekPlanningQtyHours;
        data["IsStandByTimeGroup"] = this.IsStandByTimeGroup;
        data["FromTime"] = this.FromTime;
        data["ToTime"] = this.ToTime;
        data["SellingPriceInclVat"] = this.SellingPriceInclVat;
        data["ArticleNo"] = this.ArticleNo;
        data["WageTypeCodeNo"] = this.WageTypeCodeNo;
        data["SaleAccount"] = this.SaleAccount;
        data["CostCenter"] = this.CostCenter;
        data["NoVacationPayCalculation"] = this.NoVacationPayCalculation;
        data["NoPensionPayCalculation"] = this.NoPensionPayCalculation;
        data["IsAutoCalculatedTimeGroup"] = this.IsAutoCalculatedTimeGroup;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkItemTimeGroup {
    WorkItemTimeGroupId?: number;
    WorkItemId?: number;
    SortOrder?: number;
    FromDefaultPriceProfileTimeGroupId?: number;
    TimeEntries?: TimeEntry[];
    Name?: string;
    SellingPriceIsFactorToStandard?: boolean;
    SellingPriceFactorMultiplier?: number;
    SellingPrice?: number;
    Vat?: number;
    SalaryIsFactorToStandard?: boolean;
    SalaryFactorMultiplier?: number;
    Salary?: number;
    CurrencyId?: string;
    Uom?: string;
    DefaultTimeGroup?: boolean;
    MaxWeekPlanningQtyHours?: number;
    IsStandByTimeGroup?: boolean;
    FromTime?: string;
    ToTime?: string;
    SellingPriceInclVat?: number;
    ArticleNo?: string;
    WageTypeCodeNo?: string;
    SaleAccount?: string;
    CostCenter?: string;
    NoVacationPayCalculation?: boolean;
    NoPensionPayCalculation?: boolean;
    IsAutoCalculatedTimeGroup?: boolean;
    Context?: Context;
}

export class TimeEntry implements ITimeEntry {
    TimeEntryId?: number;
    Description?: string;
    ProjectId?: number;
    WorkItemId?: number;
    WorkItemTimeGroupId?: number;
    PersonId?: number;
    InvoiceId?: number;
    ConfirmedBy?: number;
    ProjectName?: string;
    ClientName?: string;
    PersonName?: string;
    SumValueExclVat?: number;
    Date?: Date;
    StartTime?: Date;
    EndTime?: Date;
    Hours?: number;
    Minutes?: number;
    Seconds?: number;
    TimeIsRunning?: boolean;
    Project?: Project;
    Uom?: string;
    BuyPrice?: number;
    SellingPrice?: number;
    CurrencyId?: string;
    Vat?: number;
    DayOfWeek?: number;
    Qty?: number;
    Context?: Context;

    constructor(data?: ITimeEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.TimeEntryId = data["TimeEntryId"];
            this.Description = data["Description"];
            this.ProjectId = data["ProjectId"];
            this.WorkItemId = data["WorkItemId"];
            this.WorkItemTimeGroupId = data["WorkItemTimeGroupId"];
            this.PersonId = data["PersonId"];
            this.InvoiceId = data["InvoiceId"];
            this.ConfirmedBy = data["ConfirmedBy"];
            this.ProjectName = data["ProjectName"];
            this.ClientName = data["ClientName"];
            this.PersonName = data["PersonName"];
            this.SumValueExclVat = data["SumValueExclVat"];
            this.Date = data["Date"] ? new Date(data["Date"].toString()) : <any>undefined;
            this.StartTime = data["StartTime"] ? new Date(data["StartTime"].toString()) : <any>undefined;
            this.EndTime = data["EndTime"] ? new Date(data["EndTime"].toString()) : <any>undefined;
            this.Hours = data["Hours"];
            this.Minutes = data["Minutes"];
            this.Seconds = data["Seconds"];
            this.TimeIsRunning = data["TimeIsRunning"];
            this.Project = data["Project"] ? Project.fromJS(data["Project"]) : <any>undefined;
            this.Uom = data["Uom"];
            this.BuyPrice = data["BuyPrice"];
            this.SellingPrice = data["SellingPrice"];
            this.CurrencyId = data["CurrencyId"];
            this.Vat = data["Vat"];
            this.DayOfWeek = data["DayOfWeek"];
            this.Qty = data["Qty"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TimeEntry {
        let result = new TimeEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TimeEntryId"] = this.TimeEntryId;
        data["Description"] = this.Description;
        data["ProjectId"] = this.ProjectId;
        data["WorkItemId"] = this.WorkItemId;
        data["WorkItemTimeGroupId"] = this.WorkItemTimeGroupId;
        data["PersonId"] = this.PersonId;
        data["InvoiceId"] = this.InvoiceId;
        data["ConfirmedBy"] = this.ConfirmedBy;
        data["ProjectName"] = this.ProjectName;
        data["ClientName"] = this.ClientName;
        data["PersonName"] = this.PersonName;
        data["SumValueExclVat"] = this.SumValueExclVat;
        data["Date"] = this.Date ? this.Date.toISOString() : <any>undefined;
        data["StartTime"] = this.StartTime ? this.StartTime.toISOString() : <any>undefined;
        data["EndTime"] = this.EndTime ? this.EndTime.toISOString() : <any>undefined;
        data["Hours"] = this.Hours;
        data["Minutes"] = this.Minutes;
        data["Seconds"] = this.Seconds;
        data["TimeIsRunning"] = this.TimeIsRunning;
        data["Project"] = this.Project ? this.Project.toJSON() : <any>undefined;
        data["Uom"] = this.Uom;
        data["BuyPrice"] = this.BuyPrice;
        data["SellingPrice"] = this.SellingPrice;
        data["CurrencyId"] = this.CurrencyId;
        data["Vat"] = this.Vat;
        data["DayOfWeek"] = this.DayOfWeek;
        data["Qty"] = this.Qty;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITimeEntry {
    TimeEntryId?: number;
    Description?: string;
    ProjectId?: number;
    WorkItemId?: number;
    WorkItemTimeGroupId?: number;
    PersonId?: number;
    InvoiceId?: number;
    ConfirmedBy?: number;
    ProjectName?: string;
    ClientName?: string;
    PersonName?: string;
    SumValueExclVat?: number;
    Date?: Date;
    StartTime?: Date;
    EndTime?: Date;
    Hours?: number;
    Minutes?: number;
    Seconds?: number;
    TimeIsRunning?: boolean;
    Project?: Project;
    Uom?: string;
    BuyPrice?: number;
    SellingPrice?: number;
    CurrencyId?: string;
    Vat?: number;
    DayOfWeek?: number;
    Qty?: number;
    Context?: Context;
}

export class Project implements IProject {
    ProjectId?: number;
    Name?: string;
    PersonId?: number;
    Description?: string;
    InternalDescription?: string;
    StartDate?: Date;
    EndDate?: Date;
    UpdatePersonAutomatic?: boolean;
    TermsOfPaymentId?: string;
    LanguageId?: string;
    CountryId?: string;
    CurrencyId?: string;
    CreateInvoiceAutomaticly?: boolean;
    CreateInvoiceMonthDay?: number;
    CreateInvoiceLimitValue?: number;
    IsProjectTemplate?: boolean;
    ProjectOpenForAll?: boolean;
    SellingPriceOpenEditable?: boolean;
    ClientName?: string;
    ReportedHours?: number;
    PlannedHours?: number;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    CreatedBy?: number;
    UpdatedBy?: number;
    TimeEntrySpecs?: TimeEntrySpec[];
    Context?: Context;

    constructor(data?: IProject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ProjectId = data["ProjectId"];
            this.Name = data["Name"];
            this.PersonId = data["PersonId"];
            this.Description = data["Description"];
            this.InternalDescription = data["InternalDescription"];
            this.StartDate = data["StartDate"] ? new Date(data["StartDate"].toString()) : <any>undefined;
            this.EndDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.UpdatePersonAutomatic = data["UpdatePersonAutomatic"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.LanguageId = data["LanguageId"];
            this.CountryId = data["CountryId"];
            this.CurrencyId = data["CurrencyId"];
            this.CreateInvoiceAutomaticly = data["CreateInvoiceAutomaticly"];
            this.CreateInvoiceMonthDay = data["CreateInvoiceMonthDay"];
            this.CreateInvoiceLimitValue = data["CreateInvoiceLimitValue"];
            this.IsProjectTemplate = data["IsProjectTemplate"];
            this.ProjectOpenForAll = data["ProjectOpenForAll"];
            this.SellingPriceOpenEditable = data["SellingPriceOpenEditable"];
            this.ClientName = data["ClientName"];
            this.ReportedHours = data["ReportedHours"];
            this.PlannedHours = data["PlannedHours"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.UpdatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>undefined;
            this.CreatedBy = data["CreatedBy"];
            this.UpdatedBy = data["UpdatedBy"];
            if (data["TimeEntrySpecs"] && data["TimeEntrySpecs"].constructor === Array) {
                this.TimeEntrySpecs = [];
                for (let item of data["TimeEntrySpecs"])
                    this.TimeEntrySpecs.push(TimeEntrySpec.fromJS(item));
            }
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Project {
        let result = new Project();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProjectId"] = this.ProjectId;
        data["Name"] = this.Name;
        data["PersonId"] = this.PersonId;
        data["Description"] = this.Description;
        data["InternalDescription"] = this.InternalDescription;
        data["StartDate"] = this.StartDate ? this.StartDate.toISOString() : <any>undefined;
        data["EndDate"] = this.EndDate ? this.EndDate.toISOString() : <any>undefined;
        data["UpdatePersonAutomatic"] = this.UpdatePersonAutomatic;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["LanguageId"] = this.LanguageId;
        data["CountryId"] = this.CountryId;
        data["CurrencyId"] = this.CurrencyId;
        data["CreateInvoiceAutomaticly"] = this.CreateInvoiceAutomaticly;
        data["CreateInvoiceMonthDay"] = this.CreateInvoiceMonthDay;
        data["CreateInvoiceLimitValue"] = this.CreateInvoiceLimitValue;
        data["IsProjectTemplate"] = this.IsProjectTemplate;
        data["ProjectOpenForAll"] = this.ProjectOpenForAll;
        data["SellingPriceOpenEditable"] = this.SellingPriceOpenEditable;
        data["ClientName"] = this.ClientName;
        data["ReportedHours"] = this.ReportedHours;
        data["PlannedHours"] = this.PlannedHours;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["UpdatedDate"] = this.UpdatedDate ? this.UpdatedDate.toISOString() : <any>undefined;
        data["CreatedBy"] = this.CreatedBy;
        data["UpdatedBy"] = this.UpdatedBy;
        if (this.TimeEntrySpecs && this.TimeEntrySpecs.constructor === Array) {
            data["TimeEntrySpecs"] = [];
            for (let item of this.TimeEntrySpecs)
                data["TimeEntrySpecs"].push(item.toJSON());
        }
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProject {
    ProjectId?: number;
    Name?: string;
    PersonId?: number;
    Description?: string;
    InternalDescription?: string;
    StartDate?: Date;
    EndDate?: Date;
    UpdatePersonAutomatic?: boolean;
    TermsOfPaymentId?: string;
    LanguageId?: string;
    CountryId?: string;
    CurrencyId?: string;
    CreateInvoiceAutomaticly?: boolean;
    CreateInvoiceMonthDay?: number;
    CreateInvoiceLimitValue?: number;
    IsProjectTemplate?: boolean;
    ProjectOpenForAll?: boolean;
    SellingPriceOpenEditable?: boolean;
    ClientName?: string;
    ReportedHours?: number;
    PlannedHours?: number;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    CreatedBy?: number;
    UpdatedBy?: number;
    TimeEntrySpecs?: TimeEntrySpec[];
    Context?: Context;
}

export class TimeEntrySpec implements ITimeEntrySpec {
    TimeEntrySpecId?: number;
    Description?: string;
    Qty?: number;
    FromDate?: Date;
    ToDate?: Date;
    WeekNr?: number;
    LocationAddress?: string;
    SellingPrice?: number;
    Salary?: number;
    ProjectId?: number;
    RequiredQtyPersons?: number;
    AccomplishedQtyPersons?: number;
    Public?: boolean;
    Context?: Context;

    constructor(data?: ITimeEntrySpec) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.TimeEntrySpecId = data["TimeEntrySpecId"];
            this.Description = data["Description"];
            this.Qty = data["Qty"];
            this.FromDate = data["FromDate"] ? new Date(data["FromDate"].toString()) : <any>undefined;
            this.ToDate = data["ToDate"] ? new Date(data["ToDate"].toString()) : <any>undefined;
            this.WeekNr = data["WeekNr"];
            this.LocationAddress = data["LocationAddress"];
            this.SellingPrice = data["SellingPrice"];
            this.Salary = data["Salary"];
            this.ProjectId = data["ProjectId"];
            this.RequiredQtyPersons = data["RequiredQtyPersons"];
            this.AccomplishedQtyPersons = data["AccomplishedQtyPersons"];
            this.Public = data["Public"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TimeEntrySpec {
        let result = new TimeEntrySpec();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TimeEntrySpecId"] = this.TimeEntrySpecId;
        data["Description"] = this.Description;
        data["Qty"] = this.Qty;
        data["FromDate"] = this.FromDate ? this.FromDate.toISOString() : <any>undefined;
        data["ToDate"] = this.ToDate ? this.ToDate.toISOString() : <any>undefined;
        data["WeekNr"] = this.WeekNr;
        data["LocationAddress"] = this.LocationAddress;
        data["SellingPrice"] = this.SellingPrice;
        data["Salary"] = this.Salary;
        data["ProjectId"] = this.ProjectId;
        data["RequiredQtyPersons"] = this.RequiredQtyPersons;
        data["AccomplishedQtyPersons"] = this.AccomplishedQtyPersons;
        data["Public"] = this.Public;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITimeEntrySpec {
    TimeEntrySpecId?: number;
    Description?: string;
    Qty?: number;
    FromDate?: Date;
    ToDate?: Date;
    WeekNr?: number;
    LocationAddress?: string;
    SellingPrice?: number;
    Salary?: number;
    ProjectId?: number;
    RequiredQtyPersons?: number;
    AccomplishedQtyPersons?: number;
    Public?: boolean;
    Context?: Context;
}

export class CreateWorkModel implements ICreateWorkModel {
    Weeks?: WeekBaseModel[];
    Days?: WeekDayTimeModel[];
    TimeGroups?: CreateWorkItemTimeGroup[];
    IsTimeReported?: boolean;
    Description?: string;
    SplitWithPersonId?: number;
    SplitWithName?: string;
    SplitSharePercentage?: number;
    SellingPrice?: number;
    LivingDebiting?: number;
    TravelDebiting?: number;
    OtherDebiting?: number;
    Vat?: number;
    WorkCompensation?: number;
    OtherWorkCompensation?: number;
    LivingCompensation?: number;
    TravelCompensation?: number;
    OtherCompensation?: number;
    OtherCompensationTaxable?: number;
    MileageQty?: number;
    MileagePricePerQty?: number;
    MileageCompensation?: number;
    LivingCost?: number;
    TravelCost?: number;
    CarRentCost?: number;
    OtherCost?: number;
    BenefitTravel?: number;
    BenefitLiving?: number;
    BenefitCarRent?: number;
    BenefitTaxation?: number;
    CarRentModelNumber?: string;
    ServicePensionPercentage?: number;
    ServicePension?: number;
    SalaryExchange?: number;
    WorkCompensationExclVacationCompensation?: number;
    VacationCompensation?: number;
    WorkCompensationInclVacationCompensation?: number;
    TotalCompensation?: number;
    CompensationSocCost?: number;
    BenefitTravelSocCost?: number;
    BenefitLivingSocCost?: number;
    BenefitCarRentSocCost?: number;
    BenefitTaxationSocCost?: number;
    TotalSocialCosts?: number;
    TotalCompensationCostInclSoc?: number;
    SalaryTax?: number;
    TotalOtherCost?: number;
    FullCost?: number;
    WorkDebiting?: number;
    ExtraDebiting?: number;
    TotalDebiting?: number;
    Margin?: number;
    MarginPercentage?: number;
    Amortized?: number;
    CreateForWorkItem?: boolean;
    DescriptionInternal?: string;
    ProjectId?: number;
    ProjectName?: string;
    EmployerPersonId?: number;
    EmployerName?: string;
    LocationAddressId?: string;
    LocationAddress?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    EmployerContactPersonId?: string;
    EmployerContactPersonFirstName?: string;
    EmployerContactPersonLastName?: string;
    EmployerEmail?: string;
    EmployerCellPhone?: string;
    EmployerPhone?: string;
    WorkerPersonId?: number;
    WorkerName?: string;
    WorkerCellPhone?: string;
    WorkerPhone?: string;
    WorkerEmail?: string;
    WorkerSocialSecurityNo?: string;
    WorkerAssignedDate?: Date;
    WorkerAssignedBy?: string;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    Public?: boolean;
    AreaOfExpertise?: string;
    CountyCouncilName?: string;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SalaryTaxMultiplier?: number;
    CostCenter?: string;
    WorkerCostCenter?: string;
    ResponsibleCostCenter?: string;
    ExternalProjectNo?: string;
    ManualCompensation?: boolean;
    ManualInvoiceValue?: boolean;
    CreatedDate?: Date;
    CustomerOrderNo?: string;
    KnowledgeOfMedicalRecordName?: string;
    TagNamesJsonStringArray?: string;
    TermsOfPaymentId?: string;
    YourReference?: string;
    DefaultPriceProfileId?: number;
    DefaultPriceProfileName?: string;
    WorkSerieId?: string;
    BusinessUnitId?: string;
    TeamId?: string;
    IsStandByShift?: boolean;
    Context?: Context;

    constructor(data?: ICreateWorkModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Weeks"] && data["Weeks"].constructor === Array) {
                this.Weeks = [];
                for (let item of data["Weeks"])
                    this.Weeks.push(WeekBaseModel.fromJS(item));
            }
            if (data["Days"] && data["Days"].constructor === Array) {
                this.Days = [];
                for (let item of data["Days"])
                    this.Days.push(WeekDayTimeModel.fromJS(item));
            }
            if (data["TimeGroups"] && data["TimeGroups"].constructor === Array) {
                this.TimeGroups = [];
                for (let item of data["TimeGroups"])
                    this.TimeGroups.push(CreateWorkItemTimeGroup.fromJS(item));
            }
            this.IsTimeReported = data["IsTimeReported"];
            this.Description = data["Description"];
            this.SplitWithPersonId = data["SplitWithPersonId"];
            this.SplitWithName = data["SplitWithName"];
            this.SplitSharePercentage = data["SplitSharePercentage"];
            this.SellingPrice = data["SellingPrice"];
            this.LivingDebiting = data["LivingDebiting"];
            this.TravelDebiting = data["TravelDebiting"];
            this.OtherDebiting = data["OtherDebiting"];
            this.Vat = data["Vat"];
            this.WorkCompensation = data["WorkCompensation"];
            this.OtherWorkCompensation = data["OtherWorkCompensation"];
            this.LivingCompensation = data["LivingCompensation"];
            this.TravelCompensation = data["TravelCompensation"];
            this.OtherCompensation = data["OtherCompensation"];
            this.OtherCompensationTaxable = data["OtherCompensationTaxable"];
            this.MileageQty = data["MileageQty"];
            this.MileagePricePerQty = data["MileagePricePerQty"];
            this.MileageCompensation = data["MileageCompensation"];
            this.LivingCost = data["LivingCost"];
            this.TravelCost = data["TravelCost"];
            this.CarRentCost = data["CarRentCost"];
            this.OtherCost = data["OtherCost"];
            this.BenefitTravel = data["BenefitTravel"];
            this.BenefitLiving = data["BenefitLiving"];
            this.BenefitCarRent = data["BenefitCarRent"];
            this.BenefitTaxation = data["BenefitTaxation"];
            this.CarRentModelNumber = data["CarRentModelNumber"];
            this.ServicePensionPercentage = data["ServicePensionPercentage"];
            this.ServicePension = data["ServicePension"];
            this.SalaryExchange = data["SalaryExchange"];
            this.WorkCompensationExclVacationCompensation = data["WorkCompensationExclVacationCompensation"];
            this.VacationCompensation = data["VacationCompensation"];
            this.WorkCompensationInclVacationCompensation = data["WorkCompensationInclVacationCompensation"];
            this.TotalCompensation = data["TotalCompensation"];
            this.CompensationSocCost = data["CompensationSocCost"];
            this.BenefitTravelSocCost = data["BenefitTravelSocCost"];
            this.BenefitLivingSocCost = data["BenefitLivingSocCost"];
            this.BenefitCarRentSocCost = data["BenefitCarRentSocCost"];
            this.BenefitTaxationSocCost = data["BenefitTaxationSocCost"];
            this.TotalSocialCosts = data["TotalSocialCosts"];
            this.TotalCompensationCostInclSoc = data["TotalCompensationCostInclSoc"];
            this.SalaryTax = data["SalaryTax"];
            this.TotalOtherCost = data["TotalOtherCost"];
            this.FullCost = data["FullCost"];
            this.WorkDebiting = data["WorkDebiting"];
            this.ExtraDebiting = data["ExtraDebiting"];
            this.TotalDebiting = data["TotalDebiting"];
            this.Margin = data["Margin"];
            this.MarginPercentage = data["MarginPercentage"];
            this.Amortized = data["Amortized"];
            this.CreateForWorkItem = data["CreateForWorkItem"];
            this.DescriptionInternal = data["DescriptionInternal"];
            this.ProjectId = data["ProjectId"];
            this.ProjectName = data["ProjectName"];
            this.EmployerPersonId = data["EmployerPersonId"];
            this.EmployerName = data["EmployerName"];
            this.LocationAddressId = data["LocationAddressId"];
            this.LocationAddress = data["LocationAddress"];
            this.EmployerBranchOffice = data["EmployerBranchOffice"];
            this.EmployerDepartment = data["EmployerDepartment"];
            this.EmployerContactPersonId = data["EmployerContactPersonId"];
            this.EmployerContactPersonFirstName = data["EmployerContactPersonFirstName"];
            this.EmployerContactPersonLastName = data["EmployerContactPersonLastName"];
            this.EmployerEmail = data["EmployerEmail"];
            this.EmployerCellPhone = data["EmployerCellPhone"];
            this.EmployerPhone = data["EmployerPhone"];
            this.WorkerPersonId = data["WorkerPersonId"];
            this.WorkerName = data["WorkerName"];
            this.WorkerCellPhone = data["WorkerCellPhone"];
            this.WorkerPhone = data["WorkerPhone"];
            this.WorkerEmail = data["WorkerEmail"];
            this.WorkerSocialSecurityNo = data["WorkerSocialSecurityNo"];
            this.WorkerAssignedDate = data["WorkerAssignedDate"] ? new Date(data["WorkerAssignedDate"].toString()) : <any>undefined;
            this.WorkerAssignedBy = data["WorkerAssignedBy"];
            this.ResponsiblePersonId = data["ResponsiblePersonId"];
            this.ResponsibleName = data["ResponsibleName"];
            this.Public = data["Public"];
            this.AreaOfExpertise = data["AreaOfExpertise"];
            this.CountyCouncilName = data["CountyCouncilName"];
            this.WorkCompensationMultiplierId = data["WorkCompensationMultiplierId"];
            this.WorkCompensationMultiplierValue = data["WorkCompensationMultiplierValue"];
            this.VacationPayMultiplier = data["VacationPayMultiplier"];
            this.SalaryTaxMultiplier = data["SalaryTaxMultiplier"];
            this.CostCenter = data["CostCenter"];
            this.WorkerCostCenter = data["WorkerCostCenter"];
            this.ResponsibleCostCenter = data["ResponsibleCostCenter"];
            this.ExternalProjectNo = data["ExternalProjectNo"];
            this.ManualCompensation = data["ManualCompensation"];
            this.ManualInvoiceValue = data["ManualInvoiceValue"];
            this.CreatedDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : <any>undefined;
            this.CustomerOrderNo = data["CustomerOrderNo"];
            this.KnowledgeOfMedicalRecordName = data["KnowledgeOfMedicalRecordName"];
            this.TagNamesJsonStringArray = data["TagNamesJsonStringArray"];
            this.TermsOfPaymentId = data["TermsOfPaymentId"];
            this.YourReference = data["YourReference"];
            this.DefaultPriceProfileId = data["DefaultPriceProfileId"];
            this.DefaultPriceProfileName = data["DefaultPriceProfileName"];
            this.WorkSerieId = data["WorkSerieId"];
            this.BusinessUnitId = data["BusinessUnitId"];
            this.TeamId = data["TeamId"];
            this.IsStandByShift = data["IsStandByShift"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateWorkModel {
        let result = new CreateWorkModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Weeks && this.Weeks.constructor === Array) {
            data["Weeks"] = [];
            for (let item of this.Weeks)
                data["Weeks"].push(item.toJSON());
        }
        if (this.Days && this.Days.constructor === Array) {
            data["Days"] = [];
            for (let item of this.Days)
                data["Days"].push(item.toJSON());
        }
        if (this.TimeGroups && this.TimeGroups.constructor === Array) {
            data["TimeGroups"] = [];
            for (let item of this.TimeGroups)
                data["TimeGroups"].push(item.toJSON());
        }
        data["IsTimeReported"] = this.IsTimeReported;
        data["Description"] = this.Description;
        data["SplitWithPersonId"] = this.SplitWithPersonId;
        data["SplitWithName"] = this.SplitWithName;
        data["SplitSharePercentage"] = this.SplitSharePercentage;
        data["SellingPrice"] = this.SellingPrice;
        data["LivingDebiting"] = this.LivingDebiting;
        data["TravelDebiting"] = this.TravelDebiting;
        data["OtherDebiting"] = this.OtherDebiting;
        data["Vat"] = this.Vat;
        data["WorkCompensation"] = this.WorkCompensation;
        data["OtherWorkCompensation"] = this.OtherWorkCompensation;
        data["LivingCompensation"] = this.LivingCompensation;
        data["TravelCompensation"] = this.TravelCompensation;
        data["OtherCompensation"] = this.OtherCompensation;
        data["OtherCompensationTaxable"] = this.OtherCompensationTaxable;
        data["MileageQty"] = this.MileageQty;
        data["MileagePricePerQty"] = this.MileagePricePerQty;
        data["MileageCompensation"] = this.MileageCompensation;
        data["LivingCost"] = this.LivingCost;
        data["TravelCost"] = this.TravelCost;
        data["CarRentCost"] = this.CarRentCost;
        data["OtherCost"] = this.OtherCost;
        data["BenefitTravel"] = this.BenefitTravel;
        data["BenefitLiving"] = this.BenefitLiving;
        data["BenefitCarRent"] = this.BenefitCarRent;
        data["BenefitTaxation"] = this.BenefitTaxation;
        data["CarRentModelNumber"] = this.CarRentModelNumber;
        data["ServicePensionPercentage"] = this.ServicePensionPercentage;
        data["ServicePension"] = this.ServicePension;
        data["SalaryExchange"] = this.SalaryExchange;
        data["WorkCompensationExclVacationCompensation"] = this.WorkCompensationExclVacationCompensation;
        data["VacationCompensation"] = this.VacationCompensation;
        data["WorkCompensationInclVacationCompensation"] = this.WorkCompensationInclVacationCompensation;
        data["TotalCompensation"] = this.TotalCompensation;
        data["CompensationSocCost"] = this.CompensationSocCost;
        data["BenefitTravelSocCost"] = this.BenefitTravelSocCost;
        data["BenefitLivingSocCost"] = this.BenefitLivingSocCost;
        data["BenefitCarRentSocCost"] = this.BenefitCarRentSocCost;
        data["BenefitTaxationSocCost"] = this.BenefitTaxationSocCost;
        data["TotalSocialCosts"] = this.TotalSocialCosts;
        data["TotalCompensationCostInclSoc"] = this.TotalCompensationCostInclSoc;
        data["SalaryTax"] = this.SalaryTax;
        data["TotalOtherCost"] = this.TotalOtherCost;
        data["FullCost"] = this.FullCost;
        data["WorkDebiting"] = this.WorkDebiting;
        data["ExtraDebiting"] = this.ExtraDebiting;
        data["TotalDebiting"] = this.TotalDebiting;
        data["Margin"] = this.Margin;
        data["MarginPercentage"] = this.MarginPercentage;
        data["Amortized"] = this.Amortized;
        data["CreateForWorkItem"] = this.CreateForWorkItem;
        data["DescriptionInternal"] = this.DescriptionInternal;
        data["ProjectId"] = this.ProjectId;
        data["ProjectName"] = this.ProjectName;
        data["EmployerPersonId"] = this.EmployerPersonId;
        data["EmployerName"] = this.EmployerName;
        data["LocationAddressId"] = this.LocationAddressId;
        data["LocationAddress"] = this.LocationAddress;
        data["EmployerBranchOffice"] = this.EmployerBranchOffice;
        data["EmployerDepartment"] = this.EmployerDepartment;
        data["EmployerContactPersonId"] = this.EmployerContactPersonId;
        data["EmployerContactPersonFirstName"] = this.EmployerContactPersonFirstName;
        data["EmployerContactPersonLastName"] = this.EmployerContactPersonLastName;
        data["EmployerEmail"] = this.EmployerEmail;
        data["EmployerCellPhone"] = this.EmployerCellPhone;
        data["EmployerPhone"] = this.EmployerPhone;
        data["WorkerPersonId"] = this.WorkerPersonId;
        data["WorkerName"] = this.WorkerName;
        data["WorkerCellPhone"] = this.WorkerCellPhone;
        data["WorkerPhone"] = this.WorkerPhone;
        data["WorkerEmail"] = this.WorkerEmail;
        data["WorkerSocialSecurityNo"] = this.WorkerSocialSecurityNo;
        data["WorkerAssignedDate"] = this.WorkerAssignedDate ? this.WorkerAssignedDate.toISOString() : <any>undefined;
        data["WorkerAssignedBy"] = this.WorkerAssignedBy;
        data["ResponsiblePersonId"] = this.ResponsiblePersonId;
        data["ResponsibleName"] = this.ResponsibleName;
        data["Public"] = this.Public;
        data["AreaOfExpertise"] = this.AreaOfExpertise;
        data["CountyCouncilName"] = this.CountyCouncilName;
        data["WorkCompensationMultiplierId"] = this.WorkCompensationMultiplierId;
        data["WorkCompensationMultiplierValue"] = this.WorkCompensationMultiplierValue;
        data["VacationPayMultiplier"] = this.VacationPayMultiplier;
        data["SalaryTaxMultiplier"] = this.SalaryTaxMultiplier;
        data["CostCenter"] = this.CostCenter;
        data["WorkerCostCenter"] = this.WorkerCostCenter;
        data["ResponsibleCostCenter"] = this.ResponsibleCostCenter;
        data["ExternalProjectNo"] = this.ExternalProjectNo;
        data["ManualCompensation"] = this.ManualCompensation;
        data["ManualInvoiceValue"] = this.ManualInvoiceValue;
        data["CreatedDate"] = this.CreatedDate ? this.CreatedDate.toISOString() : <any>undefined;
        data["CustomerOrderNo"] = this.CustomerOrderNo;
        data["KnowledgeOfMedicalRecordName"] = this.KnowledgeOfMedicalRecordName;
        data["TagNamesJsonStringArray"] = this.TagNamesJsonStringArray;
        data["TermsOfPaymentId"] = this.TermsOfPaymentId;
        data["YourReference"] = this.YourReference;
        data["DefaultPriceProfileId"] = this.DefaultPriceProfileId;
        data["DefaultPriceProfileName"] = this.DefaultPriceProfileName;
        data["WorkSerieId"] = this.WorkSerieId;
        data["BusinessUnitId"] = this.BusinessUnitId;
        data["TeamId"] = this.TeamId;
        data["IsStandByShift"] = this.IsStandByShift;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateWorkModel {
    Weeks?: WeekBaseModel[];
    Days?: WeekDayTimeModel[];
    TimeGroups?: CreateWorkItemTimeGroup[];
    IsTimeReported?: boolean;
    Description?: string;
    SplitWithPersonId?: number;
    SplitWithName?: string;
    SplitSharePercentage?: number;
    SellingPrice?: number;
    LivingDebiting?: number;
    TravelDebiting?: number;
    OtherDebiting?: number;
    Vat?: number;
    WorkCompensation?: number;
    OtherWorkCompensation?: number;
    LivingCompensation?: number;
    TravelCompensation?: number;
    OtherCompensation?: number;
    OtherCompensationTaxable?: number;
    MileageQty?: number;
    MileagePricePerQty?: number;
    MileageCompensation?: number;
    LivingCost?: number;
    TravelCost?: number;
    CarRentCost?: number;
    OtherCost?: number;
    BenefitTravel?: number;
    BenefitLiving?: number;
    BenefitCarRent?: number;
    BenefitTaxation?: number;
    CarRentModelNumber?: string;
    ServicePensionPercentage?: number;
    ServicePension?: number;
    SalaryExchange?: number;
    WorkCompensationExclVacationCompensation?: number;
    VacationCompensation?: number;
    WorkCompensationInclVacationCompensation?: number;
    TotalCompensation?: number;
    CompensationSocCost?: number;
    BenefitTravelSocCost?: number;
    BenefitLivingSocCost?: number;
    BenefitCarRentSocCost?: number;
    BenefitTaxationSocCost?: number;
    TotalSocialCosts?: number;
    TotalCompensationCostInclSoc?: number;
    SalaryTax?: number;
    TotalOtherCost?: number;
    FullCost?: number;
    WorkDebiting?: number;
    ExtraDebiting?: number;
    TotalDebiting?: number;
    Margin?: number;
    MarginPercentage?: number;
    Amortized?: number;
    CreateForWorkItem?: boolean;
    DescriptionInternal?: string;
    ProjectId?: number;
    ProjectName?: string;
    EmployerPersonId?: number;
    EmployerName?: string;
    LocationAddressId?: string;
    LocationAddress?: string;
    EmployerBranchOffice?: string;
    EmployerDepartment?: string;
    EmployerContactPersonId?: string;
    EmployerContactPersonFirstName?: string;
    EmployerContactPersonLastName?: string;
    EmployerEmail?: string;
    EmployerCellPhone?: string;
    EmployerPhone?: string;
    WorkerPersonId?: number;
    WorkerName?: string;
    WorkerCellPhone?: string;
    WorkerPhone?: string;
    WorkerEmail?: string;
    WorkerSocialSecurityNo?: string;
    WorkerAssignedDate?: Date;
    WorkerAssignedBy?: string;
    ResponsiblePersonId?: number;
    ResponsibleName?: string;
    Public?: boolean;
    AreaOfExpertise?: string;
    CountyCouncilName?: string;
    WorkCompensationMultiplierId?: number;
    WorkCompensationMultiplierValue?: number;
    VacationPayMultiplier?: number;
    SalaryTaxMultiplier?: number;
    CostCenter?: string;
    WorkerCostCenter?: string;
    ResponsibleCostCenter?: string;
    ExternalProjectNo?: string;
    ManualCompensation?: boolean;
    ManualInvoiceValue?: boolean;
    CreatedDate?: Date;
    CustomerOrderNo?: string;
    KnowledgeOfMedicalRecordName?: string;
    TagNamesJsonStringArray?: string;
    TermsOfPaymentId?: string;
    YourReference?: string;
    DefaultPriceProfileId?: number;
    DefaultPriceProfileName?: string;
    WorkSerieId?: string;
    BusinessUnitId?: string;
    TeamId?: string;
    IsStandByShift?: boolean;
    Context?: Context;
}

export class WeekDayTimeModel implements IWeekDayTimeModel {
    DayOfWeek?: number;
    FromTime?: string;
    ToTime?: string;
    BreakMinutes?: number;
    IsStandByShift?: boolean;

    constructor(data?: IWeekDayTimeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.DayOfWeek = data["DayOfWeek"];
            this.FromTime = data["FromTime"];
            this.ToTime = data["ToTime"];
            this.BreakMinutes = data["BreakMinutes"];
            this.IsStandByShift = data["IsStandByShift"];
        }
    }

    static fromJS(data: any): WeekDayTimeModel {
        let result = new WeekDayTimeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DayOfWeek"] = this.DayOfWeek;
        data["FromTime"] = this.FromTime;
        data["ToTime"] = this.ToTime;
        data["BreakMinutes"] = this.BreakMinutes;
        data["IsStandByShift"] = this.IsStandByShift;
        return data;
    }
}

export interface IWeekDayTimeModel {
    DayOfWeek?: number;
    FromTime?: string;
    ToTime?: string;
    BreakMinutes?: number;
    IsStandByShift?: boolean;
}

export class CreateWorkItemTimeGroup implements ICreateWorkItemTimeGroup {
    SortOrder?: number;
    FromDefaultPriceProfileTimeGroupId?: number;
    TimeEntries?: TimeEntryBase[];
    Name?: string;
    SellingPriceIsFactorToStandard?: boolean;
    SellingPriceFactorMultiplier?: number;
    SellingPrice?: number;
    Vat?: number;
    SalaryIsFactorToStandard?: boolean;
    SalaryFactorMultiplier?: number;
    Salary?: number;
    CurrencyId?: string;
    Uom?: string;
    DefaultTimeGroup?: boolean;
    MaxWeekPlanningQtyHours?: number;
    IsStandByTimeGroup?: boolean;
    FromTime?: string;
    ToTime?: string;
    SellingPriceInclVat?: number;
    ArticleNo?: string;
    WageTypeCodeNo?: string;
    SaleAccount?: string;
    CostCenter?: string;
    NoVacationPayCalculation?: boolean;
    NoPensionPayCalculation?: boolean;
    IsAutoCalculatedTimeGroup?: boolean;
    Context?: Context;

    constructor(data?: ICreateWorkItemTimeGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.SortOrder = data["SortOrder"];
            this.FromDefaultPriceProfileTimeGroupId = data["FromDefaultPriceProfileTimeGroupId"];
            if (data["TimeEntries"] && data["TimeEntries"].constructor === Array) {
                this.TimeEntries = [];
                for (let item of data["TimeEntries"])
                    this.TimeEntries.push(TimeEntryBase.fromJS(item));
            }
            this.Name = data["Name"];
            this.SellingPriceIsFactorToStandard = data["SellingPriceIsFactorToStandard"];
            this.SellingPriceFactorMultiplier = data["SellingPriceFactorMultiplier"];
            this.SellingPrice = data["SellingPrice"];
            this.Vat = data["Vat"];
            this.SalaryIsFactorToStandard = data["SalaryIsFactorToStandard"];
            this.SalaryFactorMultiplier = data["SalaryFactorMultiplier"];
            this.Salary = data["Salary"];
            this.CurrencyId = data["CurrencyId"];
            this.Uom = data["Uom"];
            this.DefaultTimeGroup = data["DefaultTimeGroup"];
            this.MaxWeekPlanningQtyHours = data["MaxWeekPlanningQtyHours"];
            this.IsStandByTimeGroup = data["IsStandByTimeGroup"];
            this.FromTime = data["FromTime"];
            this.ToTime = data["ToTime"];
            this.SellingPriceInclVat = data["SellingPriceInclVat"];
            this.ArticleNo = data["ArticleNo"];
            this.WageTypeCodeNo = data["WageTypeCodeNo"];
            this.SaleAccount = data["SaleAccount"];
            this.CostCenter = data["CostCenter"];
            this.NoVacationPayCalculation = data["NoVacationPayCalculation"];
            this.NoPensionPayCalculation = data["NoPensionPayCalculation"];
            this.IsAutoCalculatedTimeGroup = data["IsAutoCalculatedTimeGroup"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateWorkItemTimeGroup {
        let result = new CreateWorkItemTimeGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SortOrder"] = this.SortOrder;
        data["FromDefaultPriceProfileTimeGroupId"] = this.FromDefaultPriceProfileTimeGroupId;
        if (this.TimeEntries && this.TimeEntries.constructor === Array) {
            data["TimeEntries"] = [];
            for (let item of this.TimeEntries)
                data["TimeEntries"].push(item.toJSON());
        }
        data["Name"] = this.Name;
        data["SellingPriceIsFactorToStandard"] = this.SellingPriceIsFactorToStandard;
        data["SellingPriceFactorMultiplier"] = this.SellingPriceFactorMultiplier;
        data["SellingPrice"] = this.SellingPrice;
        data["Vat"] = this.Vat;
        data["SalaryIsFactorToStandard"] = this.SalaryIsFactorToStandard;
        data["SalaryFactorMultiplier"] = this.SalaryFactorMultiplier;
        data["Salary"] = this.Salary;
        data["CurrencyId"] = this.CurrencyId;
        data["Uom"] = this.Uom;
        data["DefaultTimeGroup"] = this.DefaultTimeGroup;
        data["MaxWeekPlanningQtyHours"] = this.MaxWeekPlanningQtyHours;
        data["IsStandByTimeGroup"] = this.IsStandByTimeGroup;
        data["FromTime"] = this.FromTime;
        data["ToTime"] = this.ToTime;
        data["SellingPriceInclVat"] = this.SellingPriceInclVat;
        data["ArticleNo"] = this.ArticleNo;
        data["WageTypeCodeNo"] = this.WageTypeCodeNo;
        data["SaleAccount"] = this.SaleAccount;
        data["CostCenter"] = this.CostCenter;
        data["NoVacationPayCalculation"] = this.NoVacationPayCalculation;
        data["NoPensionPayCalculation"] = this.NoPensionPayCalculation;
        data["IsAutoCalculatedTimeGroup"] = this.IsAutoCalculatedTimeGroup;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateWorkItemTimeGroup {
    SortOrder?: number;
    FromDefaultPriceProfileTimeGroupId?: number;
    TimeEntries?: TimeEntryBase[];
    Name?: string;
    SellingPriceIsFactorToStandard?: boolean;
    SellingPriceFactorMultiplier?: number;
    SellingPrice?: number;
    Vat?: number;
    SalaryIsFactorToStandard?: boolean;
    SalaryFactorMultiplier?: number;
    Salary?: number;
    CurrencyId?: string;
    Uom?: string;
    DefaultTimeGroup?: boolean;
    MaxWeekPlanningQtyHours?: number;
    IsStandByTimeGroup?: boolean;
    FromTime?: string;
    ToTime?: string;
    SellingPriceInclVat?: number;
    ArticleNo?: string;
    WageTypeCodeNo?: string;
    SaleAccount?: string;
    CostCenter?: string;
    NoVacationPayCalculation?: boolean;
    NoPensionPayCalculation?: boolean;
    IsAutoCalculatedTimeGroup?: boolean;
    Context?: Context;
}

export class TimeEntryBase implements ITimeEntryBase {
    Uom?: string;
    BuyPrice?: number;
    SellingPrice?: number;
    CurrencyId?: string;
    Vat?: number;
    DayOfWeek?: number;
    Hours?: number;
    Minutes?: number;
    Seconds?: number;
    Qty?: number;
    Context?: Context;

    constructor(data?: ITimeEntryBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.Uom = data["Uom"];
            this.BuyPrice = data["BuyPrice"];
            this.SellingPrice = data["SellingPrice"];
            this.CurrencyId = data["CurrencyId"];
            this.Vat = data["Vat"];
            this.DayOfWeek = data["DayOfWeek"];
            this.Hours = data["Hours"];
            this.Minutes = data["Minutes"];
            this.Seconds = data["Seconds"];
            this.Qty = data["Qty"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TimeEntryBase {
        let result = new TimeEntryBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Uom"] = this.Uom;
        data["BuyPrice"] = this.BuyPrice;
        data["SellingPrice"] = this.SellingPrice;
        data["CurrencyId"] = this.CurrencyId;
        data["Vat"] = this.Vat;
        data["DayOfWeek"] = this.DayOfWeek;
        data["Hours"] = this.Hours;
        data["Minutes"] = this.Minutes;
        data["Seconds"] = this.Seconds;
        data["Qty"] = this.Qty;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITimeEntryBase {
    Uom?: string;
    BuyPrice?: number;
    SellingPrice?: number;
    CurrencyId?: string;
    Vat?: number;
    DayOfWeek?: number;
    Hours?: number;
    Minutes?: number;
    Seconds?: number;
    Qty?: number;
    Context?: Context;
}

export class WorkItemsDetailsInclCustomersAndEmployers implements IWorkItemsDetailsInclCustomersAndEmployers {
    WorkItems?: WorkItemDetailsModel[];
    Employers?: Person[];
    Workers?: Person[];

    constructor(data?: IWorkItemsDetailsInclCustomersAndEmployers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["WorkItems"] && data["WorkItems"].constructor === Array) {
                this.WorkItems = [];
                for (let item of data["WorkItems"])
                    this.WorkItems.push(WorkItemDetailsModel.fromJS(item));
            }
            if (data["Employers"] && data["Employers"].constructor === Array) {
                this.Employers = [];
                for (let item of data["Employers"])
                    this.Employers.push(Person.fromJS(item));
            }
            if (data["Workers"] && data["Workers"].constructor === Array) {
                this.Workers = [];
                for (let item of data["Workers"])
                    this.Workers.push(Person.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WorkItemsDetailsInclCustomersAndEmployers {
        let result = new WorkItemsDetailsInclCustomersAndEmployers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.WorkItems && this.WorkItems.constructor === Array) {
            data["WorkItems"] = [];
            for (let item of this.WorkItems)
                data["WorkItems"].push(item.toJSON());
        }
        if (this.Employers && this.Employers.constructor === Array) {
            data["Employers"] = [];
            for (let item of this.Employers)
                data["Employers"].push(item.toJSON());
        }
        if (this.Workers && this.Workers.constructor === Array) {
            data["Workers"] = [];
            for (let item of this.Workers)
                data["Workers"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWorkItemsDetailsInclCustomersAndEmployers {
    WorkItems?: WorkItemDetailsModel[];
    Employers?: Person[];
    Workers?: Person[];
}

export class WorkItemCandidate implements IWorkItemCandidate {
    WorkItemCandidateId?: number;
    WorkItemId?: number;
    PersonId?: number;
    CandidateStatusId?: number;
    Comment?: string;
    Candidate?: Person;

    constructor(data?: IWorkItemCandidate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WorkItemCandidateId = data["WorkItemCandidateId"];
            this.WorkItemId = data["WorkItemId"];
            this.PersonId = data["PersonId"];
            this.CandidateStatusId = data["CandidateStatusId"];
            this.Comment = data["Comment"];
            this.Candidate = data["Candidate"] ? Person.fromJS(data["Candidate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkItemCandidate {
        let result = new WorkItemCandidate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WorkItemCandidateId"] = this.WorkItemCandidateId;
        data["WorkItemId"] = this.WorkItemId;
        data["PersonId"] = this.PersonId;
        data["CandidateStatusId"] = this.CandidateStatusId;
        data["Comment"] = this.Comment;
        data["Candidate"] = this.Candidate ? this.Candidate.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkItemCandidate {
    WorkItemCandidateId?: number;
    WorkItemId?: number;
    PersonId?: number;
    CandidateStatusId?: number;
    Comment?: string;
    Candidate?: Person;
}

export class ImplementWorkItemSerieConsultantAgreementModel implements IImplementWorkItemSerieConsultantAgreementModel {
    FromAgreementTemplateId?: number;
    ConsultanPersonId?: number;
    WorkSerieId?: string;
    WorkItemIdsAsJsonArray?: string;

    constructor(data?: IImplementWorkItemSerieConsultantAgreementModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.FromAgreementTemplateId = data["FromAgreementTemplateId"];
            this.ConsultanPersonId = data["ConsultanPersonId"];
            this.WorkSerieId = data["WorkSerieId"];
            this.WorkItemIdsAsJsonArray = data["WorkItemIdsAsJsonArray"];
        }
    }

    static fromJS(data: any): ImplementWorkItemSerieConsultantAgreementModel {
        let result = new ImplementWorkItemSerieConsultantAgreementModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FromAgreementTemplateId"] = this.FromAgreementTemplateId;
        data["ConsultanPersonId"] = this.ConsultanPersonId;
        data["WorkSerieId"] = this.WorkSerieId;
        data["WorkItemIdsAsJsonArray"] = this.WorkItemIdsAsJsonArray;
        return data;
    }
}

export interface IImplementWorkItemSerieConsultantAgreementModel {
    FromAgreementTemplateId?: number;
    ConsultanPersonId?: number;
    WorkSerieId?: string;
    WorkItemIdsAsJsonArray?: string;
}

export class WorkItemSerieConsultantAgreement implements IWorkItemSerieConsultantAgreement {
    WorkItemSerieConsultantAgreementId?: number;
    WorkSerieId?: string;
    WorkItemIdsAsJsonArray?: string;
    WorkerPersonId?: number;
    WorkerPersonName?: string;
    AnySignature?: boolean;
    DocumentKey?: string;
    IsClosedForSignature?: boolean;
    AgreementReceivers?: AgreementReceiver[];
    Signatures?: AgreementSignature[];
    History?: AgreementHistory[];
    Name?: string;
    TemplateContent?: string;
    DocumentCloudFileUrl?: string;
    Dynamic?: boolean;
    AgreementType?: string;
    Context?: Context;

    constructor(data?: IWorkItemSerieConsultantAgreement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.WorkItemSerieConsultantAgreementId = data["WorkItemSerieConsultantAgreementId"];
            this.WorkSerieId = data["WorkSerieId"];
            this.WorkItemIdsAsJsonArray = data["WorkItemIdsAsJsonArray"];
            this.WorkerPersonId = data["WorkerPersonId"];
            this.WorkerPersonName = data["WorkerPersonName"];
            this.AnySignature = data["AnySignature"];
            this.DocumentKey = data["DocumentKey"];
            this.IsClosedForSignature = data["IsClosedForSignature"];
            if (data["AgreementReceivers"] && data["AgreementReceivers"].constructor === Array) {
                this.AgreementReceivers = [];
                for (let item of data["AgreementReceivers"])
                    this.AgreementReceivers.push(AgreementReceiver.fromJS(item));
            }
            if (data["Signatures"] && data["Signatures"].constructor === Array) {
                this.Signatures = [];
                for (let item of data["Signatures"])
                    this.Signatures.push(AgreementSignature.fromJS(item));
            }
            if (data["History"] && data["History"].constructor === Array) {
                this.History = [];
                for (let item of data["History"])
                    this.History.push(AgreementHistory.fromJS(item));
            }
            this.Name = data["Name"];
            this.TemplateContent = data["TemplateContent"];
            this.DocumentCloudFileUrl = data["DocumentCloudFileUrl"];
            this.Dynamic = data["Dynamic"];
            this.AgreementType = data["AgreementType"];
            this.Context = data["Context"] ? Context.fromJS(data["Context"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkItemSerieConsultantAgreement {
        let result = new WorkItemSerieConsultantAgreement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["WorkItemSerieConsultantAgreementId"] = this.WorkItemSerieConsultantAgreementId;
        data["WorkSerieId"] = this.WorkSerieId;
        data["WorkItemIdsAsJsonArray"] = this.WorkItemIdsAsJsonArray;
        data["WorkerPersonId"] = this.WorkerPersonId;
        data["WorkerPersonName"] = this.WorkerPersonName;
        data["AnySignature"] = this.AnySignature;
        data["DocumentKey"] = this.DocumentKey;
        data["IsClosedForSignature"] = this.IsClosedForSignature;
        if (this.AgreementReceivers && this.AgreementReceivers.constructor === Array) {
            data["AgreementReceivers"] = [];
            for (let item of this.AgreementReceivers)
                data["AgreementReceivers"].push(item.toJSON());
        }
        if (this.Signatures && this.Signatures.constructor === Array) {
            data["Signatures"] = [];
            for (let item of this.Signatures)
                data["Signatures"].push(item.toJSON());
        }
        if (this.History && this.History.constructor === Array) {
            data["History"] = [];
            for (let item of this.History)
                data["History"].push(item.toJSON());
        }
        data["Name"] = this.Name;
        data["TemplateContent"] = this.TemplateContent;
        data["DocumentCloudFileUrl"] = this.DocumentCloudFileUrl;
        data["Dynamic"] = this.Dynamic;
        data["AgreementType"] = this.AgreementType;
        data["Context"] = this.Context ? this.Context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkItemSerieConsultantAgreement {
    WorkItemSerieConsultantAgreementId?: number;
    WorkSerieId?: string;
    WorkItemIdsAsJsonArray?: string;
    WorkerPersonId?: number;
    WorkerPersonName?: string;
    AnySignature?: boolean;
    DocumentKey?: string;
    IsClosedForSignature?: boolean;
    AgreementReceivers?: AgreementReceiver[];
    Signatures?: AgreementSignature[];
    History?: AgreementHistory[];
    Name?: string;
    TemplateContent?: string;
    DocumentCloudFileUrl?: string;
    Dynamic?: boolean;
    AgreementType?: string;
    Context?: Context;
}

export class TupleOfIEnumerableOfWorkShiftAndString implements ITupleOfIEnumerableOfWorkShiftAndString {
    Item1?: WorkShift[];
    Item2?: string;

    constructor(data?: ITupleOfIEnumerableOfWorkShiftAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Item1"] && data["Item1"].constructor === Array) {
                this.Item1 = [];
                for (let item of data["Item1"])
                    this.Item1.push(WorkShift.fromJS(item));
            }
            this.Item2 = data["Item2"];
        }
    }

    static fromJS(data: any): TupleOfIEnumerableOfWorkShiftAndString {
        let result = new TupleOfIEnumerableOfWorkShiftAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.Item1 && this.Item1.constructor === Array) {
            data["Item1"] = [];
            for (let item of this.Item1)
                data["Item1"].push(item.toJSON());
        }
        data["Item2"] = this.Item2;
        return data;
    }
}

export interface ITupleOfIEnumerableOfWorkShiftAndString {
    Item1?: WorkShift[];
    Item2?: string;
}

export class WorkShiftSearchModel implements IWorkShiftSearchModel {
    id?: string;
    Name?: string;
    Weeks?: WeekBaseModel[];
    SearchStr?: string;
    ResponsibleId?: number;
    Need?: boolean;
    PreliminiaryBooked?: boolean;
    Booked?: boolean;
    TimeReported?: boolean;
    AreaOfExpertise?: string;
    ManuallySaved?: boolean;
    CreatedBy?: number;

    constructor(data?: IWorkShiftSearchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.Name = data["Name"];
            if (data["Weeks"] && data["Weeks"].constructor === Array) {
                this.Weeks = [];
                for (let item of data["Weeks"])
                    this.Weeks.push(WeekBaseModel.fromJS(item));
            }
            this.SearchStr = data["SearchStr"];
            this.ResponsibleId = data["ResponsibleId"];
            this.Need = data["Need"];
            this.PreliminiaryBooked = data["PreliminiaryBooked"];
            this.Booked = data["Booked"];
            this.TimeReported = data["TimeReported"];
            this.AreaOfExpertise = data["AreaOfExpertise"];
            this.ManuallySaved = data["ManuallySaved"];
            this.CreatedBy = data["CreatedBy"];
        }
    }

    static fromJS(data: any): WorkShiftSearchModel {
        let result = new WorkShiftSearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["Name"] = this.Name;
        if (this.Weeks && this.Weeks.constructor === Array) {
            data["Weeks"] = [];
            for (let item of this.Weeks)
                data["Weeks"].push(item.toJSON());
        }
        data["SearchStr"] = this.SearchStr;
        data["ResponsibleId"] = this.ResponsibleId;
        data["Need"] = this.Need;
        data["PreliminiaryBooked"] = this.PreliminiaryBooked;
        data["Booked"] = this.Booked;
        data["TimeReported"] = this.TimeReported;
        data["AreaOfExpertise"] = this.AreaOfExpertise;
        data["ManuallySaved"] = this.ManuallySaved;
        data["CreatedBy"] = this.CreatedBy;
        return data;
    }
}

export interface IWorkShiftSearchModel {
    id?: string;
    Name?: string;
    Weeks?: WeekBaseModel[];
    SearchStr?: string;
    ResponsibleId?: number;
    Need?: boolean;
    PreliminiaryBooked?: boolean;
    Booked?: boolean;
    TimeReported?: boolean;
    AreaOfExpertise?: string;
    ManuallySaved?: boolean;
    CreatedBy?: number;
}

export enum MethodInfoMemberType {
    Constructor = <any>"Constructor",
    Event = <any>"Event",
    Field = <any>"Field",
    Method = <any>"Method",
    Property = <any>"Property",
    TypeInfo = <any>"TypeInfo",
    Custom = <any>"Custom",
    NestedType = <any>"NestedType",
    All = <any>"All",
}

export enum MethodInfoMethodImplementationFlags {
    Managed = <any>"Managed",
    IL = <any>"IL",
    Native = <any>"Native",
    OPTIL = <any>"OPTIL",
    Runtime = <any>"Runtime",
    CodeTypeMask = <any>"CodeTypeMask",
    Unmanaged = <any>"Unmanaged",
    ManagedMask = <any>"ManagedMask",
    NoInlining = <any>"NoInlining",
    ForwardRef = <any>"ForwardRef",
    Synchronized = <any>"Synchronized",
    NoOptimization = <any>"NoOptimization",
    PreserveSig = <any>"PreserveSig",
    AggressiveInlining = <any>"AggressiveInlining",
    InternalCall = <any>"InternalCall",
    MaxMethodImplVal = <any>"MaxMethodImplVal",
}

export enum MethodInfoAttributes {
    ReuseSlot = <any>"ReuseSlot",
    PrivateScope = <any>"PrivateScope",
    Private = <any>"Private",
    FamANDAssem = <any>"FamANDAssem",
    Assembly = <any>"Assembly",
    Family = <any>"Family",
    FamORAssem = <any>"FamORAssem",
    Public = <any>"Public",
    MemberAccessMask = <any>"MemberAccessMask",
    UnmanagedExport = <any>"UnmanagedExport",
    Static = <any>"Static",
    Final = <any>"Final",
    Virtual = <any>"Virtual",
    HideBySig = <any>"HideBySig",
    NewSlot = <any>"NewSlot",
    VtableLayoutMask = <any>"VtableLayoutMask",
    CheckAccessOnOverride = <any>"CheckAccessOnOverride",
    Abstract = <any>"Abstract",
    SpecialName = <any>"SpecialName",
    RTSpecialName = <any>"RTSpecialName",
    PinvokeImpl = <any>"PinvokeImpl",
    HasSecurity = <any>"HasSecurity",
    RequireSecObject = <any>"RequireSecObject",
    ReservedMask = <any>"ReservedMask",
}

export enum MethodInfoCallingConvention {
    Standard = <any>"Standard",
    VarArgs = <any>"VarArgs",
    Any = <any>"Any",
    HasThis = <any>"HasThis",
    ExplicitThis = <any>"ExplicitThis",
}

export enum ParameterInfoAttributes {
    None = <any>"None",
    In = <any>"In",
    Out = <any>"Out",
    Lcid = <any>"Lcid",
    Retval = <any>"Retval",
    Optional = <any>"Optional",
    HasDefault = <any>"HasDefault",
    HasFieldMarshal = <any>"HasFieldMarshal",
    Reserved3 = <any>"Reserved3",
    Reserved4 = <any>"Reserved4",
    ReservedMask = <any>"ReservedMask",
}

export enum MemberInfoMemberType {
    Constructor = <any>"Constructor",
    Event = <any>"Event",
    Field = <any>"Field",
    Method = <any>"Method",
    Property = <any>"Property",
    TypeInfo = <any>"TypeInfo",
    Custom = <any>"Custom",
    NestedType = <any>"NestedType",
    All = <any>"All",
}

export enum ConstructorInfoMemberType {
    Constructor = <any>"Constructor",
    Event = <any>"Event",
    Field = <any>"Field",
    Method = <any>"Method",
    Property = <any>"Property",
    TypeInfo = <any>"TypeInfo",
    Custom = <any>"Custom",
    NestedType = <any>"NestedType",
    All = <any>"All",
}

export enum ConstructorInfoMethodImplementationFlags {
    Managed = <any>"Managed",
    IL = <any>"IL",
    Native = <any>"Native",
    OPTIL = <any>"OPTIL",
    Runtime = <any>"Runtime",
    CodeTypeMask = <any>"CodeTypeMask",
    Unmanaged = <any>"Unmanaged",
    ManagedMask = <any>"ManagedMask",
    NoInlining = <any>"NoInlining",
    ForwardRef = <any>"ForwardRef",
    Synchronized = <any>"Synchronized",
    NoOptimization = <any>"NoOptimization",
    PreserveSig = <any>"PreserveSig",
    AggressiveInlining = <any>"AggressiveInlining",
    InternalCall = <any>"InternalCall",
    MaxMethodImplVal = <any>"MaxMethodImplVal",
}

export enum ConstructorInfoAttributes {
    ReuseSlot = <any>"ReuseSlot",
    PrivateScope = <any>"PrivateScope",
    Private = <any>"Private",
    FamANDAssem = <any>"FamANDAssem",
    Assembly = <any>"Assembly",
    Family = <any>"Family",
    FamORAssem = <any>"FamORAssem",
    Public = <any>"Public",
    MemberAccessMask = <any>"MemberAccessMask",
    UnmanagedExport = <any>"UnmanagedExport",
    Static = <any>"Static",
    Final = <any>"Final",
    Virtual = <any>"Virtual",
    HideBySig = <any>"HideBySig",
    NewSlot = <any>"NewSlot",
    VtableLayoutMask = <any>"VtableLayoutMask",
    CheckAccessOnOverride = <any>"CheckAccessOnOverride",
    Abstract = <any>"Abstract",
    SpecialName = <any>"SpecialName",
    RTSpecialName = <any>"RTSpecialName",
    PinvokeImpl = <any>"PinvokeImpl",
    HasSecurity = <any>"HasSecurity",
    RequireSecObject = <any>"RequireSecObject",
    ReservedMask = <any>"ReservedMask",
}

export enum ConstructorInfoCallingConvention {
    Standard = <any>"Standard",
    VarArgs = <any>"VarArgs",
    Any = <any>"Any",
    HasThis = <any>"HasThis",
    ExplicitThis = <any>"ExplicitThis",
}

export enum ProductSubscriptionOptionDayOfWeek {
    Sunday = <any>"Sunday",
    Monday = <any>"Monday",
    Tuesday = <any>"Tuesday",
    Wednesday = <any>"Wednesday",
    Thursday = <any>"Thursday",
    Friday = <any>"Friday",
    Saturday = <any>"Saturday",
}

export enum DeliveryDayDayOfWeek {
    Sunday = <any>"Sunday",
    Monday = <any>"Monday",
    Tuesday = <any>"Tuesday",
    Wednesday = <any>"Wednesday",
    Thursday = <any>"Thursday",
    Friday = <any>"Friday",
    Saturday = <any>"Saturday",
}

export enum ProductSubscriptionOptionDetailsDayOfWeek {
    Sunday = <any>"Sunday",
    Monday = <any>"Monday",
    Tuesday = <any>"Tuesday",
    Wednesday = <any>"Wednesday",
    Thursday = <any>"Thursday",
    Friday = <any>"Friday",
    Saturday = <any>"Saturday",
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    result: any;

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, null);
}